{"version":3,"sources":["TopBar.js","util.ts","WordCloud.tsx","RecordTable.tsx","KeywordCrumb.tsx","Dataloader.ts","DatasetView.tsx","App.js","serviceWorker.js","index.js"],"names":["TopBar","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","commaFormat","x","Number","isNaN","parts","toFixed","split","replace","join","KMFormat","suffix","toPrecision","WordCloud","props","callbacks","getWordTooltip","word","text","value","onWordClick","getCallback","bind","onWordMouseOut","onWordMouseOver","options","fontFamily","fontSizes","fontStyle","fontWeight","scale","deterministic","rotations","rotationAngles","transitionDuration","state","words","this","dataloader","addChangeCallback","setWords","style","getWordList","callback","event","isActive","select","target","on","addkeywordFilter","transition","attr","forceUpdate","Component","RecordTable","columns","title","field","type","showTitle","sorting","exportButton","padding","paging","search","draggable","headerStyle","top","exportAllData","icons","Export","SaveAlt","SortArrow","ArrowDownward","FirstPage","LastPage","NextPage","ChevronRight","PreviousPage","ChevronLeft","data","getRecords","getTotal","KeywordCrumb","list","getFilters","Breadcrumbs","separator","Link","key","onClick","sliceFilter","getDatasetTotal","slice","map","filter","index","category","name","amount","length","Dataloader","query","dataset","parseDataset","Papa","window","location","pathname","download","header","complete","results","e","date","Date","parseFloat","__parsed_extra","onLoad","reduce","prev","curr","parseQuery","listChangeCallback","forEach","entry","includes","sign_location","indexOf","q","substr","v","addCategoryFilter","btoa","values","str","unit","KMFToNum","addAmountFilter","console","log","string","atob","path","href","history","pushState","c","setQueryString","push","words_set","Map","row","w","set","get","words_list","entries","val","sort","a","b","remaining_length","word_index","new_index","low","high","res","startsWith","DatasetView","loader","Paper","className","margin","height","React","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+TAIe,SAASA,IACpB,OACI,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQC,MAAM,UAAUC,aAAW,QAChD,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,qC,wECXT,SAASC,EAAYC,GACxB,GAAIC,OAAOC,MAAMF,GAAI,MAAO,GAC5B,IACIG,EADgBH,EAAEI,QAAQ,GACFC,MAAM,KAElC,OADAF,EAAM,GAAKA,EAAM,GAAGG,QAAQ,wBAAyB,KAC9CH,EAAMI,KAAK,KAGf,SAASC,EAASR,GACrB,GAAIC,OAAOC,MAAMF,GAAI,MAAO,GAC5B,IAAIS,EAAS,GAQb,OAPIT,GAAK,KACLS,EAAS,IACTT,GAAK,KACEA,GAAK,MACZS,EAAS,IACTT,GAAK,KAEFA,EAAEU,YAAY,GAAKD,E,ICRTE,E,kDAuBjB,WAAYC,GAAyB,IAAD,8BAChC,cAAMA,IAvBFC,UAAuB,CAC3BC,eAAgB,SAACC,GAAD,gBAAkBA,EAAKC,KAAvB,iBAAoCR,EAASO,EAAKE,OAAlD,sBAChBC,YAAa,EAAKC,YAAY,eAAeC,KAAhC,gBACbC,eAAgB,EAAKF,YAAY,kBAAkBC,KAAnC,gBAChBE,gBAAiB,EAAKH,YAAY,mBAAmBC,KAApC,iBAkBe,EAf5BG,QAAuB,CAC3BC,WAAY,SACZC,UAAW,CAAC,EAAG,IACfC,UAAW,SACXC,WAAY,SACZC,MAAO,MAEPC,eAAe,EAEfC,UAAW,EACXC,eAAgB,EAAE,GAAI,IAEtBC,mBAAoB,KAMpB,EAAKC,MAAQ,CACTC,MAAQ,CAAC,CAAClB,KAAM,aAAcC,MAAO,OAJT,E,gEAS/BkB,KAAKvB,MAAMwB,WAAWC,kBAAkBF,KAAKG,SAASlB,KAAKe,S,+BAI5D,OACI,yBAAKI,MAAOJ,KAAKvB,MAAM2B,OACnB,kBAAC,IAAD,CAAgB1B,UAAWsB,KAAKtB,UAAWqB,MAAOC,KAAKvB,MAAMwB,WAAWI,cAAejB,QAASY,KAAKZ,a,kCAKrGkB,GAAmB,IAAD,OAC1B,OAAO,SAAC1B,EAAY2B,GAChB,IAAMC,EAAwB,mBAAbF,EAEJG,YAAOF,EAAMG,QAErBC,GAAG,SAAU,WACNH,GACA,EAAK/B,MAAMwB,WAAWW,iBAAiBhC,EAAKC,SAGnDgC,aACAC,KAAK,aAAc,SACnBA,KAAK,kBAAmBN,EAAW,YAAc,W,iCAK1DR,KAAKe,kB,GA7D0BC,a,wECClBC,E,4MAETC,QAAyB,CAC7B,CAACC,MAAO,OAAQC,MAAO,OAAQC,KAAM,QACrC,CAACF,MAAO,SAAUC,MAAO,SAAUC,KAAM,YACzC,CAACF,MAAO,cAAeC,MAAO,eAC9B,CAACD,MAAO,aAAcC,MAAO,cAC7B,CAACD,MAAO,OAAQC,MAAO,QACvB,CAACD,MAAO,WAAYC,MAAO,YAC3B,CAACD,MAAO,QAASC,MAAO,SACxB,CAACD,MAAO,KAAMC,MAAO,O,EAGjBhC,QAAmB,CACvBkC,WAAW,EACXC,SAAS,EACTC,cAAc,EACdC,QAAS,QACTC,QAAQ,EACRC,QAAQ,EACRC,WAAW,EACXC,YAAa,CAAEzE,SAAU,SAAU0E,IAAK,GACxCC,eAAe,G,EAGXC,MAAe,CAEnBC,OAAQC,IAERC,UAAWC,IAEXC,UAAWA,IAEXC,SAAUA,IAEVC,SAAUC,IAEVC,aAAcC,K,kEAGI,IAAD,OAChB1C,KAAKvB,MAAMwB,WAAWC,mBAAkB,kBAAM,EAAKa,mB,+BAIpD,OACQ,kBAAC,IAAD,CAAe3B,QAASY,KAAKZ,QAAS8B,QAASlB,KAAKkB,QAASc,MAAOhC,KAAKgC,MAC1DW,KAAM3C,KAAKvB,MAAMwB,WAAW2C,aAC5BzB,MAAO,wBAAwBvD,EAAYoC,KAAKvB,MAAMwB,WAAW4C,kB,GAhDvD7B,a,kBCFpB8B,E,kLAEI,IAAD,OAChB9C,KAAKvB,MAAMwB,WAAWC,mBAAkB,kBAAI,EAAKa,mB,+BAG3C,IAAD,OACDgC,EAAO/C,KAAKvB,MAAMwB,WAAW+C,aACjC,OACI,kBAACC,EAAA,EAAD,CAAaC,UAAU,IAAI9C,MAAOJ,KAAKvB,MAAM2B,OACzC,kBAAC+C,EAAA,EAAD,CAAMC,KAAM,EAAG5F,MAAM,cAAc6F,QAAS,kBAAI,EAAK5E,MAAMwB,WAAWqD,YAAY,KAAlF,iBAAqGjF,EAAS2B,KAAKvB,MAAMwB,WAAWsD,mBAApI,KACCR,EAAKS,MAAM,GAAI,GAAGC,KAAI,SAACC,EAAQC,GAAT,OACnB,kBAACR,EAAA,EAAD,CAAMC,IAAKO,EAAOnG,MAAM,gBAAgB6F,QAAS,kBAAI,EAAK5E,MAAMwB,WAAWqD,YAAYK,EAAQ,KAAKD,EAAOE,SAA3G,KAAuHF,EAAOG,KAA9H,KAAsIxF,EAASqF,EAAOI,QAAtJ,QAEHf,EAAKgB,OAAS,EAAK,kBAACrG,EAAA,EAAD,CAAYF,MAAM,cAAc4F,IAAKL,EAAKgB,QAAShB,EAAKA,EAAKgB,OAAO,GAAGH,SAAvE,KAAmFb,EAAKA,EAAKgB,OAAO,GAAGF,KAAvG,KAA+GxF,EAAS0E,EAAKA,EAAKgB,OAAO,GAAGD,QAA5I,KAAsK,U,GAdhK9C,a,oDCuBrBgD,E,WASjB,WAAYC,GAAiB,IAAD,gCAPpBtB,KAAoB,GAOA,gDANP,KAMO,gDALU,KAKV,KAJpBsB,WAIoB,OAHpBC,aAGoB,kDAFJ,IAGpBlE,KAAKiE,MAAQA,EACbjE,KAAKkE,QAAUF,EAAWG,aAAaF,GACvCG,QAAWC,OAAOC,SAASC,SAAW,oBAAqBvE,KAAKkE,QAAS,OACrE,CACIM,UAAU,EACVC,QAAQ,EACRC,SAAU,SAACC,GACP,EAAKhC,KAAOgC,EAAQhC,KAAKc,KAAI,SAACmB,GAI1B,OAHAA,EAAEC,KAAO,IAAIC,KAAiC,IAA5BhH,OAAOiH,WAAWH,EAAEC,OACtCD,EAAEd,OAAShG,OAAOiH,WAAWH,EAAEd,QAC/Bc,EAAE7E,MAAQ6E,EAAEI,gBAAkB,GACvBJ,KAGX,EAAKK,Y,qDAMjB,YAAAjF,KAAA,MAAqBA,KAAK2C,KAAKuC,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,EAAKtB,SAAQ,GAC1E9D,KAAKqF,WAAWrF,KAAKiE,OACrBjE,KAAKsF,uB,iCAUUrB,GAAgB,IAAD,OACb,MAAbA,EAAM,KAAYA,EAAQA,EAAMT,MAAM,IAC1C,IAAM9E,EAAS,YAAGsB,KAAH,MACf,YAAAA,KAAA,MAA4B,GAC5B,IACIiE,EAAM/F,MAAM,KAAKqH,SAAQ,SAAAC,GACrB,GAAKA,EAAMC,SAAS,KAApB,CACA,IAAMC,EAAgBF,EAAMG,QAAQ,KAC9BC,EAAIJ,EAAMK,OAAO,EAAGH,GACpBI,EAAIN,EAAMK,OAAOH,EAAgB,GACvC,OAAQE,GACJ,IAAK,UACD,EAAKhF,iBAAiBkF,GACtB,MACJ,IAAK,OACL,IAAK,WACL,IAAK,aACL,IAAK,KACL,IAAK,QACD,EAAKC,kBAAkBH,EAAGI,KAAKF,IAC/B,MACJ,IAAK,SACD,IAAKA,EAAEL,SAAS,MAAO,OACvB,IAAMQ,EAASH,EAAE5H,MAAM,MAAMuF,KAAI,SAAAmB,GAAC,OJ5EnD,SAAkBsB,GACrB,IAAIC,EAAO,EAaX,OAZID,EAAIT,SAAS,OACbU,EAAO,IACPD,EAAMA,EAAI/H,QAAQ,IAAK,KAEvB+H,EAAIT,SAAS,OACbU,EAAO,IACPD,EAAMA,EAAI/H,QAAQ,IAAK,KAEvB+H,EAAIT,SAAS,OACbS,EAAMA,EAAI/H,QAAQ,IAAK,IACvBgI,EAAO,KAEJrI,OAAOiH,WAAWmB,GAAOC,EI8D0BC,CAASxB,MAC/C,EAAKyB,gBAAgBJ,EAAO,GAAIA,EAAO,SAIrD,MAAOrB,GACL0B,QAAQC,IAAI3B,GAEhB,YAAA5E,KAAA,MAA4BtB,I,uCAI5B,IAAM8H,EAAS,KAAOxG,KAAKkE,QACvB,YAAAlE,KAAA,MAAckF,QAAO,SAACC,EAAMC,GACxB,OAAQA,EAAKxB,UACT,IAAK,UACD,OAAOuB,EAAO,YAAcC,EAAKvB,KACrC,IAAK,SACD,OAAOsB,EAAO,WAAaC,EAAKvB,KAAK1F,QAAQ,IAAK,MACtD,QACI,OAAOgH,EAAO,IAAMC,EAAKxB,SAAW,IAAM6C,KAAKrB,EAAKvB,SAE7D,IACH6C,EAAOrC,OAAOC,SAASqC,KACvBD,EAAKjB,SAAS,OAAMiB,EAAOA,EAAKb,OAAO,EAAGa,EAAKf,QAAQ,OAC3DtB,OAAOuC,QAAQC,UAAU,CAACH,KAAMA,EAAO,IAAMF,GAAQ,GAAGE,EAAO,IAAMF,K,2CAIrE,YAAAxG,KAAA,MAA0BuF,SAAQ,SAAAuB,GAAC,OAAIA,OACvC9G,KAAK+G,mB,wCAGSzG,GACd,YAAAN,KAAA,MAA0BgH,KAAK1G,K,mCAI/B,OAAyB,IAArBN,KAAK2C,KAAKoB,OACH,GAGkB,IAAzB,YAAA/D,KAAA,MAAc+D,OACP/D,KAAK2C,KAGA,YAAA3C,KAAA,MAAc,YAAAA,KAAA,MAAc+D,OAAS,GAAGJ,Q,oCAKxD,GAAyB,IAArB3D,KAAK2C,KAAKoB,OACV,MAAO,GAGX,IAAIkD,EAAY,IAAIC,IACpBlH,KAAK4C,aAAa2C,SAAQ,SAAA4B,GACtBA,EAAIpH,MAAMwF,SAAQ,SAAA6B,GACdH,EAAUI,IAAID,GAAIH,EAAUK,IAAIF,IAAM,GAAKD,EAAIrD,cAIvD,IAZwB,EAYpByD,EAA0B,GAZN,cAaAN,EAAUO,WAbV,IAaxB,2BAA6C,CAAC,IAAD,yBAAnC5I,EAAmC,KAA7B6I,EAA6B,KACzCF,EAAWP,KAAK,CAACnI,KAAMD,EAAME,MAAO2I,KAdhB,8BAmBxB,OAFAF,EAAWG,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE7I,MAAQ8I,EAAE9I,SAE/ByI,I,iCAIP,OAA6B,IAAzB,YAAAvH,KAAA,MAAc+D,OACP,YAAA/D,KAAP,MAEG,YAAAA,KAAA,MAAc,YAAAA,KAAA,MAAc+D,OAAS,GAAGD,S,wCAI/C,OAAO,YAAA9D,KAAP,Q,mCAIA,OAAO,YAAAA,KAAP,Q,kCAGQ6H,GACR,YAAA7H,KAAA,MAAgB,YAAAA,KAAA,MAAcwD,MAAM,EAAGqE,GACvC7H,KAAKsF,uB,uCAGQ1G,GACb,GAAyB,IAArBoB,KAAK2C,KAAKoB,SACV,YAAA/D,KAAA,MAAckF,QAAO,SAACC,EAAMC,GAAP,OAAgBD,GAA2B,YAAlBC,EAAKxB,UAA0BwB,EAAKvB,OAASjF,KAAO,GAAtG,CAGA,IAAIkJ,EACJ,GAA6B,IAAzB,YAAA9H,KAAA,MAAc+D,OAEd+D,EADmB,YAAA9H,KAAA,MAAc,YAAAA,KAAA,MAAc+D,OAAS,GAAGJ,MACnCD,QAAO,SAACkB,GAAD,OAAOA,EAAE7E,MAAM0F,SAAS7G,WAEvDkJ,EAAa9H,KAAK2C,KAAKe,QAAO,SAAAkB,GAAC,OAAIA,EAAE7E,MAAM0F,SAAS7G,MAGxD,YAAAoB,KAAA,MAAcgH,KAAK,CACfpD,SAAU,UACVC,KAAMjF,EACN+E,MAAOmE,EACPhE,OAAQgE,EACH5C,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,EAAKtB,SAAQ,KAGpD9D,KAAKsF,wB,wCAGS1B,EAAkB9E,GAChC,GAAyB,IAArBkB,KAAK2C,KAAKoB,OAAd,CAEA,IAAIgE,EACJ,GAA6B,IAAzB,YAAA/H,KAAA,MAAc+D,OAGdgE,EAFmB,YAAA/H,KAAA,MAAc,YAAAA,KAAA,MAAc+D,OAAS,GAAGJ,MAEpCD,QAAO,SAACkB,GAAD,OAAQA,EAAEhB,KAAc9E,UAGtDiJ,EAAY/H,KAAK2C,KAAKe,QAAO,SAAAkB,GAAC,OAAKA,EAAEhB,KAAc9E,KAGvD,YAAAkB,KAAA,MAAcgH,KAAK,CACfpD,SAAUA,EACVC,KAAM/E,EACN6E,MAAOoE,EACPjE,OAAQiE,EAAU7C,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,EAAKtB,SAAQ,KAGjE9D,KAAKsF,wB,sCAGO0C,EAAaC,GACzB,GAAyB,IAArBjI,KAAK2C,KAAKoB,OAAd,CAEA,IAAIgE,EACJ,GAA6B,IAAzB,YAAA/H,KAAA,MAAc+D,OAC2C,WAArD,YAAA/D,KAAA,MAAc,YAAAA,KAAA,MAAc+D,OAAS,GAAGH,WACxC,YAAA5D,KAAA,MAAgB,YAAAA,KAAA,MAAcwD,MAAM,GAAI,IAG5CuE,EADmB,YAAA/H,KAAA,MAAc,YAAAA,KAAA,MAAc+D,OAAS,GAAGJ,MAEtDD,QAAO,SAACkB,GAAD,OAAQoD,GAAOpD,EAAEd,QAAUc,EAAEd,QAAUmE,UAEnDF,EAAY/H,KAAK2C,KACZe,QAAO,SAACkB,GAAD,OAAQoD,GAAOpD,EAAEd,QAAUc,EAAEd,QAAUmE,KAGvD,YAAAjI,KAAA,MAAcgH,KAAK,CACfpD,SAAU,SACVC,KAAMxF,EAAS2J,GAAO,IAAM3J,EAAS4J,GACrCtE,MAAOoE,EACPjE,OAAQiE,EACH7C,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,EAAKtB,SAAQ,KAGpD9D,KAAKsF,yB,oCAjMmBrB,GACP,MAAbA,EAAM,KAAYA,EAAQA,EAAMT,MAAM,IAC1C,IAAM0E,EAAMjE,EAAM/F,MAAM,KAAKwF,QAAO,SAACkB,GAAD,OAAOA,EAAEuD,WAAW,SACxD,OAAmB,IAAfD,EAAInE,OAAqB,OACtBmE,EAAI,GAAGrC,OAAO,O,iGC3DRuC,E,uKAEb,IAAIC,EAAS,IAAIrE,EAAWhE,KAAKvB,MAAMyF,SACvC,OACI,kBAACoE,EAAA,EAAD,CAAO3K,QAAQ,WAAW4K,UAAU,MAAMnI,MAAO,CAACoI,OAAQ,UACtD,kBAAC,EAAD,CAAcpI,MAAO,CAACoI,OAAQ,IAAKvI,WAAYoI,IAC/C,kBAAC,EAAD,CAAWjI,MAAO,CAACqI,OAAQ,QAASxI,WAAYoI,IAChD,kBAAC,EAAD,CAAapI,WAAYoI,S,GAPAK,IAAM1H,WCEhC2H,MATf,WACI,OACI,6BACI,kBAACzL,EAAD,MACA,kBAAC,EAAD,CAAagH,QAASG,OAAOC,SAAS3C,WCG9BiH,QACW,cAA7BvE,OAAOC,SAASuE,UAEe,UAA7BxE,OAAOC,SAASuE,UAEhBxE,OAAOC,SAASuE,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMC,c","file":"static/js/main.89c5088b.chunk.js","sourcesContent":["import {AppBar, IconButton, Toolbar, Typography} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport React from \"react\";\n\nexport default function TopBar() {\n    return (\n        <AppBar position=\"sticky\">\n            <Toolbar>\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                    <MenuIcon/>\n                </IconButton>\n                <Typography variant=\"h6\">\n                    USAC Budget/Spendings 2018-2019\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    )\n}","export function commaFormat(x: number) : string {\n    if (Number.isNaN(x)) return \"\"\n    let x_str: string = x.toFixed(2)\n    let parts: string[] = x_str.split(\".\")\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n    return parts.join(\".\");\n}\n\nexport function KMFormat(x: number) : string {\n    if (Number.isNaN(x)) return \"\"\n    let suffix = \"\";\n    if (x >= 1000000) {\n        suffix = \"M\"\n        x /= 1000000;\n    } else if (x >= 1000) {\n        suffix = \"K\"\n        x /= 1000;\n    }\n    return x.toPrecision(3) + suffix;\n}\n\nexport function KMFToNum(str: string) : number {\n    let unit = 1\n    if (str.includes('K')) {\n        unit = 1000\n        str = str.replace('K', '')\n    }\n    if (str.includes('M')) {\n        unit = 1000000\n        str = str.replace('M', '')\n    }\n    if (str.includes('B')) {\n        str = str.replace('B', '')\n        unit = 1000000000\n    }\n    return Number.parseFloat(str) * unit\n}","/**\n * Created by TylerLiu on 2020/04/23.\n */\nimport 'd3-transition';\nimport { select } from 'd3-selection';\nimport React, { Component } from 'react';\nimport ReactWordcloud, {Callbacks, OptionsProp, Word} from \"react-wordcloud\";\nimport {KMFormat} from \"./util\";\nimport {DataloaderProps} from \"./Dataloader\";\n\nexport default class WordCloud extends Component<DataloaderProps>{\n    private callbacks: Callbacks = {\n        getWordTooltip: (word: Word) =>`${word.text} has $${KMFormat(word.value)} in the category.`,\n        onWordClick: this.getCallback('onWordClick').bind(this),\n        onWordMouseOut: this.getCallback('onWordMouseOut').bind(this),\n        onWordMouseOver: this.getCallback('onWordMouseOver').bind(this),\n    };\n\n    private options: OptionsProp = {\n        fontFamily: 'impact',\n        fontSizes: [5, 60],\n        fontStyle: 'normal',\n        fontWeight: 'normal',\n        scale: 'log',\n        //spiral: 'archimedean',\n        deterministic: true,\n\n        rotations: 4,\n        rotationAngles: [-45, 90],\n\n        transitionDuration: 200,\n    }\n\n    constructor(props: DataloaderProps) {\n        super(props)\n\n        this.state = {\n            words : [{text: 'Loading...', value: 100}]\n        }\n    }\n\n     componentDidMount() {\n         this.props.dataloader.addChangeCallback(this.setWords.bind(this))\n     }\n\n    render() {\n        return(\n            <div style={this.props.style}>\n                <ReactWordcloud callbacks={this.callbacks} words={this.props.dataloader.getWordList()} options={this.options}/>\n            </div>\n        )\n    }\n\n    getCallback(callback: string) {\n        return (word: Word, event: MouseEvent | undefined) => {\n            const isActive = callback !== 'onWordMouseOut';\n            // @ts-ignore\n            const text = select(event.target);\n            text\n                .on('click', (() => {\n                    if (isActive) {\n                        this.props.dataloader.addkeywordFilter(word.text);\n                    }\n                }))\n                .transition()\n                .attr('background', 'white')\n                .attr('text-decoration', isActive ? 'underline' : 'none');\n        };\n    }\n\n    setWords() {\n        this.forceUpdate()\n    }\n}","/**\n * Created by TylerLiu on 2018/12/23.\n */\nimport React, {Component} from 'react';\nimport {commaFormat} from \"./util\";\nimport MaterialTable, {Column, Icons, Options} from \"material-table\";\nimport {DataloaderProps} from \"./Dataloader\";\nimport {SaveAlt, ArrowDownward, FirstPage, LastPage, ChevronRight, ChevronLeft} from \"@material-ui/icons\"\n\n//TODO virtualize\n\nexport default class RecordTable extends Component<DataloaderProps>{\n\n    private columns: Column<any>[] = [\n        {title: 'Date', field: 'date', type: \"date\"},\n        {title: 'Amount', field: 'amount', type: \"currency\"},\n        {title: 'Description', field: 'description'},\n        {title: 'Department', field: 'department'},\n        {title: 'Fund', field: 'fund'},\n        {title: 'Division', field: 'division'},\n        {title: 'Event', field: 'event'},\n        {title: 'GL', field: 'gl'},\n    ]\n\n    private options: Options = {\n        showTitle: true,\n        sorting: true,\n        exportButton: true,\n        padding: \"dense\",\n        paging: true,\n        search: false,\n        draggable: false,\n        headerStyle: { position: 'sticky', top: 0 },\n        exportAllData: true,\n    }\n\n    private icons: Icons = {\n        // @ts-ignore\n        Export: SaveAlt,\n        // @ts-ignore\n        SortArrow: ArrowDownward,\n        // @ts-ignore\n        FirstPage: FirstPage,\n        // @ts-ignore\n        LastPage: LastPage,\n        // @ts-ignore\n        NextPage: ChevronRight,\n        // @ts-ignore\n        PreviousPage: ChevronLeft,\n    }\n\n     componentDidMount() {\n         this.props.dataloader.addChangeCallback(() => this.forceUpdate())\n     }\n\n    render() {\n        return(\n                <MaterialTable options={this.options} columns={this.columns} icons={this.icons}\n                               data={this.props.dataloader.getRecords()}\n                               title={\"Transactions: total $\"+commaFormat(this.props.dataloader.getTotal())}/>\n        )\n    }\n\n}","/**\n * Created by TylerLiu on 2018/12/23.\n */\nimport React, {Component} from 'react';\nimport {Breadcrumbs, Typography} from \"@material-ui/core\";\nimport Link from \"@material-ui/core/Link\";\nimport {KMFormat} from \"./util\";\nimport {DataloaderProps} from \"./Dataloader\";\n\nexport default class KeywordCrumb extends Component<DataloaderProps>{\n\n    componentDidMount() {\n        this.props.dataloader.addChangeCallback(()=>this.forceUpdate())\n    }\n\n    render() {\n        let list = this.props.dataloader.getFilters()\n        return(\n            <Breadcrumbs separator=\">\" style={this.props.style}>\n                <Link key={-1} color=\"textPrimary\" onClick={()=>this.props.dataloader.sliceFilter(0)}>Transactions(${KMFormat(this.props.dataloader.getDatasetTotal())})</Link>\n                {list.slice(0, -1).map((filter, index)=>(\n                    <Link key={index} color=\"textSecondary\" onClick={()=>this.props.dataloader.sliceFilter(index + 1)}>{filter.category}: {filter.name}(${KMFormat(filter.amount)})</Link>\n                ))}\n                {list.length > 0 ? (<Typography color=\"textPrimary\" key={list.length}>{list[list.length-1].category}: {list[list.length-1].name}(${KMFormat(list[list.length-1].amount)})</Typography>) : null}\n            </Breadcrumbs>\n        )\n    }\n}\n","import {KMFormat, KMFToNum} from \"./util\";\nimport * as Papa from 'papaparse';\n\ninterface DataEntry {\n    date: Date,\n    fund: string,\n    division: string,\n    department: string,\n    gl: string,\n    event: string,\n    description: string,\n    amount: number,\n    words: string[]\n}\n\ninterface WordEntry {\n    text: string,\n    value: number\n}\n\ninterface Filter {\n    category: string,\n    name: string,\n    index: DataEntry[],\n    amount: number,\n}\n\nexport interface DataloaderProps {\n    dataloader: Dataloader,\n    style?: Object,\n}\n\nexport default class Dataloader{\n\n    private data: DataEntry[] = []\n    #filters: Filter[] = []\n    #dataChangeCallbacks: (()=> void)[] = []\n    private query: string;\n    private dataset: string;\n    #total_amount: number = 0\n\n    constructor(query : string) {\n        this.query = query\n        this.dataset = Dataloader.parseDataset(query)\n        Papa.parse(window.location.pathname + \"/expense_summary_\"+ this.dataset +\".csv\",\n            {\n                download: true,\n                header: true,\n                complete: (results)=> {\n                    this.data = results.data.map((e) => {\n                        e.date = new Date(Number.parseFloat(e.date) * 1000)\n                        e.amount = Number.parseFloat(e.amount)\n                        e.words = e.__parsed_extra || []\n                        return e\n                    })\n\n                    this.onLoad()\n                }\n            })\n    }\n\n    private onLoad() {\n        this.#total_amount = this.data.reduce((prev, curr) => prev + curr.amount, 0)\n        this.parseQuery(this.query)\n        this.listChangeCallback()\n    }\n\n    private static parseDataset(query: string): string {\n        if (query[0] === '?') query = query.slice(1)\n        const res = query.split('&').filter((e) => e.startsWith('d='))\n        if (res.length === 0) return \"2018\"\n        return res[0].substr(2)\n    }\n\n    private parseQuery(query: string) {\n        if (query[0] === '?') query = query.slice(1)\n        const callbacks = this.#dataChangeCallbacks\n        this.#dataChangeCallbacks = []\n        try {\n            query.split('&').forEach(entry => {\n                if (!entry.includes('=')) return\n                const sign_location = entry.indexOf('=')\n                const q = entry.substr(0, sign_location)\n                const v = entry.substr(sign_location + 1)\n                switch (q) {\n                    case 'keyword':\n                        this.addkeywordFilter(v)\n                        break\n                    case 'fund':\n                    case 'division':\n                    case 'department':\n                    case 'gl':\n                    case 'event':\n                        this.addCategoryFilter(q, btoa(v))\n                        break\n                    case 'amount':\n                        if (!v.includes('..')) return\n                        const values = v.split('..').map(e => KMFToNum(e))\n                        this.addAmountFilter(values[0], values[1])\n                        break\n                }\n            })\n        } catch (e) {\n            console.log(e)\n        }\n        this.#dataChangeCallbacks = callbacks\n    }\n\n    setQueryString(){\n        const string = \"d=\" + this.dataset +\n            this.#filters.reduce((prev, curr) => {\n                switch (curr.category) {\n                    case 'keyword':\n                        return prev + '&keyword=' + curr.name\n                    case 'amount':\n                        return prev + '&amount=' + curr.name.replace('~', '..')\n                    default:\n                        return prev + '&' + curr.category + '=' + atob(curr.name)\n                }\n            }, \"\")\n        let path = window.location.href\n        if (path.includes('?')) path = path.substr(0, path.indexOf('?'))\n        window.history.pushState({path: path + '?' + string},'',path + '?' + string);\n    }\n\n    listChangeCallback() {\n        this.#dataChangeCallbacks.forEach(c => c())\n        this.setQueryString()\n    }\n\n    addChangeCallback(callback: () => void) {\n        this.#dataChangeCallbacks.push(callback)\n    }\n\n    getRecords(): DataEntry[] {\n        if (this.data.length === 0) {\n            return [];\n        }\n\n        if (this.#filters.length === 0) {\n            return this.data\n        }\n\n        const indexes = this.#filters[this.#filters.length - 1].index\n        return indexes\n    }\n\n    getWordList() : WordEntry[] {\n        if (this.data.length === 0) {\n            return [];\n        }\n\n        let words_set = new Map<string, number>()\n        this.getRecords().forEach(row => {\n            row.words.forEach(w => {\n                words_set.set(w, (words_set.get(w) || 0) + row.amount);\n            })\n        })\n\n        let words_list: WordEntry[] = []\n        for (let [word, val] of words_set.entries()) {\n            words_list.push({text: word, value: val})\n        }\n\n        words_list.sort((a, b) => a.value - b.value)\n\n        return words_list\n    }\n\n    getTotal(): number {\n        if (this.#filters.length === 0) {\n            return this.#total_amount\n        }\n        return this.#filters[this.#filters.length - 1].amount\n    }\n\n    getDatasetTotal(): number {\n        return this.#total_amount\n    }\n\n    getFilters(){\n        return this.#filters\n    }\n\n    sliceFilter(remaining_length: number) {\n        this.#filters = this.#filters.slice(0, remaining_length)\n        this.listChangeCallback()\n    }\n\n    addkeywordFilter(word: string) {\n        if (this.data.length === 0) return\n        if (this.#filters.reduce((prev, curr) => prev || (curr.category === 'keyword' && curr.name === word), false))\n            return\n\n        let word_index: DataEntry[]\n        if (this.#filters.length !== 0) {\n            const last_index = this.#filters[this.#filters.length - 1].index\n            word_index = last_index.filter((e) => e.words.includes(word))\n        } else {\n            word_index = this.data.filter(e => e.words.includes(word))\n        }\n\n        this.#filters.push({\n            category: 'keyword',\n            name: word,\n            index: word_index,\n            amount: word_index\n                .reduce((prev, curr) => prev + curr.amount, 0)\n        })\n\n        this.listChangeCallback()\n    }\n\n    addCategoryFilter(category: string, value: string) {\n        if (this.data.length === 0) return\n\n        let new_index: DataEntry[]\n        if (this.#filters.length !== 0) {\n            const last_index = this.#filters[this.#filters.length - 1].index\n            // @ts-ignore\n            new_index = last_index.filter((e) => (e[category] === value))\n        } else {\n            // @ts-ignore\n            new_index = this.data.filter(e => (e[category] === value))\n        }\n\n        this.#filters.push({\n            category: category,\n            name: value,\n            index: new_index,\n            amount: new_index.reduce((prev, curr) => prev + curr.amount, 0)\n        })\n\n        this.listChangeCallback()\n    }\n\n    addAmountFilter(low: number, high: number) {\n        if (this.data.length === 0) return\n\n        let new_index: DataEntry[]\n        if (this.#filters.length !== 0) {\n            if (this.#filters[this.#filters.length - 1].category === 'amount') {\n                this.#filters = this.#filters.slice(0, -1)\n            }\n            const last_index = this.#filters[this.#filters.length - 1].index\n            new_index = last_index\n                .filter((e) => (low <= e.amount && e.amount <= high))\n        } else {\n            new_index = this.data\n                .filter((e) => (low <= e.amount && e.amount <= high))\n        }\n\n        this.#filters.push({\n            category: 'amount',\n            name: KMFormat(low) + \"~\" + KMFormat(high),\n            index: new_index,\n            amount: new_index\n                .reduce((prev, curr) => prev + curr.amount, 0)\n        })\n\n        this.listChangeCallback()\n    }\n}","import React from 'react';\nimport './App.css';\nimport WordCloud from \"./WordCloud\";\nimport RecordTable from \"./RecordTable\";\nimport KeywordCrumb from \"./KeywordCrumb\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Dataloader from \"./Dataloader\";\n\ninterface DatasetProp{\n    dataset: string\n}\n\nexport default class DatasetView extends React.Component<DatasetProp> {\n    render() {\n        let loader = new Dataloader(this.props.dataset)\n        return (\n            <Paper variant=\"outlined\" className=\"App\" style={{margin: '0 10%'}}>\n                <KeywordCrumb style={{margin: 10}} dataloader={loader}/>\n                <WordCloud style={{height: '80vh'}} dataloader={loader}/>\n                <RecordTable dataloader={loader}/>\n            </Paper>\n        );\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport TopBar from \"./TopBar\";\nimport DatasetView from \"./DatasetView\"\n\nfunction App() {\n    return (\n        <div>\n            <TopBar/>\n            <DatasetView dataset={window.location.search}/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
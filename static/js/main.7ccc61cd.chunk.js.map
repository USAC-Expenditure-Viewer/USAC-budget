{"version":3,"sources":["models/QueryBuilder.ts","util.ts","models/DataLoader.ts","models/Datasets.ts","components/TopBar.tsx","components/WordCloud.tsx","components/RecordTable.tsx","components/KeywordCrumb.tsx","components/CategoryPie.tsx","components/AmountSlider.tsx","components/DateSlider.tsx","components/DatasetView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["QueryBuilder","queryString","generators","Map","this","window","location","search","replace","instance","callback","index","set","query","values","map","c","join","path","href","includes","substr","indexOf","history","pushState","commaFormat","x","Number","isNaN","parts","toFixed","split","KMFormat","suffix","Math","abs","toPrecision","KMFToNum","str","unit","parseFloat","DataLoader","dataset","data","filters","dataChangeCallbacks","total_amount","setDataset","sliceFilter","loadDataset","Papa","pathname","download","header","complete","results","e","date","Date","amount","words","__parsed_extra","filter","onLoad","reduce","prev","curr","parseQuery","getInstance","getQuery","addGenerator","generateQueryString","bind","listChangeCallback","slice","callbacks","forEach","entry","sign_location","q","v","addKeywordFilter","addCategoryFilter","atob","valuesa","addAmountFilter","valuesd","addMonthFilter","console","log","category","name","btoa","update","push","length","words_set","getRecords","row","w","get","chosen_words","words_list","entries","word","val","text","value","sort","a","b","category_set","cate_name","category_list","numBin","domain","records","previousValue","currentValue","min","max","MAX_VALUE","MIN_VALUE","allMin","allMax","bins","bin_size","i","low","high","month_string","getFullYear","padStart","getMonth","localeCompare","month_num","s","parseInt","next_month","remaining_length","word_index","new_index","Datasets","datasets","currentDataset","dataLoader","ready","parseDataset","getQueryString","fetch","then","res","json","getDatasetTitle","startsWith","match","toString","TopBar","props","state","drawer","addChangeCallback","forceUpdate","toggleDrawer","setState","dataset_list","getDatasets","AppBar","position","Toolbar","IconButton","edge","color","aria-label","onClick","Typography","variant","style","flexGrow","getCurrentDatasetName","Drawer","anchor","open","onClose","List","ListItem","button","key","setCurrentDataset","ListItemIcon","ListItemText","primary","React","Component","WordCloud","getWordTooltip","onWordClick","getCallback","onWordMouseOut","onWordMouseOver","options","fontFamily","fontSizes","fontStyle","fontWeight","scale","deterministic","rotations","rotationAngles","transitionDuration","dataloader","setWords","height","hidden","getWordList","event","isActive","select","target","on","transition","attr","RecordTable","columns","title","field","type","showTitle","sorting","exportButton","padding","paging","draggable","headerStyle","top","exportAllData","icons","Export","SaveAlt","SortArrow","ArrowDownward","FirstPage","LastPage","NextPage","ChevronRight","PreviousPage","ChevronLeft","getTotal","KeywordCrumb","list","getFilters","Breadcrumbs","separator","Link","getDatasetTotal","CategoryPie","getCategories","width","dataKey","nameKey","fill","getColor","label","percent","labelLine","formatter","contentStyle","margin","borderRadius","AmountSlider","updateState","getAmountBins","paddingLeft","paddingRight","getYAxisWidth","barCategoryGap","bottom","left","right","strokeDasharray","hide","orientation","tickFormatter","angle","textAnchor","y","stroke","opacity","getOpacity","Slider","onChange","onRangeChange","onChangeCommitted","onRangeChangeCommitted","valueLabelDisplay","valueLabelFormat","marks","getMarks","newValues","nVal","min_diff","getViewportWidth","getMarkPoint","step_size","document","documentElement","clientWidth","innerWidth","month_name","DateSlider","getMonthBins","names","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","getLeftPoint","getRightPoint","display","fillOpacity","step","round","years","Set","d","has","add","DatasetView","generateQuery","loader","Paper","Tabs","indicatorColor","textColor","Tab","App","getDataLoader","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7ccc61cd.chunk.js","sourcesContent":["export default class QueryBuilder {\n\n    private static instance: QueryBuilder | null = null\n    private queryString: string\n    private generators: Map<number, () => string> = new Map()\n\n    static getInstance() {\n        if (this.instance === null) this.instance = new QueryBuilder()\n        return this.instance\n    }\n\n\n    private constructor() {\n        this.queryString = window.location.search.replace('?', '')\n    }\n\n    getQuery() {\n        return this.queryString\n    }\n\n    addGenerator(callback: () => string, index: number) {\n        this.generators.set(index, callback)\n    }\n\n    update() {\n        let strings: string[] = [...this.generators.values()].map((c) => c())\n        const query = strings.join('&')\n\n        let path = window.location.href\n        if (path.includes('?')) path = path.substr(0, path.indexOf('?'))\n        window.history.pushState({path: path + '?' + query}, '', path + '?' + query);\n    }\n}\n","export function commaFormat(x: number): string {\n    if (Number.isNaN(x)) return \"\"\n    let x_str: string = x.toFixed(2)\n    let parts: string[] = x_str.split(\".\")\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n    return parts.join(\".\");\n}\n\nexport function KMFormat(x: number): string {\n    if (Number.isNaN(x)) return \"\"\n    let suffix = \"\";\n    if (Math.abs(x) >= 1000000000) {\n        suffix = \"B\"\n        x /= 1000000000;\n    } else if (Math.abs(x) >= 1000000) {\n        suffix = \"M\"\n        x /= 1000000;\n    } else if (Math.abs(x) >= 1000) {\n        suffix = \"K\"\n        x /= 1000;\n    }\n    return x.toPrecision(3) + suffix;\n}\n\nexport function KMFToNum(str: string): number {\n    let unit = 1\n    if (str.includes('K')) {\n        unit = 1000\n        str = str.replace('K', '')\n    }\n    if (str.includes('M')) {\n        unit = 1000000\n        str = str.replace('M', '')\n    }\n    if (str.includes('B')) {\n        str = str.replace('B', '')\n        unit = 1000000000\n    }\n    return Number.parseFloat(str) * unit\n}\n","import {KMFormat, KMFToNum} from \"../util\";\nimport * as Papa from 'papaparse';\nimport QueryBuilder from \"./QueryBuilder\";\n\ninterface DataEntry {\n    date: Date,\n    fund: string,\n    division: string,\n    department: string,\n    gl: string,\n    event: string,\n    description: string,\n    amount: number,\n    words: string[]\n}\n\nexport interface AmountBin {\n    low: number\n    high: number\n    value: number\n    name: string\n}\n\nexport type Category = 'fund' | 'division' | 'department' | 'gl' | 'event'\n\nexport interface WordEntry {\n    text: string,\n    value: number\n}\n\ninterface Filter {\n    category: string,\n    name: string,\n    index: DataEntry[],\n    amount: number,\n}\n\nexport interface DataLoaderProps {\n    dataloader: DataLoader,\n    style?: Object,\n}\n\nexport default class DataLoader {\n\n    private data: DataEntry[] = []\n    private filters: Filter[] = []\n    private dataChangeCallbacks: (() => void)[] = []\n    private total_amount: number = 0\n\n    constructor(dataset: string | null) {\n        this.setDataset(dataset)\n    }\n\n    setDataset(dataset: string | null) {\n        this.sliceFilter(0)\n        this.loadDataset(dataset)\n    }\n\n    private loadDataset(dataset: string | null) {\n        if (dataset === null) return\n        Papa.parse(window.location.pathname + \"/expense_summary_\" + dataset + \".csv\",\n            {\n                download: true,\n                header: true,\n                complete: (results) => {\n                    this.data = results.data.map((e) => {\n                        e.date = new Date(Number.parseFloat(e.date) * 1000)\n                        e.amount = Number.parseFloat(e.amount)\n                        e.words = e.__parsed_extra || []\n                        return e\n                    }).filter(e => !Number.isNaN(e.amount))\n\n                    this.onLoad()\n                }\n            })\n    }\n\n    private onLoad() {\n        this.total_amount = this.data.reduce((prev, curr) => prev + curr.amount, 0)\n        this.parseQuery(QueryBuilder.getInstance().getQuery())\n        QueryBuilder.getInstance().addGenerator(this.generateQueryString.bind(this), 2)\n        this.listChangeCallback()\n    }\n\n    private parseQuery(query: string) {\n        if (query[0] === '?') query = query.slice(1)\n        const callbacks = this.dataChangeCallbacks\n        this.dataChangeCallbacks = []\n        try {\n            query.split('&').forEach(entry => {\n                if (!entry.includes('=')) return\n                const sign_location = entry.indexOf('=')\n                const q = entry.substr(0, sign_location)\n                const v = entry.substr(sign_location + 1)\n                switch (q) {\n                    case 'keyword':\n                        this.addKeywordFilter(v)\n                        break\n                    case 'fund':\n                    case 'division':\n                    case 'department':\n                    case 'gl':\n                    case 'event':\n                        this.addCategoryFilter(q, atob(v))\n                        break\n                    case 'amount':\n                        if (!v.includes('..')) return\n                        const valuesa = v.split('..').map(e => KMFToNum(e))\n                        this.addAmountFilter(valuesa[0], valuesa[1])\n                        break\n                    case 'date':\n                        if (!v.includes('..')) return\n                        const valuesd = v.split('..')\n                        this.addMonthFilter(valuesd[0], valuesd[1])\n                        break\n                }\n            })\n        } catch (e) {\n            console.log(e)\n        }\n        this.dataChangeCallbacks = callbacks\n    }\n\n    private generateQueryString() {\n        const strings = this.filters.map((curr) => {\n            switch (curr.category) {\n                case 'keyword':\n                    return 'keyword=' + curr.name\n                case 'amount':\n                    return 'amount=' + curr.name.replace('~', '..')\n                case 'date':\n                    return 'date=' + curr.name.replace('~', '..')\n                default:\n                    return curr.category + '=' + btoa(curr.name)\n            }\n        })\n        return strings.join('&')\n    }\n\n    private listChangeCallback() {\n        this.dataChangeCallbacks.forEach(c => c())\n        QueryBuilder.getInstance().update()\n    }\n\n    addChangeCallback(callback: () => void) {\n        this.dataChangeCallbacks.push(callback)\n    }\n\n    getRecords(): DataEntry[] {\n        if (this.data.length === 0) {\n            return [];\n        }\n\n        if (this.filters.length === 0) {\n            return this.data\n        }\n\n        return this.filters[this.filters.length - 1].index\n    }\n\n    getWordList(): WordEntry[] {\n        if (this.data.length === 0) {\n            return [];\n        }\n\n        let words_set = new Map<string, number>()\n        this.getRecords().forEach(row => {\n            row.words.forEach(w => {\n                words_set.set(w, (words_set.get(w) || 0) + row.amount);\n            })\n        })\n\n        const chosen_words = this.filters.filter(e => e.category === 'keyword').map(e => e.name)\n\n        let words_list: WordEntry[] = []\n        for (let [word, val] of words_set.entries()) {\n            if (!chosen_words.includes(word))\n                words_list.push({text: word, value: val})\n        }\n\n        words_list.sort((a, b) => a.value - b.value)\n\n        return words_list\n    }\n\n    getCategories(category: Category): WordEntry[] {\n        if (this.data.length === 0) {\n            return [];\n        }\n\n        let category_set = new Map<string, number>()\n        this.getRecords().forEach(row => {\n            const cate_name = row[category]\n            category_set.set(cate_name, (category_set.get(cate_name) || 0) + row.amount);\n        })\n\n        let category_list: WordEntry[] = []\n        for (let [word, val] of category_set.entries()) {\n            category_list.push({text: word, value: val})\n        }\n\n        category_list.sort((a, b) => a.value - b.value)\n\n        return category_list\n    }\n\n    getAmountBins(numBin: number): { data: AmountBin[], domain: [number, number] } {\n        if (this.data.length === 0) {\n            return {data: [], domain: [0, 1]}\n        }\n\n        let records: DataEntry[];\n        let domain: [number, number] | null = null;\n        if (this.filters.length !== 0 && this.filters[this.filters.length - 1].category === 'amount') {\n            records = this.filters.length >= 2 ? this.filters[this.filters.length - 2].index : this.data\n            const values = this.filters[this.filters.length - 1].name.split('~').map(e => KMFToNum(e))\n            domain = values as [number, number]\n        } else {\n            records = this.getRecords()\n        }\n        let [allMin, allMax] = records.reduce(((previousValue, currentValue) =>\n            [Math.min(previousValue[0], currentValue.amount),\n                Math.max(previousValue[1], currentValue.amount)]), [Number.MAX_VALUE, Number.MIN_VALUE])\n\n        if (domain === null) domain = [allMin, allMax]\n        allMax += 0.001\n\n        let bins: AmountBin[] = []\n        let bin_size = (allMax - allMin) / numBin\n        for (let i = 0; i < numBin; i++) {\n            bins.push({\n                low: allMin + i * bin_size, high: allMin + (i + 1) * bin_size,\n                value: 0, name: KMFormat(allMin + (i + 0.5) * bin_size)\n            })\n        }\n\n        records.forEach((e) => {\n            bins.forEach((b) => {\n                if (b.low <= e.amount && e.amount < b.high)\n                    b.value += e.amount\n            })\n        })\n\n        return {data: bins, domain: domain}\n    }\n\n    getMonthBins(): { data: WordEntry[], domain: [string, string] } {\n        if (this.data.length === 0) {\n            return {data: [{text: '0000-01', value: 0}], domain: ['0000-01', '0000-01']}\n        }\n\n        let records: DataEntry[];\n        let domain: [string, string] | null = null;\n        if (this.filters.length !== 0 && this.filters[this.filters.length - 1].category === 'date') {\n            records = this.filters.length >= 2 ? this.filters[this.filters.length - 2].index : this.data\n            const values = this.filters[this.filters.length - 1].name.split('~')\n            domain = values as [string, string]\n        } else {\n            records = this.getRecords()\n        }\n        let [allMin, allMax] = records.reduce((previousValue, currentValue) => {\n            const month_string = (currentValue.date.getFullYear() + \"\").padStart(4, '0') + '-' + ((currentValue.date.getMonth() + 1) + \"\").padStart(2, \"0\")\n            return [previousValue[0].localeCompare(month_string) < 0 ? previousValue[0] : month_string,\n                previousValue[1].localeCompare(month_string) > 0 ? previousValue[1] : month_string]\n        }, ['9999-99', '0000-00'])\n\n        if (domain === null) domain = [allMin, allMax]\n        console.log(domain)\n\n        let bins: Map<string, number> = new Map()\n        records.forEach((e) => {\n            const month_string = (e.date.getFullYear() + \"\").padStart(4, \"0\") + '-' + ((e.date.getMonth() + 1) + \"\").padStart(2, \"0\")\n            bins.set(month_string, (bins.get(month_string) || 0) + e.amount)\n        })\n\n        let data: WordEntry[] = [...bins.entries()].map((e) => ({text: e[0], value: e[1]}))\n            .sort((a, b) => (a.text.localeCompare(b.text)))\n\n        while (data.length !== 0 && data.length < 12) {\n            let month_num = data[data.length - 1].text.split('-').map((s) => Number.parseInt(s))\n            if (month_num[1] !== 12) month_num[1]++\n            else month_num = [month_num[0] + 1, 1]\n            let next_month = (month_num[0] + \"\").padStart(4, \"0\") + '-' + (month_num[1] + \"\").padStart(2, \"0\")\n            data.push({text: next_month, value: 0})\n        }\n\n        return {data: data, domain: domain}\n    }\n\n    getTotal(): number {\n        if (this.filters.length === 0) {\n            return this.total_amount\n        }\n        return this.filters[this.filters.length - 1].amount\n    }\n\n    getDatasetTotal(): number {\n        return this.total_amount\n    }\n\n    getFilters() {\n        return this.filters\n    }\n\n    sliceFilter(remaining_length: number) {\n        this.filters = this.filters.slice(0, remaining_length)\n        this.listChangeCallback()\n    }\n\n    addKeywordFilter(word: string) {\n        if (this.data.length === 0) return\n        if (this.filters.reduce((prev, curr) => prev || (curr.category === 'keyword' && curr.name === word), false))\n            return\n\n        let word_index: DataEntry[]\n        if (this.filters.length !== 0) {\n            const last_index = this.filters[this.filters.length - 1].index\n            word_index = last_index.filter((e) => e.words.includes(word))\n        } else {\n            word_index = this.data.filter(e => e.words.includes(word))\n        }\n\n        this.filters.push({\n            category: 'keyword',\n            name: word,\n            index: word_index,\n            amount: word_index\n                .reduce((prev, curr) => prev + curr.amount, 0)\n        })\n\n        this.listChangeCallback()\n    }\n\n    addCategoryFilter(category: Category, value: string) {\n        if (this.data.length === 0) return\n        if (this.filters.reduce((prev, curr) => prev || (curr.category === category && curr.name === value), false))\n            return\n\n        let new_index: DataEntry[]\n        if (this.filters.length !== 0) {\n            const last_index = this.filters[this.filters.length - 1].index\n            // @ts-ignore\n            new_index = last_index.filter((e) => (e[category] === value))\n        } else {\n            // @ts-ignore\n            new_index = this.data.filter(e => (e[category] === value))\n        }\n\n        this.filters.push({\n            category: category,\n            name: value,\n            index: new_index,\n            amount: new_index.reduce((prev, curr) => prev + curr.amount, 0)\n        })\n\n        this.listChangeCallback()\n    }\n\n    addAmountFilter(low: number, high: number) {\n        if (this.data.length === 0) return\n\n        if (this.filters.length > 0 && this.filters[this.filters.length - 1].category === 'amount') {\n            this.filters = this.filters.slice(0, -1)\n        }\n        const last_index = this.filters.length > 0 ? this.filters[this.filters.length - 1].index : this.data\n        const new_index = last_index\n            .filter((e) => (low <= e.amount && e.amount <= high))\n\n        this.filters.push({\n            category: 'amount',\n            name: KMFormat(low) + \"~\" + KMFormat(high),\n            index: new_index,\n            amount: new_index\n                .reduce((prev, curr) => prev + curr.amount, 0)\n        })\n\n        this.listChangeCallback()\n    }\n\n    addMonthFilter(low: string, high: string) {\n        if (this.data.length === 0) return\n\n        if (this.filters.length > 0 && this.filters[this.filters.length - 1].category === 'date') {\n            this.filters = this.filters.slice(0, -1)\n        }\n        const last_index = this.filters.length > 0 ? this.filters[this.filters.length - 1].index : this.data\n        const new_index = last_index\n            .filter((e) => {\n                const month_string = (e.date.getFullYear() + \"\").padStart(4, '0') + '-' + ((e.date.getMonth() + 1) + \"\").padStart(2, '0')\n                return low.localeCompare(month_string) <= 0 && month_string.localeCompare(high) <= 0\n            })\n\n        this.filters.push({\n            category: 'date',\n            name: low + \"~\" + high,\n            index: new_index,\n            amount: new_index\n                .reduce((prev, curr) => prev + curr.amount, 0)\n        })\n\n        this.listChangeCallback()\n    }\n}\n","import QueryBuilder from \"./QueryBuilder\";\nimport DataLoader from \"./DataLoader\";\n\nexport default class Datasets {\n\n    private static instance: Datasets | null = null\n    private datasets: string[] = []\n    private currentDataset: string | null = null\n    private callbacks: (() => void)[] = []\n    private dataLoader: DataLoader\n    private ready: boolean = false\n\n    static getInstance() {\n        if (this.instance === null) this.instance = new Datasets()\n        return this.instance\n    }\n\n\n    private constructor() {\n        this.parseDataset(QueryBuilder.getInstance().getQuery())\n        this.dataLoader = new DataLoader(this.currentDataset)\n        QueryBuilder.getInstance().addGenerator(this.getQueryString.bind(this), 0)\n        fetch(window.location.pathname + \"/datasets.json\")\n            .then(res => res.json())\n            .then((res) => {\n                this.datasets = res\n                this.ready = true\n                if (this.currentDataset === null) this.currentDataset = this.datasets[0]\n                this.dataLoader.setDataset(this.currentDataset)\n                this.callbacks.forEach(c => c())\n            })\n    }\n\n    addChangeCallback(callback: () => void) {\n        this.callbacks.push(callback)\n    }\n\n    getCurrentDataset() {\n        if (this.currentDataset != null) return this.currentDataset\n        return undefined\n    }\n\n    getCurrentDatasetName() {\n        if (this.currentDataset != null) return Datasets.getDatasetTitle(this.currentDataset)\n        return undefined\n    }\n\n    getDatasets() {\n        if (this.ready) return this.datasets\n        return undefined\n    }\n\n    getDatasetNames() {\n        if (this.ready) return this.datasets.map(Datasets.getDatasetTitle)\n        return undefined\n    }\n\n    getDataLoader() {\n        return this.dataLoader\n    }\n\n    setCurrentDataset(name: string) {\n        this.currentDataset = name\n        QueryBuilder.getInstance().update()\n        this.dataLoader.setDataset(name)\n        this.callbacks.forEach(c => c())\n    }\n\n    private parseDataset(query: string) {\n        if (query[0] === '?') query = query.slice(1)\n        const res = query.split('&').filter((e) => e.startsWith('d='))\n        if (res.length !== 0)\n            this.currentDataset = res[0].substr(2)\n    }\n\n    private getQueryString(): string {\n        if (this.currentDataset === null) return \"\"\n        return 'd=' + this.currentDataset\n    }\n\n    static getDatasetTitle(name: string): string {\n        if (name.match(/^\\d*$/)) {\n            const year = Number.parseInt(name)\n            return name + '-' + (year + 1).toString()\n        } else return name\n    }\n}\n","import {\n    AppBar,\n    Drawer,\n    IconButton,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Toolbar,\n    Typography\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ListIcon from \"@material-ui/icons/List\"\nimport React from \"react\";\nimport Datasets from \"../models/Datasets\";\n\ninterface BarState {\n    drawer: boolean\n}\n\nexport default class TopBar extends React.Component<{}, BarState> {\n\n    constructor(props: {}) {\n        super(props);\n\n        this.state = {\n            drawer: false\n        }\n    }\n\n    componentDidMount(): void {\n        Datasets.getInstance().addChangeCallback(() => this.forceUpdate())\n    }\n\n    render() {\n        const toggleDrawer = (state: boolean) => () => this.setState({drawer: state})\n        const dataset_list: string[] = Datasets.getInstance().getDatasets() || []\n        return (\n            <AppBar position=\"sticky\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" onClick={toggleDrawer(true)}>\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography variant=\"h6\" style={{flexGrow: 1}}>\n                        {\"USAC budget spending \" + Datasets.getInstance().getCurrentDatasetName()}\n                    </Typography>\n                </Toolbar>\n                <Drawer anchor={'left'} open={this.state.drawer} onClose={toggleDrawer(false)}>\n                    <div onClick={toggleDrawer(false)}>\n                        <List>\n                            {dataset_list.map(text => (\n                                <ListItem button key={text} onClick={() => {\n                                    toggleDrawer(false)\n                                    Datasets.getInstance().setCurrentDataset(text)\n                                }}>\n                                    <ListItemIcon><ListIcon/></ListItemIcon>\n                                    <ListItemText primary={\"Budget \" + Datasets.getDatasetTitle(text)}/>\n                                </ListItem>\n                            ))}\n                        </List>\n                    </div>\n                </Drawer>\n            </AppBar>\n        )\n    }\n}\n","/**\n * Created by TylerLiu on 2020/04/23.\n */\nimport 'd3-transition';\nimport {select} from 'd3-selection';\nimport React, {Component} from 'react';\nimport ReactWordcloud, {Callbacks, OptionsProp, Word} from \"react-wordcloud\";\nimport {KMFormat} from \"../util\";\nimport {DataLoaderProps} from \"../models/DataLoader\";\n\ninterface WordCloudProps extends DataLoaderProps {\n    hidden?: boolean\n}\n\nexport default class WordCloud extends Component<WordCloudProps> {\n    private callbacks: Callbacks = {\n        getWordTooltip: (word: Word) => `${word.text} has $${KMFormat(word.value)} in the category.`,\n        onWordClick: this.getCallback('onWordClick').bind(this),\n        onWordMouseOut: this.getCallback('onWordMouseOut').bind(this),\n        onWordMouseOver: this.getCallback('onWordMouseOver').bind(this),\n    };\n\n    private options: OptionsProp = {\n        fontFamily: 'impact',\n        fontSizes: [5, 60],\n        fontStyle: 'normal',\n        fontWeight: 'normal',\n        scale: 'log',\n        //spiral: 'archimedean',\n        deterministic: true,\n\n        rotations: 4,\n        rotationAngles: [-45, 90],\n\n        transitionDuration: 200,\n    }\n\n    constructor(props: DataLoaderProps) {\n        super(props)\n\n        this.state = {\n            words: [{text: 'Loading...', value: 100}]\n        }\n    }\n\n    componentDidMount() {\n        this.props.dataloader.addChangeCallback(this.setWords.bind(this))\n    }\n\n    render() {\n        return (\n            <div style={{height: '80vh'}} hidden={this.props.hidden}>\n                {(this.props.hidden || false) ? null : (\n                    <ReactWordcloud callbacks={this.callbacks} words={this.props.dataloader.getWordList()}\n                                    options={this.options}/>\n                )}\n            </div>\n        )\n    }\n\n    getCallback(callback: string) {\n        return (word: Word, event: MouseEvent | undefined) => {\n            const isActive = callback !== 'onWordMouseOut';\n            // @ts-ignore\n            const text = select(event.target);\n            text\n                .on('click', (() => {\n                    if (isActive) {\n                        this.props.dataloader.addKeywordFilter(word.text);\n                    }\n                }))\n                .transition()\n                .attr('background', 'white')\n                .attr('text-decoration', isActive ? 'underline' : 'none');\n        };\n    }\n\n    setWords() {\n        this.forceUpdate()\n    }\n}\n","/**\n * Created by TylerLiu on 2018/12/23.\n */\nimport React, {Component} from 'react';\nimport {commaFormat} from \"../util\";\nimport MaterialTable, {Column, Icons, Options} from \"material-table\";\nimport {DataLoaderProps} from \"../models/DataLoader\";\nimport {ArrowDownward, ChevronLeft, ChevronRight, FirstPage, LastPage, SaveAlt} from \"@material-ui/icons\"\n\n//TODO virtualize\n\nexport default class RecordTable extends Component<DataLoaderProps> {\n\n    private columns: Column<any>[] = [\n        {title: 'Date', field: 'date', type: \"date\"},\n        {title: 'Amount', field: 'amount', type: \"currency\"},\n        {title: 'Description', field: 'description'},\n        {title: 'Department', field: 'department'},\n        {title: 'Fund', field: 'fund'},\n        {title: 'Division', field: 'division'},\n        {title: 'Event', field: 'event'},\n        {title: 'GL', field: 'gl'},\n    ]\n\n    private options: Options = {\n        showTitle: true,\n        sorting: true,\n        exportButton: true,\n        padding: \"dense\",\n        paging: true,\n        search: false,\n        draggable: false,\n        headerStyle: {position: 'sticky', top: 0},\n        exportAllData: true,\n    }\n\n    private icons: Icons = {\n        // @ts-ignore\n        Export: SaveAlt,\n        // @ts-ignore\n        SortArrow: ArrowDownward,\n        // @ts-ignore\n        FirstPage: FirstPage,\n        // @ts-ignore\n        LastPage: LastPage,\n        // @ts-ignore\n        NextPage: ChevronRight,\n        // @ts-ignore\n        PreviousPage: ChevronLeft,\n    }\n\n    componentDidMount() {\n        this.props.dataloader.addChangeCallback(() => {\n            this.forceUpdate()\n        })\n    }\n\n    render() {\n        return (\n            <MaterialTable options={this.options} columns={this.columns} icons={this.icons}\n                           data={this.props.dataloader.getRecords()}\n                           title={\"Displayed total $\" + commaFormat(this.props.dataloader.getTotal())}/>\n        )\n    }\n\n}\n","/**\n * Created by TylerLiu on 2018/12/23.\n */\nimport React, {Component} from 'react';\nimport {Breadcrumbs, Typography} from \"@material-ui/core\";\nimport Link from \"@material-ui/core/Link\";\nimport {KMFormat} from \"../util\";\nimport {DataLoaderProps} from \"../models/DataLoader\";\n\nexport default class KeywordCrumb extends Component<DataLoaderProps> {\n\n    componentDidMount() {\n        this.props.dataloader.addChangeCallback(() => this.forceUpdate())\n    }\n\n    render() {\n        let list = this.props.dataloader.getFilters()\n        return (\n            <Breadcrumbs separator=\">\" style={this.props.style}>\n                <Link key={-1} color=\"textPrimary\"\n                      onClick={() => this.props.dataloader.sliceFilter(0)}>Transactions(${KMFormat(this.props.dataloader.getDatasetTotal())})</Link>\n                {list.slice(0, -1).map((filter, index) => (\n                    <Link key={index} color=\"textSecondary\"\n                          onClick={() => this.props.dataloader.sliceFilter(index + 1)}>{filter.category}: {filter.name}(${KMFormat(filter.amount)})</Link>\n                ))}\n                {list.length > 0 ? (<Typography color=\"textPrimary\"\n                                                key={list.length}>{list[list.length - 1].category}: {list[list.length - 1].name}(${KMFormat(list[list.length - 1].amount)})</Typography>) : null}\n            </Breadcrumbs>\n        )\n    }\n}\n","import React, {Component} from \"react\";\nimport {Category, DataLoaderProps} from \"../models/DataLoader\";\nimport {Pie, PieChart, ResponsiveContainer, Tooltip} from 'recharts';\nimport {KMFormat} from \"../util\";\n\ninterface CategoryPieProps extends DataLoaderProps {\n    category: Category\n    hidden?: boolean\n}\n\nexport default class CategoryPie extends Component<CategoryPieProps> {\n\n    componentDidMount(): void {\n        this.props.dataloader.addChangeCallback(() => this.forceUpdate())\n    }\n\n    render(): React.ReactNode {\n        const data = this.props.dataloader.getCategories(this.props.category)\n        return (\n            <div style={{height: '80vh'}} hidden={this.props.hidden || false}>\n                {(this.props.hidden || false) ? null : (\n                    <ResponsiveContainer height=\"100%\" width=\"100%\">\n                        <PieChart>\n                            <Pie data={data} dataKey=\"value\" nameKey=\"text\" fill={this.getColor()}\n                                 label={({percent, name}) => ((percent || 0) > 0.005 ? name : \"\")}\n                                 labelLine={false}\n                                 onClick={(e) => this.props.dataloader.addCategoryFilter(this.props.category, e.text)}/>\n                            <Tooltip formatter={(value) => \"$\" + KMFormat(value as number)}\n                                     contentStyle={{padding: '0 5px', margin: 0, borderRadius: 5}}/>\n                        </PieChart>\n                    </ResponsiveContainer>\n                )}\n            </div>\n        )\n    }\n\n    getColor(): string {\n        switch (this.props.category) {\n            case \"fund\":\n                return \"#ef5350\"\n            case \"division\":\n                return \"#ab47bc\"\n            case \"department\":\n                return \"#26c6da\"\n            case \"gl\":\n                return \"#26a69a\"\n            case \"event\":\n                return \"#d4e157\"\n        }\n    }\n}\n","import React, {Component} from \"react\";\nimport {AmountBin, DataLoaderProps} from \"../models/DataLoader\";\nimport {Bar, BarChart, CartesianGrid, Cell, Label, ReferenceLine, ResponsiveContainer, XAxis, YAxis} from 'recharts';\nimport {KMFormat} from \"../util\";\nimport {Mark, Slider} from \"@material-ui/core\";\n\ninterface SliderProps extends DataLoaderProps {\n    hidden?: boolean\n}\n\ninterface SliderState {\n    value: [number, number]\n    data: AmountBin[]\n}\n\nexport default class AmountSlider extends Component<SliderProps, SliderState> {\n\n    constructor(props: SliderProps) {\n        super(props);\n        this.state = {\n            value: [0, 100],\n            data: []\n        }\n    }\n\n\n    componentDidMount(): void {\n        this.props.dataloader.addChangeCallback(() =>\n            this.updateState()\n        )\n        this.updateState()\n    }\n\n    updateState() {\n        const {data, domain} = this.props.dataloader.getAmountBins(20)\n        this.setState({\n            data: data,\n            value: domain,\n        })\n    }\n\n    render(): React.ReactNode {\n        const data = this.state.data\n        const domain: [number, number] = data.length === 0 ? [0, 1] : [data[0].low, data[data.length - 1].high]\n        return (\n            <div style={{\n                paddingLeft: '5%', paddingRight: `calc(5% + ${AmountSlider.getYAxisWidth()}px)`,\n                height: '80vh', margin: \"auto\"\n            }} hidden={this.props.hidden || false}>\n                {(this.props.hidden || false) ? null : (\n                    <ResponsiveContainer height=\"90%\" width=\"100%\">\n                        <BarChart data={data} barCategoryGap={0} margin={{bottom: 0, left: 0, right: 0}}>\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\n                            <XAxis dataKey=\"name\" domain={domain} hide orientation=\"top\"/>\n                            <YAxis domain={[0, 'dataMax']} tickFormatter={(v) => '$' + KMFormat(v)}\n                                   width={AmountSlider.getYAxisWidth()}>\n                                <Label angle={270} position=\"insideLeft\" style={{textAnchor: 'middle'}}>\n                                    Expense Sum in Transaction Amount Bin($)\n                                </Label>\n                            </YAxis>\n                            <ReferenceLine y={0} label=\"\" stroke=\"black\"/>\n                            <Bar dataKey={\"value\"} fill={this.getColor()}>\n                                {data.map((value, index) => (\n                                    <Cell key={`cell-${index}`} fill={this.getColor()}\n                                          opacity={this.getOpacity(value.low, value.high)}/>\n                                ))}\n                            </Bar>\n                        </BarChart>\n                    </ResponsiveContainer>\n                )}\n                <div style={{paddingLeft: AmountSlider.getYAxisWidth()}}>\n                    <Slider value={this.state.value}\n                            min={domain[0]} max={domain[1]}\n                            onChange={this.onRangeChange.bind(this)}\n                            onChangeCommitted={this.onRangeChangeCommitted.bind(this)}\n                            valueLabelDisplay=\"auto\"\n                            valueLabelFormat={(v) => '$' + KMFormat(v)}\n                            marks={this.getMarks(domain)}\n                    />\n                </div>\n            </div>\n        )\n    }\n\n    static getViewportWidth() {\n        return Math.max(document.documentElement.clientWidth, window.innerWidth || 0)\n    }\n\n    static getYAxisWidth() {\n        return AmountSlider.getViewportWidth() < 480 ? 0 : 72\n    }\n\n    onRangeChange(event: any, newValues: number | number[]) {\n        this.setState({value: newValues as [number, number]})\n    }\n\n    onRangeChangeCommitted(event: any, newValues: number | number[]) {\n        const nVal = newValues as [number, number]\n        this.props.dataloader.addAmountFilter(nVal[0], nVal[1])\n    }\n\n    getColor(): string {\n        return \"#29b6f6\"\n    }\n\n    getOpacity(low: number, high: number): number {\n        const proportion = Math.max(0, Math.min(this.state.value[1], high) - Math.max(this.state.value[0], low)) / (high - low)\n        return 0.3 + 0.7 * proportion\n    }\n\n    getMarkPoint(x: number): Mark {\n        return {value: x, label: '$' + KMFormat(x)}\n    }\n\n    getMarks(domain: [number, number]): Mark[] {\n        const total_width = AmountSlider.getViewportWidth() * 0.8 - AmountSlider.getYAxisWidth()\n        const min_diff = 60 / total_width * (domain[1] - domain[0])\n        let marks: Mark[] = domain.map(e => this.getMarkPoint(e))\n        if (domain[0] < 0 && domain[1] > 0) {\n            marks = marks.filter(e => Math.abs(e.value) >= min_diff)\n            marks.push(this.getMarkPoint(0))\n        }\n\n        const step_size = Math.max((domain[1] - domain[0]) / 10, min_diff)\n        for (let i = 1; domain[0] + i * step_size <= domain[1] - min_diff; i++) {\n            const val = Number.parseFloat((domain[0] + i * step_size).toPrecision(2))\n            if (Math.abs(val) < 0.9 * step_size) continue\n            marks.push(this.getMarkPoint(val))\n        }\n\n        return marks\n    }\n}\n","import React, {Component} from \"react\";\nimport {DataLoaderProps, WordEntry} from \"../models/DataLoader\";\nimport {\n    Area,\n    AreaChart,\n    CartesianGrid,\n    Label,\n    ReferenceLine,\n    ResponsiveContainer,\n    Tooltip,\n    XAxis,\n    YAxis\n} from 'recharts';\nimport {KMFormat} from \"../util\";\nimport {Mark, Slider} from \"@material-ui/core\";\n\ninterface SliderProps extends DataLoaderProps {\n    hidden?: boolean\n}\n\ninterface SliderState {\n    value: [number, number]\n    domain: [string, string]\n    data: WordEntry[]\n}\n\nconst month_name = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\nexport default class DateSlider extends Component<SliderProps, SliderState> {\n\n    constructor(props: SliderProps) {\n        super(props);\n        this.state = {\n            value: [0, 1],\n            domain: ['0000-01', '9999-12'],\n            data: []\n        }\n    }\n\n\n    componentDidMount(): void {\n        this.props.dataloader.addChangeCallback(() =>\n            this.updateState()\n        )\n        this.updateState()\n    }\n\n    updateState() {\n        const {data, domain} = this.props.dataloader.getMonthBins()\n        const names = data.map(e => e.text)\n        this.setState({\n            data: data,\n            value: [names.indexOf(domain[0]) + 0.5, names.indexOf(domain[1]) + 0.5],\n        })\n    }\n\n    render(): React.ReactNode {\n        const data = this.state.data\n        return (\n            <div style={{\n                paddingLeft: '5%', paddingRight: `calc(5% + ${DateSlider.getYAxisWidth()}px)`,\n                height: '80vh', margin: \"auto\"\n            }} hidden={this.props.hidden || false}>\n                {(this.props.hidden || false) ? null : (\n                    <ResponsiveContainer height=\"90%\" width=\"100%\">\n                        <AreaChart data={data} barCategoryGap={0} margin={{bottom: 0, left: 0, right: 0}}>\n                            <defs>\n                                <linearGradient id=\"fillGrad\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                    <stop offset=\"5%\" stopColor={this.getColor()} stopOpacity={0.9}/>\n                                    <stop offset=\"95%\" stopColor={this.getColor()} stopOpacity={0.3}/>\n                                </linearGradient>\n                                <linearGradient id=\"fillGrad2\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\">\n                                    <stop offset={this.getLeftPoint() - 0.01} stopColor={this.getColor()}\n                                          stopOpacity={0.2}/>\n                                    <stop offset={this.getLeftPoint() + 0.01} stopColor={this.getColor()}\n                                          stopOpacity={0.6}/>\n                                    <stop offset={this.getRightPoint() - 0.01} stopColor={this.getColor()}\n                                          stopOpacity={0.6}/>\n                                    <stop offset={this.getRightPoint() + 0.01} stopColor={this.getColor()}\n                                          stopOpacity={0.2}/>\n                                </linearGradient>\n                            </defs>\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\n                            <XAxis dataKey=\"text\" hide orientation=\"top\" scale=\"band\"/>\n                            <YAxis tickFormatter={(v) => '$' + KMFormat(v)} width={DateSlider.getYAxisWidth()}>\n                                <Label angle={270} position=\"insideLeft\" style={{textAnchor: 'middle'}}>\n                                    Monthly Expense($)\n                                </Label>\n                            </YAxis>\n                            <Tooltip formatter={(value) => \"$\" + KMFormat(value as number)}\n                                     contentStyle={{display: 'none'}}/>\n                            <ReferenceLine y={0} label=\"\" stroke=\"black\"/>\n                            <Area type=\"monotone\" dataKey=\"value\" stroke={this.getColor()} fillOpacity={1}\n                                  fill=\"url(#fillGrad2)\"/>\n                        </AreaChart>\n                    </ResponsiveContainer>\n                )}\n                <div style={{paddingLeft: DateSlider.getYAxisWidth()}}>\n                    <Slider value={this.state.value}\n                            min={0} max={this.state.data.length}\n                            onChange={this.onRangeChange.bind(this)}\n                            onChangeCommitted={this.onRangeChangeCommitted.bind(this)}\n                            valueLabelDisplay=\"off\"\n                            marks={this.getMarks(this.state.data)}\n                            step={null}\n                    />\n                </div>\n            </div>\n        )\n    }\n\n    static getViewportWidth() {\n        return Math.max(document.documentElement.clientWidth, window.innerWidth || 0)\n    }\n\n    static getYAxisWidth() {\n        return this.getViewportWidth() < 480 ? 0 : 72\n    }\n\n    onRangeChange(event: any, newValues: number | number[]) {\n        this.setState({value: newValues as [number, number]})\n    }\n\n    onRangeChangeCommitted(event: any, newValues: number | number[]) {\n        const nVal = (newValues as [number, number]).map(e => Math.round(e - 0.5))\n        const data = this.state.data\n        this.props.dataloader.addMonthFilter(data[nVal[0]].text, data[nVal[1]].text)\n    }\n\n    getColor(): string {\n        return \"#009688\"\n    }\n\n    getOpacity(index: number): number {\n        index += 0.5\n        return this.state.value[0] <= index && index <= this.state.value[1] ? 1 : 0.3\n    }\n\n    getLeftPoint(): number {\n        return (this.state.value[0] - 1) / (this.state.data.length - 1)\n    }\n\n    getRightPoint(): number {\n        return (this.state.value[1]) / (this.state.data.length - 1)\n    }\n\n    getMarks(data: WordEntry[]): Mark[] {\n        let marks = data.map((e, i) => ({value: i + 0.5, label: e.text}))\n        let years: Set<String> = new Set<String>();\n        marks.forEach((e, i) => {\n            const d = e.label.split('-')\n            if (years.has(d[0])) marks[i].label = month_name[Number.parseInt(d[1]) - 1]\n            else {\n                years.add(d[0])\n                marks[i].label = month_name[Number.parseInt(d[1]) - 1] + ` ${d[0]}`;\n            }\n        })\n        return marks\n    }\n}\n","import React from 'react';\nimport '../App.css';\nimport WordCloud from \"./WordCloud\";\nimport RecordTable from \"./RecordTable\";\nimport KeywordCrumb from \"./KeywordCrumb\";\nimport Paper from \"@material-ui/core/Paper\";\nimport DataLoader from \"../models/DataLoader\";\nimport CategoryPie from \"./CategoryPie\";\nimport {Tab, Tabs} from \"@material-ui/core\";\nimport AmountSlider from \"./AmountSlider\";\nimport QueryBuilder from \"../models/QueryBuilder\";\nimport DateSlider from \"./DateSlider\";\n\ninterface DatasetState {\n    value: number\n\n}\n\ninterface DatasetProps {\n    loader: DataLoader\n}\n\nexport default class DatasetView extends React.Component<DatasetProps, DatasetState> {\n    private value: number = 0\n\n    constructor(props: DatasetProps) {\n        super(props);\n\n        this.value = this.parseQuery(QueryBuilder.getInstance().getQuery())\n\n        this.state = {\n            value: this.value,\n        }\n\n        QueryBuilder.getInstance().addGenerator(this.generateQuery.bind(this), 1)\n    }\n\n    componentDidMount(): void {\n        this.props.loader.addChangeCallback(() => this.forceUpdate())\n    }\n\n    parseQuery(query: string): number {\n        if (query[0] === '?') query = query.slice(1)\n        const res = query.split('&').filter((e) => e.startsWith('tab='))\n        if (res.length === 0) return 0\n        return Number.parseInt(res[0].substr(4))\n    }\n\n    generateQuery(): string {\n        return 'tab=' + this.value\n    }\n\n    render() {\n        const loader = this.props.loader\n        return (\n            <Paper variant=\"outlined\" style={{margin: '0 10%'}}>\n                <KeywordCrumb style={{margin: 10}} dataloader={loader}/>\n                <Tabs value={this.state.value}\n                      onChange={(e, value) => {\n                          this.value = value\n                          this.setState({value: value})\n                          QueryBuilder.getInstance().update()\n                      }}\n                      variant=\"scrollable\"\n                      indicatorColor=\"primary\" textColor=\"primary\">\n                    <Tab label=\"Keywords\"/>\n                    <Tab label=\"Fund\"/>\n                    <Tab label=\"Division\"/>\n                    <Tab label=\"Department\"/>\n                    <Tab label=\"GL\"/>\n                    <Tab label=\"Event\"/>\n                    <Tab label=\"Amount\"/>\n                    <Tab label=\"Date\"/>\n                </Tabs>\n                <WordCloud hidden={this.state.value !== 0} dataloader={loader}/>\n                <CategoryPie hidden={this.state.value !== 1} category={\"fund\"} dataloader={loader}/>\n                <CategoryPie hidden={this.state.value !== 2} category={\"division\"} dataloader={loader}/>\n                <CategoryPie hidden={this.state.value !== 3} category={\"department\"} dataloader={loader}/>\n                <CategoryPie hidden={this.state.value !== 4} category={\"gl\"} dataloader={loader}/>\n                <CategoryPie hidden={this.state.value !== 5} category={\"event\"} dataloader={loader}/>\n                <AmountSlider hidden={this.state.value !== 6} dataloader={loader}/>\n                <DateSlider hidden={this.state.value !== 7} dataloader={loader}/>\n                <RecordTable dataloader={loader}/>\n            </Paper>\n        );\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport TopBar from \"./components/TopBar\";\nimport DatasetView from \"./components/DatasetView\"\nimport DataLoader from \"./models/DataLoader\";\nimport Datasets from \"./models/Datasets\";\n\ninterface AppState {\n    loader: DataLoader\n}\n\nclass App extends React.Component<{}, AppState> {\n\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            loader: Datasets.getInstance().getDataLoader()\n        }\n    }\n\n    componentDidMount(): void {\n        Datasets.getInstance().addChangeCallback(() => {\n            this.setState({\n                loader: Datasets.getInstance().getDataLoader()\n            })\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <TopBar/>\n                <DatasetView loader={this.state.loader}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
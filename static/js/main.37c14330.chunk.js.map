{"version":3,"sources":["TopBar.tsx","util.ts","WordCloud.tsx","RecordTable.tsx","KeywordCrumb.tsx","DataLoader.ts","CategoryPie.tsx","AmountSlider.tsx","DatasetView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TopBar","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","commaFormat","x","Number","isNaN","parts","toFixed","split","replace","join","KMFormat","suffix","Math","abs","toPrecision","KMFToNum","str","unit","includes","parseFloat","WordCloud","props","callbacks","getWordTooltip","word","text","value","onWordClick","getCallback","bind","onWordMouseOut","onWordMouseOver","options","fontFamily","fontSizes","fontStyle","fontWeight","scale","deterministic","rotations","rotationAngles","transitionDuration","state","words","this","dataloader","addChangeCallback","setWords","style","height","hidden","getWordList","callback","event","isActive","select","target","on","addKeywordFilter","transition","attr","forceUpdate","Component","RecordTable","columns","title","field","type","showTitle","sorting","exportButton","padding","paging","search","draggable","headerStyle","top","exportAllData","icons","Export","SaveAlt","SortArrow","ArrowDownward","FirstPage","LastPage","NextPage","ChevronRight","PreviousPage","ChevronLeft","data","getRecords","getTotal","KeywordCrumb","list","getFilters","Breadcrumbs","separator","Link","key","onClick","sliceFilter","getDatasetTotal","slice","map","filter","index","category","name","amount","length","DataLoader","query","filters","dataChangeCallbacks","dataset","total_amount","parseDataset","Papa","window","location","pathname","download","header","complete","results","e","date","Date","__parsed_extra","onLoad","reduce","prev","curr","parseQuery","listChangeCallback","forEach","entry","sign_location","indexOf","q","substr","v","addCategoryFilter","atob","values","addAmountFilter","console","log","string","btoa","path","href","history","pushState","c","setQueryString","push","words_set","Map","row","w","set","get","words_list","entries","val","sort","a","b","category_set","cate_name","category_list","numBin","domain","records","previousValue","currentValue","min","max","MAX_VALUE","MIN_VALUE","allMin","allMax","bins","bin_size","i","low","high","remaining_length","word_index","new_index","res","startsWith","CategoryPie","getCategories","width","dataKey","nameKey","fill","getColor","label","percent","labelLine","formatter","contentStyle","margin","borderRadius","AmountSlider","updateState","getAmountBins","setState","strokeDasharray","tick","axisLine","tickFormatter","y","stroke","opacity","getOpacity","Slider","onChange","onRangeChange","onChangeCommitted","onRangeChangeCommitted","valueLabelDisplay","valueLabelFormat","marks","getMarks","newValues","nVal","getMarkPoint","step_size","DatasetView","loader","Paper","Tabs","indicatorColor","textColor","centered","Tab","React","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.37c14330.chunk.js","sourcesContent":["import {AppBar, IconButton, Toolbar, Typography} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport React from \"react\";\n\nexport default function TopBar() {\n    return (\n        <AppBar position=\"sticky\">\n            <Toolbar>\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                    <MenuIcon/>\n                </IconButton>\n                <Typography variant=\"h6\">\n                    USAC Budget/Spendings 2018-2019\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    )\n}","export function commaFormat(x: number) : string {\n    if (Number.isNaN(x)) return \"\"\n    let x_str: string = x.toFixed(2)\n    let parts: string[] = x_str.split(\".\")\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n    return parts.join(\".\");\n}\n\nexport function KMFormat(x: number) : string {\n    if (Number.isNaN(x)) return \"\"\n    let suffix = \"\";\n    if (Math.abs(x) >= 1000000000) {\n        suffix = \"B\"\n        x /= 1000000000;\n    } else if (Math.abs(x) >= 1000000) {\n        suffix = \"M\"\n        x /= 1000000;\n    } else if (Math.abs(x) >= 1000) {\n        suffix = \"K\"\n        x /= 1000;\n    }\n    return x.toPrecision(3) + suffix;\n}\n\nexport function KMFToNum(str: string) : number {\n    let unit = 1\n    if (str.includes('K')) {\n        unit = 1000\n        str = str.replace('K', '')\n    }\n    if (str.includes('M')) {\n        unit = 1000000\n        str = str.replace('M', '')\n    }\n    if (str.includes('B')) {\n        str = str.replace('B', '')\n        unit = 1000000000\n    }\n    return Number.parseFloat(str) * unit\n}","/**\n * Created by TylerLiu on 2020/04/23.\n */\nimport 'd3-transition';\nimport { select } from 'd3-selection';\nimport React, { Component } from 'react';\nimport ReactWordcloud, {Callbacks, OptionsProp, Word} from \"react-wordcloud\";\nimport {KMFormat} from \"./util\";\nimport {DataLoaderProps} from \"./DataLoader\";\n\ninterface WordCloudProps extends DataLoaderProps{\n    hidden?: boolean\n}\n\nexport default class WordCloud extends Component<WordCloudProps>{\n    private callbacks: Callbacks = {\n        getWordTooltip: (word: Word) =>`${word.text} has $${KMFormat(word.value)} in the category.`,\n        onWordClick: this.getCallback('onWordClick').bind(this),\n        onWordMouseOut: this.getCallback('onWordMouseOut').bind(this),\n        onWordMouseOver: this.getCallback('onWordMouseOver').bind(this),\n    };\n\n    private options: OptionsProp = {\n        fontFamily: 'impact',\n        fontSizes: [5, 60],\n        fontStyle: 'normal',\n        fontWeight: 'normal',\n        scale: 'log',\n        //spiral: 'archimedean',\n        deterministic: true,\n\n        rotations: 4,\n        rotationAngles: [-45, 90],\n\n        transitionDuration: 200,\n    }\n\n    constructor(props: DataLoaderProps) {\n        super(props)\n\n        this.state = {\n            words : [{text: 'Loading...', value: 100}]\n        }\n    }\n\n     componentDidMount() {\n         this.props.dataloader.addChangeCallback(this.setWords.bind(this))\n     }\n\n    render() {\n        return(\n            <div style={{height: '80vh'}}  hidden={this.props.hidden}>\n                <ReactWordcloud callbacks={this.callbacks} words={this.props.dataloader.getWordList()} options={this.options}/>\n            </div>\n        )\n    }\n\n    getCallback(callback: string) {\n        return (word: Word, event: MouseEvent | undefined) => {\n            const isActive = callback !== 'onWordMouseOut';\n            // @ts-ignore\n            const text = select(event.target);\n            text\n                .on('click', (() => {\n                    if (isActive) {\n                        this.props.dataloader.addKeywordFilter(word.text);\n                    }\n                }))\n                .transition()\n                .attr('background', 'white')\n                .attr('text-decoration', isActive ? 'underline' : 'none');\n        };\n    }\n\n    setWords() {\n        this.forceUpdate()\n    }\n}","/**\n * Created by TylerLiu on 2018/12/23.\n */\nimport React, {Component} from 'react';\nimport {commaFormat} from \"./util\";\nimport MaterialTable, {Column, Icons, Options} from \"material-table\";\nimport {DataLoaderProps} from \"./DataLoader\";\nimport {SaveAlt, ArrowDownward, FirstPage, LastPage, ChevronRight, ChevronLeft} from \"@material-ui/icons\"\n\n//TODO virtualize\n\nexport default class RecordTable extends Component<DataLoaderProps>{\n\n    private columns: Column<any>[] = [\n        {title: 'Date', field: 'date', type: \"date\"},\n        {title: 'Amount', field: 'amount', type: \"currency\"},\n        {title: 'Description', field: 'description'},\n        {title: 'Department', field: 'department'},\n        {title: 'Fund', field: 'fund'},\n        {title: 'Division', field: 'division'},\n        {title: 'Event', field: 'event'},\n        {title: 'GL', field: 'gl'},\n    ]\n\n    private options: Options = {\n        showTitle: true,\n        sorting: true,\n        exportButton: true,\n        padding: \"dense\",\n        paging: true,\n        search: false,\n        draggable: false,\n        headerStyle: { position: 'sticky', top: 0 },\n        exportAllData: true,\n    }\n\n    private icons: Icons = {\n        // @ts-ignore\n        Export: SaveAlt,\n        // @ts-ignore\n        SortArrow: ArrowDownward,\n        // @ts-ignore\n        FirstPage: FirstPage,\n        // @ts-ignore\n        LastPage: LastPage,\n        // @ts-ignore\n        NextPage: ChevronRight,\n        // @ts-ignore\n        PreviousPage: ChevronLeft,\n    }\n\n     componentDidMount() {\n         this.props.dataloader.addChangeCallback(() => {\n             this.forceUpdate()\n         })\n     }\n\n    render() {\n        return(\n                <MaterialTable options={this.options} columns={this.columns} icons={this.icons}\n                               data={this.props.dataloader.getRecords()}\n                               title={\"Transactions: total $\"+commaFormat(this.props.dataloader.getTotal())}/>\n        )\n    }\n\n}","/**\n * Created by TylerLiu on 2018/12/23.\n */\nimport React, {Component} from 'react';\nimport {Breadcrumbs, Typography} from \"@material-ui/core\";\nimport Link from \"@material-ui/core/Link\";\nimport {KMFormat} from \"./util\";\nimport {DataLoaderProps} from \"./DataLoader\";\n\nexport default class KeywordCrumb extends Component<DataLoaderProps>{\n\n    componentDidMount() {\n        this.props.dataloader.addChangeCallback(()=>this.forceUpdate())\n    }\n\n    render() {\n        let list = this.props.dataloader.getFilters()\n        return(\n            <Breadcrumbs separator=\">\" style={this.props.style}>\n                <Link key={-1} color=\"textPrimary\" onClick={()=>this.props.dataloader.sliceFilter(0)}>Transactions(${KMFormat(this.props.dataloader.getDatasetTotal())})</Link>\n                {list.slice(0, -1).map((filter, index)=>(\n                    <Link key={index} color=\"textSecondary\" onClick={()=>this.props.dataloader.sliceFilter(index + 1)}>{filter.category}: {filter.name}(${KMFormat(filter.amount)})</Link>\n                ))}\n                {list.length > 0 ? (<Typography color=\"textPrimary\" key={list.length}>{list[list.length-1].category}: {list[list.length-1].name}(${KMFormat(list[list.length-1].amount)})</Typography>) : null}\n            </Breadcrumbs>\n        )\n    }\n}\n","import {KMFormat, KMFToNum} from \"./util\";\nimport * as Papa from 'papaparse';\n\ninterface DataEntry {\n    date: Date,\n    fund: string,\n    division: string,\n    department: string,\n    gl: string,\n    event: string,\n    description: string,\n    amount: number,\n    words: string[]\n}\n\nexport interface AmountBin {\n    low: number\n    high: number\n    value: number\n    name: string\n}\n\nexport type Category = 'fund'| 'division'| 'department'| 'gl'| 'event'\n\ninterface WordEntry {\n    text: string,\n    value: number\n}\n\ninterface Filter {\n    category: string,\n    name: string,\n    index: DataEntry[],\n    amount: number,\n}\n\nexport interface DataLoaderProps {\n    dataloader: DataLoader,\n    style?: Object,\n}\n\nexport default class DataLoader{\n\n    private data: DataEntry[] = []\n    private filters: Filter[] = []\n    private dataChangeCallbacks: (()=> void)[] = []\n    private readonly dataset: string;\n    private total_amount: number = 0\n\n    constructor(query : string) {\n        this.dataset = DataLoader.parseDataset(query)\n        Papa.parse(window.location.pathname + \"/expense_summary_\"+ this.dataset +\".csv\",\n            {\n                download: true,\n                header: true,\n                complete: (results)=> {\n                    this.data = results.data.map((e) => {\n                        e.date = new Date(Number.parseFloat(e.date) * 1000)\n                        e.amount = Number.parseFloat(e.amount)\n                        e.words = e.__parsed_extra || []\n                        return e\n                    })\n\n                    this.onLoad(query)\n                }\n            })\n    }\n\n    private onLoad(query: string) {\n        this.total_amount = this.data.reduce((prev, curr) => prev + curr.amount, 0)\n        this.parseQuery(query)\n        this.listChangeCallback()\n    }\n\n    private static parseDataset(query: string): string {\n        if (query[0] === '?') query = query.slice(1)\n        const res = query.split('&').filter((e) => e.startsWith('d='))\n        if (res.length === 0) return \"2018\"\n        return res[0].substr(2)\n    }\n\n    private parseQuery(query: string) {\n        if (query[0] === '?') query = query.slice(1)\n        const callbacks = this.dataChangeCallbacks\n        this.dataChangeCallbacks = []\n        try {\n            query.split('&').forEach(entry => {\n                if (!entry.includes('=')) return\n                const sign_location = entry.indexOf('=')\n                const q = entry.substr(0, sign_location)\n                const v = entry.substr(sign_location + 1)\n                switch (q) {\n                    case 'keyword':\n                        this.addKeywordFilter(v)\n                        break\n                    case 'fund':\n                    case 'division':\n                    case 'department':\n                    case 'gl':\n                    case 'event':\n                        this.addCategoryFilter(q, atob(v))\n                        break\n                    case 'amount':\n                        if (!v.includes('..')) return\n                        const values = v.split('..').map(e => KMFToNum(e))\n                        this.addAmountFilter(values[0], values[1])\n                        break\n                }\n            })\n        } catch (e) {\n            console.log(e)\n        }\n        this.dataChangeCallbacks = callbacks\n    }\n\n    private setQueryString(){\n        const string = \"d=\" + this.dataset +\n            this.filters.reduce((prev, curr) => {\n                switch (curr.category) {\n                    case 'keyword':\n                        return prev + '&keyword=' + curr.name\n                    case 'amount':\n                        return prev + '&amount=' + curr.name.replace('~', '..')\n                    default:\n                        return prev + '&' + curr.category + '=' + btoa(curr.name)\n                }\n            }, \"\")\n        let path = window.location.href\n        if (path.includes('?')) path = path.substr(0, path.indexOf('?'))\n        window.history.pushState({path: path + '?' + string},'',path + '?' + string);\n    }\n\n    private listChangeCallback() {\n        this.dataChangeCallbacks.forEach(c => c())\n        this.setQueryString()\n    }\n\n    addChangeCallback(callback: () => void) {\n        this.dataChangeCallbacks.push(callback)\n    }\n\n    getRecords(): DataEntry[] {\n        if (this.data.length === 0) {\n            return [];\n        }\n\n        if (this.filters.length === 0) {\n            return this.data\n        }\n\n        return this.filters[this.filters.length - 1].index\n    }\n\n    getWordList() : WordEntry[] {\n        if (this.data.length === 0) {\n            return [];\n        }\n\n        let words_set = new Map<string, number>()\n        this.getRecords().forEach(row => {\n            row.words.forEach(w => {\n                words_set.set(w, (words_set.get(w) || 0) + row.amount);\n            })\n        })\n\n        let words_list: WordEntry[] = []\n        for (let [word, val] of words_set.entries()) {\n            words_list.push({text: word, value: val})\n        }\n\n        words_list.sort((a, b) => a.value - b.value)\n\n        return words_list\n    }\n\n    getCategories(category: Category): WordEntry[] {\n        if (this.data.length === 0) {\n            return [];\n        }\n\n        let category_set = new Map<string, number>()\n        this.getRecords().forEach(row => {\n            const cate_name = row[category]\n                category_set.set(cate_name, (category_set.get(cate_name) || 0) + row.amount);\n        })\n\n        let category_list: WordEntry[] = []\n        for (let [word, val] of category_set.entries()) {\n            category_list.push({text: word, value: val})\n        }\n\n        category_list.sort((a, b) => a.value - b.value)\n\n        return category_list\n    }\n\n    getAmountBins(numBin: number): {data: AmountBin[], domain: [number, number]}{\n        if (this.data.length === 0) {\n            return {data: [], domain: [0, 1]}\n        }\n\n        let records : DataEntry[];\n        let domain: [number, number] | null = null;\n        if (this.filters.length != 0 && this.filters[this.filters.length - 1].category == 'amount') {\n            records = this.filters.length >= 2 ? this.filters[this.filters.length - 2].index : this.data\n            const values = this.filters[this.filters.length - 1].name.split('~').map(e => KMFToNum(e))\n            domain = values as [number, number]\n        } else {\n            records = this.getRecords()\n        }\n        let [allMin, allMax] = records.reduce(((previousValue, currentValue) =>\n                [Math.min(previousValue[0], currentValue.amount),\n                    Math.max(previousValue[1], currentValue.amount)]), [Number.MAX_VALUE, Number.MIN_VALUE])\n\n        if (domain == null) domain = [allMin, allMax]\n\n        let bins : AmountBin[] = []\n        let bin_size = (allMax - allMin) / numBin\n        for (let i = 0; i < numBin; i ++) {\n            bins.push({low: allMin + i * bin_size, high: allMin + (i + 1) * bin_size,\n                        value: 0, name: KMFormat(allMin + (i + 0.5) * bin_size)})\n        }\n\n        records.forEach((e) => {\n            bins.forEach((b) =>{\n                if (b.low <= e.amount && e.amount < b.high)\n                    b.value += e.amount\n            })\n        })\n\n        return {data: bins, domain: domain}\n    }\n\n    getTotal(): number {\n        if (this.filters.length === 0) {\n            return this.total_amount\n        }\n        return this.filters[this.filters.length - 1].amount\n    }\n\n    getDatasetTotal(): number {\n        return this.total_amount\n    }\n\n    getFilters(){\n        return this.filters\n    }\n\n    getDatasetName(){\n        return this.dataset\n    }\n\n    sliceFilter(remaining_length: number) {\n        this.filters = this.filters.slice(0, remaining_length)\n        this.listChangeCallback()\n    }\n\n    addKeywordFilter(word: string) {\n        if (this.data.length === 0) return\n        if (this.filters.reduce((prev, curr) => prev || (curr.category === 'keyword' && curr.name === word), false))\n            return\n\n        let word_index: DataEntry[]\n        if (this.filters.length !== 0) {\n            const last_index = this.filters[this.filters.length - 1].index\n            word_index = last_index.filter((e) => e.words.includes(word))\n        } else {\n            word_index = this.data.filter(e => e.words.includes(word))\n        }\n\n        this.filters.push({\n            category: 'keyword',\n            name: word,\n            index: word_index,\n            amount: word_index\n                .reduce((prev, curr) => prev + curr.amount, 0)\n        })\n\n        this.listChangeCallback()\n    }\n\n    addCategoryFilter(category: Category, value: string) {\n        if (this.data.length === 0) return\n        if (this.filters.reduce((prev, curr) => prev || (curr.category === category && curr.name === value), false))\n            return\n\n        let new_index: DataEntry[]\n        if (this.filters.length !== 0) {\n            const last_index = this.filters[this.filters.length - 1].index\n            // @ts-ignore\n            new_index = last_index.filter((e) => (e[category] === value))\n        } else {\n            // @ts-ignore\n            new_index = this.data.filter(e => (e[category] === value))\n        }\n\n        this.filters.push({\n            category: category,\n            name: value,\n            index: new_index,\n            amount: new_index.reduce((prev, curr) => prev + curr.amount, 0)\n        })\n\n        this.listChangeCallback()\n    }\n\n    addAmountFilter(low: number, high: number) {\n        if (this.data.length === 0) return\n\n        if (this.filters.length > 0 && this.filters[this.filters.length - 1].category === 'amount') {\n                this.filters = this.filters.slice(0, -1)\n        }\n        const last_index = this.filters.length > 0 ? this.filters[this.filters.length - 1].index : this.data\n        const new_index = last_index\n            .filter((e) => (low <= e.amount && e.amount <= high))\n\n        this.filters.push({\n            category: 'amount',\n            name: KMFormat(low) + \"~\" + KMFormat(high),\n            index: new_index,\n            amount: new_index\n                .reduce((prev, curr) => prev + curr.amount, 0)\n        })\n\n        this.listChangeCallback()\n    }\n}","import React, {Component} from \"react\";\nimport {Category, DataLoaderProps} from \"./DataLoader\";\nimport {Pie, PieChart, ResponsiveContainer, Tooltip} from 'recharts';\nimport {KMFormat} from \"./util\";\n\ninterface CategoryPieProps extends DataLoaderProps{\n    category: Category\n    hidden?: boolean\n}\n\nexport default class CategoryPie extends Component<CategoryPieProps>{\n\n    componentDidMount(): void {\n        this.props.dataloader.addChangeCallback(() => this.forceUpdate())\n    }\n\n    render(): React.ReactNode {\n        const data = this.props.dataloader.getCategories(this.props.category)\n        return (\n            <div style={{height: '80vh'}} hidden={this.props.hidden || false}>\n                <ResponsiveContainer height=\"100%\" width=\"100%\">\n                    <PieChart>\n                        <Pie data={data} dataKey=\"value\" nameKey=\"text\" fill={this.getColor()}\n                             label={({percent, name}) => ((percent || 0) > 0.005 ? name: \"\")}\n                             labelLine={false}\n                             onClick={(e) => this.props.dataloader.addCategoryFilter(this.props.category, e.text)}/>\n                        <Tooltip formatter={(value) => \"$\"+KMFormat(value as number)}\n                                 contentStyle={{padding: '0 5px', margin: 0, borderRadius: 5}}/>\n                    </PieChart>\n                </ResponsiveContainer>\n            </div>\n        )\n    }\n\n    getColor(): string {\n        switch (this.props.category) {\n            case \"fund\":\n                return \"#ef5350\"\n            case \"division\":\n                return \"#ab47bc\"\n            case \"department\":\n                return \"#26c6da\"\n            case \"gl\":\n                return \"#26a69a\"\n            case \"event\":\n                return \"#d4e157\"\n        }\n    }\n}","import React, {Component} from \"react\";\nimport {AmountBin, Category, DataLoaderProps} from \"./DataLoader\";\nimport {\n    Bar,\n    BarChart,\n    CartesianGrid, Cell, ReferenceLine,\n    ResponsiveContainer,\n    XAxis,\n    YAxis\n} from 'recharts';\nimport {KMFormat} from \"./util\";\nimport {Mark, Slider} from \"@material-ui/core\";\n\ninterface SliderProps extends DataLoaderProps{\n    hidden?: boolean\n}\n\ninterface SliderState {\n    value: [number, number]\n    data: AmountBin[]\n}\n\nexport default class AmountSlider extends Component<SliderProps, SliderState>{\n\n    constructor(props: SliderProps) {\n        super(props);\n        this.state = {\n            value: [0, 100],\n            data: []\n        }\n    }\n\n\n    componentDidMount(): void {\n        this.props.dataloader.addChangeCallback(() =>\n            this.updateState()\n        )\n        this.updateState()\n    }\n\n    updateState(){\n        const {data, domain} = this.props.dataloader.getAmountBins(20)\n        this.setState({\n            data: data,\n            value: domain,\n        })\n    }\n\n    render(): React.ReactNode {\n        const data = this.state.data\n        const domain: [number, number] = data.length == 0 ? [0, 1] : [data[0].low, data[data.length - 1].high]\n        return (\n            <div style={{height: '80vh', width: \"80%\", margin: \"auto\"}} hidden={this.props.hidden || false}>\n                <ResponsiveContainer height=\"90%\" width=\"100%\">\n                    <BarChart data={data}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"name\" domain={domain} tick={false} axisLine={false} />\n                        <YAxis domain={[0, 'datamax']} tickFormatter={(v) => '$'+KMFormat(v)}/>\n                        <ReferenceLine y={0} label=\"\" stroke=\"black\" />\n                        <Bar dataKey={\"value\"} fill={this.getColor()}>\n                            {data.map((value, index) => (\n                                <Cell key={`cell-${index}`} fill={this.getColor()}\n                                      opacity={this.getOpacity(value.low, value.high)}/>\n                            ))}\n                        </Bar>\n                    </BarChart>\n                </ResponsiveContainer>\n                <Slider value={this.state.value}\n                        min={domain[0]} max={domain[1]}\n                        onChange={this.onRangeChange.bind(this)}\n                        onChangeCommitted={this.onRangeChangeCommitted.bind(this)}\n                        valueLabelDisplay=\"auto\"\n                        valueLabelFormat={(v) => '$'+KMFormat(v)}\n                        marks={this.getMarks(domain)}\n                />\n            </div>\n        )\n    }\n\n    onRangeChange(event: any, newValues: number | number[]){\n        this.setState({value: newValues as [number, number]})\n    }\n\n    onRangeChangeCommitted(event: any, newValues: number | number[]){\n        const nVal = newValues as [number, number]\n        this.props.dataloader.addAmountFilter(nVal[0], nVal[1])\n    }\n\n    getColor(): string {\n        return \"#29b6f6\"\n    }\n\n    getOpacity(low: number, high: number): number {\n        const proportion = Math.max(0, Math.min(this.state.value[1], high) - Math.max(this.state.value[0], low)) / (high - low)\n        return 0.3 + 0.7 * proportion\n    }\n\n    getMarkPoint(x: number): Mark {\n        return {value: x, label: '$' + KMFormat(x)}\n    }\n\n    getMarks(domain: [number, number]): Mark[]{\n        let marks: Mark[] = domain.map(e => this.getMarkPoint(e))\n        if (domain[0] < 0 && domain[1] > 0) marks.push(this.getMarkPoint(0))\n\n        const step_size = (domain[1] - domain[0]) / 10\n        for (let i = 1; i < 10; i ++) {\n            const val = Number.parseFloat((domain[0] + i * step_size).toPrecision(2))\n            if (Math.abs(val) < 0.5 * step_size) continue\n            marks.push(this.getMarkPoint(val))\n        }\n\n        return marks\n    }\n}","import React from 'react';\nimport './App.css';\nimport WordCloud from \"./WordCloud\";\nimport RecordTable from \"./RecordTable\";\nimport KeywordCrumb from \"./KeywordCrumb\";\nimport Paper from \"@material-ui/core/Paper\";\nimport DataLoader from \"./DataLoader\";\nimport CategoryPie from \"./CategoryPie\";\nimport {Tab, Tabs} from \"@material-ui/core\";\nimport AmountSlider from \"./AmountSlider\";\n\ninterface DatasetProp{\n    query: string\n}\n\ninterface DatasetState {\n    value: number\n}\n\nexport default class DatasetView extends React.Component<DatasetProp, DatasetState> {\n    private readonly loader: DataLoader;\n    constructor(props: DatasetProp) {\n        super(props);\n\n        this.state = {\n            value: 0\n        }\n\n        this.loader = new DataLoader(this.props.query)\n    }\n\n    render() {\n        return (\n            <Paper variant=\"outlined\" style={{margin: '0 10%'}}>\n                <KeywordCrumb style={{margin: 10}} dataloader={this.loader}/>\n                <Tabs value={this.state.value}\n                      onChange={(e, value) => {this.setState({value: value})}}\n                      indicatorColor=\"primary\" textColor=\"primary\" centered>\n                    <Tab label=\"Keywords\"/>\n                    <Tab label=\"Fund\"/>\n                    <Tab label=\"Division\"/>\n                    <Tab label=\"Department\"/>\n                    <Tab label=\"GL\"/>\n                    <Tab label=\"Event\"/>\n                    <Tab label=\"Amount\"/>\n                </Tabs>\n                <WordCloud hidden={this.state.value !== 0} dataloader={this.loader}/>\n                <CategoryPie hidden={this.state.value !== 1} category={\"fund\"} dataloader={this.loader}/>\n                <CategoryPie hidden={this.state.value !== 2} category={\"division\"} dataloader={this.loader}/>\n                <CategoryPie hidden={this.state.value !== 3} category={\"department\"} dataloader={this.loader}/>\n                <CategoryPie hidden={this.state.value !== 4} category={\"gl\"} dataloader={this.loader}/>\n                <CategoryPie hidden={this.state.value !== 5} category={\"event\"} dataloader={this.loader}/>\n                <AmountSlider hidden={this.state.value !== 6} dataloader={this.loader} />\n                <RecordTable dataloader={this.loader}/>\n            </Paper>\n        );\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport TopBar from \"./TopBar\";\nimport DatasetView from \"./DatasetView\"\n\nfunction App() {\n    return (\n        <div>\n            <TopBar/>\n            <DatasetView query={window.location.search}/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
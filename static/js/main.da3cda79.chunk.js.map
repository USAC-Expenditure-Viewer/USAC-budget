{"version":3,"sources":["util.ts","components/WordCloud.tsx","models/QueryBuilder.ts","models/DataLoader.ts","models/Datasets.ts","components/RecordTable.tsx","components/KeywordCrumb.tsx","components/CategoryPie.tsx","components/AmountSlider.tsx","components/DateSlider.tsx","components/ExplanationText.tsx","components/DatasetView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["KMFormat","x","Number","isNaN","suffix","Math","abs","toPrecision","KMFToNum","str","unit","includes","replace","parseFloat","WordCloud","props","callbacks","getWordTooltip","word","text","value","onWordClick","getCallback","bind","onWordMouseOut","onWordMouseOver","options","fontFamily","fontSizes","fontStyle","fontWeight","scale","deterministic","rotations","rotationAngles","transitionDuration","state","words","this","dataloader","addChangeCallback","setWords","style","height","hidden","getWordList","slice","callback","event","isActive","select","target","on","addKeywordFilter","transition","attr","forceUpdate","Component","QueryBuilder","queryString","generators","Map","window","location","search","instance","index","set","query","values","map","c","join","path","href","substr","indexOf","history","pushState","isOfTypeCategory","input","DataLoader","dataset","data","filters","dataChangeCallbacks","total_amount","setDataset","sliceFilter","loadDataset","Papa","pathname","download","header","complete","results","e","date","Date","amount","__parsed_extra","filter","onLoad","reduce","prev","curr","parseQuery","getInstance","getQuery","addGenerator","generateQueryString","listChangeCallback","split","forEach","entry","sign_location","q","v","addCategoryFilter","atob","valuesa","addAmountFilter","valuesd","addMonthFilter","console","log","category","name","btoa","update","push","length","words_set","getRecords","row","w","get","chosen_words","words_list","entries","val","sort","a","b","records","getLastFilter","category_set","cate_name","category_list","numBin","domain","previousValue","currentValue","min","max","MAX_VALUE","MIN_VALUE","allMin","allMax","bins","bin_size","i","low","high","month_string","getFullYear","padStart","getMonth","localeCompare","month_num","s","parseInt","next_month","remaining_length","word_index","new_index","Datasets","datasets","currentDataset","dataLoader","ready","parseDataset","getQueryString","fetch","then","res","json","getDatasetTitle","startsWith","match","toString","month_name","CurrencyFormatter","color","toLocaleString","currency","DateFormatter","toDateString","DateGroupFormatter","column","key","year","month","title","RecordTable","TableHeaderCell","Cell","onClick","setHighlight","selectedColumn","backgroundColor","summaryItems","columnName","type","columns","tableColumnExtension","wordWrapEnabled","groupSummaryItems","showInGroupFooter","alignByColumn","groupExtension","showWhenGrouped","groupingColumnExtensions","criteria","dateToYearMonth","columnWidth","width","exporter","groupWeight","integratedSortingColumnExtensions","React","createRef","sortingState","direction","groupBy","undefined","dataHeight","isOpening","isClosing","buildGroupWeightTable","clear","getCategories","compare","selBox","document","createElement","position","left","top","opacity","body","appendChild","focus","execCommand","removeChild","alert","prevProps","prevState","snapshot","setState","getGroupSortingState","rows","id","Paper","elevation","onMouseEnter","expandTable","onMouseLeave","collapseTable","sorting","grouping","totalItems","groupItems","columnExtensions","for","formatterComponent","defaultHiddenColumnNames","cellComponent","contentComponent","Link","padding","Button","copyURL","aria-label","showSortingControls","emptyMessageComponent","startExport","current","exportGrid","ref","onSave","workbook","table","peekTimer","setInterval","incHeight","clearInterval","expandTimer","collapseTimer","decHeight","sorts","setSorting","isOfTypeTabs","onChange","xlsx","writeBuffer","buffer","saveAs","Blob","getCurrentDatasetName","KeywordCrumb","list","getFilters","Breadcrumbs","separator","Typography","Tooltip","align","getDataset","getDatasetTotal","getColor","CategoryPie","otherSelected","loadOtherSlices","loadMainSlices","lastFilter","selected","dataKey","nameKey","labelLine","clickSlice","fill","formatter","contentStyle","margin","borderRadius","totalValue","maxPrice","otherPrice","splice","otherSlice","AmountSlider","updateState","getAmountBins","paddingLeft","paddingRight","getYAxisWidth","barCategoryGap","bottom","right","strokeDasharray","hide","orientation","tickFormatter","angle","textAnchor","y","label","stroke","getOpacity","Slider","onRangeChange","onChangeCommitted","onRangeChangeCommitted","valueLabelDisplay","valueLabelFormat","marks","getMarks","aria-labelledby","newValues","nVal","min_diff","getViewportWidth","getMarkPoint","step_size","documentElement","clientWidth","innerWidth","DateSlider","getMonthBins","names","x1","y1","x2","y2","offset","stopColor","stopOpacity","getLeftPoint","getRightPoint","display","fillOpacity","step","round","years","Set","d","has","add","ExplanationText","withStyles","theme","root","minWidth","typography","fontWeightRegular","Tab","DatasetView","generateQuery","loader","tableElement","onTabChange","zIndex","App","getDataLoader","CssBaseline","Container","maxWidth","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","registration","unregister","catch","error","message"],"mappings":"+UAQO,SAASA,EAASC,GACrB,GAAIC,OAAOC,MAAMF,GAAI,MAAO,GAC5B,IAAIG,EAAS,GAWb,OAVIC,KAAKC,IAAIL,IAAM,KACfG,EAAS,IACTH,GAAK,KACEI,KAAKC,IAAIL,IAAM,KACtBG,EAAS,IACTH,GAAK,KACEI,KAAKC,IAAIL,IAAM,MACtBG,EAAS,IACTH,GAAK,KAEFA,EAAEM,YAAY,GAAKH,EAGvB,SAASI,EAASC,GACrB,IAAIC,EAAO,EAaX,OAZID,EAAIE,SAAS,OACbD,EAAO,IACPD,EAAMA,EAAIG,QAAQ,IAAK,KAEvBH,EAAIE,SAAS,OACbD,EAAO,IACPD,EAAMA,EAAIG,QAAQ,IAAK,KAEvBH,EAAIE,SAAS,OACbF,EAAMA,EAAIG,QAAQ,IAAK,IACvBF,EAAO,KAEJR,OAAOW,WAAWJ,GAAOC,E,ICxBfI,E,kDAuBjB,WAAYC,GAAyB,IAAD,8BAChC,cAAMA,IAvBFC,UAAuB,CAC3BC,eAAgB,SAACC,GAAD,gBAAmBA,EAAKC,KAAxB,iBAAqCnB,EAASkB,EAAKE,OAAnD,sBAChBC,YAAa,EAAKC,YAAY,eAAeC,KAAhC,gBACbC,eAAgB,EAAKF,YAAY,kBAAkBC,KAAnC,gBAChBE,gBAAiB,EAAKH,YAAY,mBAAmBC,KAApC,iBAkBe,EAf5BG,QAAuB,CAC3BC,WAAY,SACZC,UAAW,CAAC,GAAI,IAChBC,UAAW,SACXC,WAAY,SACZC,MAAO,MAEPC,eAAe,EAEfC,UAAW,EACXC,eAAgB,EAAE,GAAI,IAEtBC,mBAAoB,KAMpB,EAAKC,MAAQ,CACTC,MAAO,CAAC,CAAClB,KAAM,aAAcC,MAAO,OAJR,E,gEAShCkB,KAAKvB,MAAMwB,WAAWC,kBAAkBF,KAAKG,SAASlB,KAAKe,S,+BAI3D,OACI,yBAAKI,MAAO,CAACC,OAAQ,QAASC,OAAQN,KAAKvB,MAAM6B,QAC3CN,KAAKvB,MAAM6B,OAAmB,KAC5B,kBAAC,IAAD,CAAgB5B,UAAWsB,KAAKtB,UAAWqB,MAAOC,KAAKvB,MAAMwB,WAAWM,cAAcC,MAAM,EAAG,IAC/EpB,QAASY,KAAKZ,a,kCAMlCqB,GAAmB,IAAD,OAC1B,OAAO,SAAC7B,EAAY8B,GAChB,IAAMC,EAAwB,mBAAbF,EAEJG,YAAOF,EAAMG,QAErBC,GAAG,SAAU,WACNH,GACA,EAAKlC,MAAMwB,WAAWc,iBAAiBnC,EAAKC,SAGnDmC,aACAC,KAAK,aAAc,SACnBA,KAAK,kBAAmBN,EAAW,YAAc,W,iCAK1DX,KAAKkB,kB,GAhE0BC,a,4ECdlBC,E,WAYjB,aAAuB,yBATfC,iBASc,OARdC,WAAwC,IAAIC,IAShDvB,KAAKqB,YAAcG,OAAOC,SAASC,OAAOpD,QAAQ,IAAK,I,+DALvD,OADsB,OAAlB0B,KAAK2B,WAAmB3B,KAAK2B,SAAW,IAAIP,GACzCpB,KAAK2B,a,gDASZ,OAAO3B,KAAKqB,c,mCAGHZ,EAAwBmB,GACjC5B,KAAKsB,WAAWO,IAAID,EAAOnB,K,+BAI3B,IACMqB,EADkB,YAAI9B,KAAKsB,WAAWS,UAAUC,KAAI,SAACC,GAAD,OAAOA,OAC3CC,KAAK,KAEvBC,EAAOX,OAAOC,SAASW,KACvBD,EAAK9D,SAAS,OAAM8D,EAAOA,EAAKE,OAAO,EAAGF,EAAKG,QAAQ,OAC3Dd,OAAOe,QAAQC,UAAU,CAACL,KAAMA,EAAO,IAAML,GAAQ,GAAIK,EAAO,IAAML,O,KA9BzDV,EAEFO,SAAgC,K,qBCuB5C,SAASc,EAAkBC,GAC9B,MAAO,CAAC,OAAQ,WAAY,aAAc,KAAM,SAASrE,SAASqE,G,IAoBjDC,E,WAQjB,WAAYC,GAAyB,yBAN7BC,KAAoB,GAMQ,KAL5BC,QAAoB,GAKQ,KAJ5BC,oBAAsC,GAIV,KAH5BC,aAAuB,EAGK,KAF5BJ,QAA0B,KAG9B5C,KAAK4C,QAAUA,EACf5C,KAAKiD,WAAWL,G,uDAGTA,GACP5C,KAAKkD,YAAY,GACjBlD,KAAKmD,YAAYP,K,mCAIjB,OAAO5C,KAAK4C,U,kCAGIA,GAAyB,IAAD,OACxB,OAAZA,GACJQ,QAAW5B,OAAOC,SAAS4B,SAAW,oBAAsBT,EAAU,OAClE,CACIU,UAAU,EACVC,QAAQ,EACRC,SAAU,SAACC,GACP,EAAKZ,KAAOY,EAAQZ,KAAKb,KAAI,SAAC0B,GAI1B,OAHAA,EAAEC,KAAO,IAAIC,KAAiC,IAA5BhG,OAAOW,WAAWmF,EAAEC,OACtCD,EAAEG,OAASjG,OAAOW,WAAWmF,EAAEG,QAC/BH,EAAE3D,MAAQ2D,EAAEI,gBAAkB,GACvBJ,KACRK,QAAO,SAAAL,GAAC,OAAK9F,OAAOC,MAAM6F,EAAEG,WAE/B,EAAKG,c,+BAMjBhE,KAAKgD,aAAehD,KAAK6C,KAAKoB,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,EAAKN,SAAQ,GACzE7D,KAAKoE,WAAWhD,EAAaiD,cAAcC,YAC3ClD,EAAaiD,cAAcE,aAAavE,KAAKwE,oBAAoBvF,KAAKe,MAAO,GAC7EA,KAAKyE,uB,iCAGU3C,GAAgB,IAAD,OACb,MAAbA,EAAM,KAAYA,EAAQA,EAAMtB,MAAM,IAC1C,IAAM9B,EAAYsB,KAAK+C,oBACvB/C,KAAK+C,oBAAsB,GAC3B,IACIjB,EAAM4C,MAAM,KAAKC,SAAQ,SAAAC,GACrB,GAAKA,EAAMvG,SAAS,KAApB,CACA,IAAMwG,EAAgBD,EAAMtC,QAAQ,KAC9BwC,EAAIF,EAAMvC,OAAO,EAAGwC,GACpBE,EAAIH,EAAMvC,OAAOwC,EAAgB,GACvC,OAAQC,GACJ,IAAK,UACD,EAAK/D,iBAAiBgE,GACtB,MACJ,IAAK,OACL,IAAK,WACL,IAAK,aACL,IAAK,KACL,IAAK,QACD,EAAKC,kBAAkBF,EAAGG,KAAKF,IAC/B,MACJ,IAAK,SACD,IAAKA,EAAE1G,SAAS,MAAO,OACvB,IAAM6G,EAAUH,EAAEL,MAAM,MAAM1C,KAAI,SAAA0B,GAAC,OAAIxF,EAASwF,MAChD,EAAKyB,gBAAgBD,EAAQ,GAAIA,EAAQ,IACzC,MACJ,IAAK,OACD,IAAKH,EAAE1G,SAAS,MAAO,OACvB,IAAM+G,EAAUL,EAAEL,MAAM,MACxB,EAAKW,eAAeD,EAAQ,GAAIA,EAAQ,SAItD,MAAO1B,GACL4B,QAAQC,IAAI7B,GAEhB1D,KAAK+C,oBAAsBrE,I,4CAgB3B,OAZgBsB,KAAK8C,QAAQd,KAAI,SAACmC,GAC9B,OAAQA,EAAKqB,UACT,IAAK,UACD,MAAO,WAAarB,EAAKsB,KAC7B,IAAK,SACD,MAAO,UAAYtB,EAAKsB,KAAKnH,QAAQ,IAAK,MAC9C,IAAK,OACD,MAAO,QAAU6F,EAAKsB,KAAKnH,QAAQ,IAAK,MAC5C,QACI,OAAO6F,EAAKqB,SAAW,IAAME,KAAKvB,EAAKsB,UAGpCvD,KAAK,O,2CAIpBlC,KAAK+C,oBAAoB4B,SAAQ,SAAA1C,GAAC,OAAIA,OACtCb,EAAaiD,cAAcsB,W,wCAGblF,GACdT,KAAK+C,oBAAoB6C,KAAKnF,K,mCAI9B,OAAyB,IAArBT,KAAK6C,KAAKgD,OACH,GAGiB,IAAxB7F,KAAK8C,QAAQ+C,OACN7F,KAAK6C,KAGT7C,KAAK8C,QAAQ9C,KAAK8C,QAAQ+C,OAAS,GAAGjE,Q,oCAI7C,GAAyB,IAArB5B,KAAK6C,KAAKgD,OACV,MAAO,GAGX,IAAIC,EAAY,IAAIvE,IACpBvB,KAAK+F,aAAapB,SAAQ,SAAAqB,GACtBA,EAAIjG,MAAM4E,SAAQ,SAAAsB,GACdH,EAAUjE,IAAIoE,GAAIH,EAAUI,IAAID,IAAM,GAAKD,EAAInC,cAIvD,IAZuB,EAYjBsC,EAAenG,KAAK8C,QAAQiB,QAAO,SAAAL,GAAC,MAAmB,YAAfA,EAAE8B,YAAwBxD,KAAI,SAAA0B,GAAC,OAAIA,EAAE+B,QAE/EW,EAA0B,GAdP,cAeCN,EAAUO,WAfX,IAevB,2BAA6C,CAAC,IAAD,yBAAnCzH,EAAmC,KAA7B0H,EAA6B,KACpCH,EAAa9H,SAASO,IACvBwH,EAAWR,KAAK,CAAC/G,KAAMD,EAAME,MAAOwH,KAjBrB,8BAsBvB,OAFAF,EAAWG,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE3H,MAAQ0H,EAAE1H,SAE/BsH,I,oCAGGZ,GAAkC,IAAD,EAKvCkB,EAJJ,GAAyB,IAArB1G,KAAK6C,KAAKgD,OACV,MAAO,GAKPa,GADA,UAAA1G,KAAK2G,uBAAL,eAAsBnB,YAAaA,EACzBxF,KAAK8C,QAAQ+C,QAAU,EAAI7F,KAAK8C,QAAQ9C,KAAK8C,QAAQ+C,OAAS,GAAGjE,MAAQ5B,KAAK6C,KAE9E7C,KAAK+F,aAGnB,IAAIa,EAAe,IAAIrF,IACvBmF,EAAQ/B,SAAQ,SAAAqB,GACZ,IAAMa,EAAYb,EAAIR,GACtBoB,EAAa/E,IAAIgF,GAAYD,EAAaV,IAAIW,IAAc,GAAKb,EAAInC,WAGzE,IAlB2C,EAkBvCiD,EAA6B,GAlBU,cAmBnBF,EAAaP,WAnBM,IAmB3C,2BAAgD,CAAC,IAAD,yBAAtCzH,EAAsC,KAAhC0H,EAAgC,KAC5CQ,EAAclB,KAAK,CAAC/G,KAAMD,EAAME,MAAOwH,KApBA,8BAyB3C,OAFAQ,EAAcP,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE1H,MAAQ2H,EAAE3H,SAElCgI,I,oCAGGC,GACV,GAAyB,IAArB/G,KAAK6C,KAAKgD,OACV,MAAO,CAAChD,KAAM,GAAImE,OAAQ,CAAC,EAAG,IAGlC,IAAIN,EACAM,EAAkC,KACV,IAAxBhH,KAAK8C,QAAQ+C,QAAmE,WAAnD7F,KAAK8C,QAAQ9C,KAAK8C,QAAQ+C,OAAS,GAAGL,UACnEkB,EAAU1G,KAAK8C,QAAQ+C,QAAU,EAAI7F,KAAK8C,QAAQ9C,KAAK8C,QAAQ+C,OAAS,GAAGjE,MAAQ5B,KAAK6C,KAExFmE,EADehH,KAAK8C,QAAQ9C,KAAK8C,QAAQ+C,OAAS,GAAGJ,KAAKf,MAAM,KAAK1C,KAAI,SAAA0B,GAAC,OAAIxF,EAASwF,OAGvFgD,EAAU1G,KAAK+F,aAZwD,MAcpDW,EAAQzC,QAAQ,SAACgD,EAAeC,GAAhB,MACnC,CAACnJ,KAAKoJ,IAAIF,EAAc,GAAIC,EAAarD,QACrC9F,KAAKqJ,IAAIH,EAAc,GAAIC,EAAarD,WAAW,CAACjG,OAAOyJ,UAAWzJ,OAAO0J,YAhBV,mBActEC,EAdsE,KAc9DC,EAd8D,KAkB5D,OAAXR,IAAiBA,EAAS,CAACO,EAAQC,IAKvC,IAFA,IAAIC,EAAoB,GACpBC,IAHJF,GAAU,MAGeD,GAAUR,EAC1BY,EAAI,EAAGA,EAAIZ,EAAQY,IACxBF,EAAK7B,KAAK,CACNgC,IAAKL,EAASI,EAAID,EAAUG,KAAMN,GAAUI,EAAI,GAAKD,EACrD5I,MAAO,EAAG2G,KAAM/H,EAAS6J,GAAUI,EAAI,IAAOD,KAWtD,OAPAhB,EAAQ/B,SAAQ,SAACjB,GACb+D,EAAK9C,SAAQ,SAAC8B,GACNA,EAAEmB,KAAOlE,EAAEG,QAAUH,EAAEG,OAAS4C,EAAEoB,OAClCpB,EAAE3H,OAAS4E,EAAEG,cAIlB,CAAChB,KAAM4E,EAAMT,OAAQA,K,qCAI5B,GAAyB,IAArBhH,KAAK6C,KAAKgD,OACV,MAAO,CAAChD,KAAM,CAAC,CAAChE,KAAM,UAAWC,MAAO,IAAKkI,OAAQ,CAAC,UAAW,YAGrE,IAAIN,EACAM,EAAkC,KACV,IAAxBhH,KAAK8C,QAAQ+C,QAAmE,SAAnD7F,KAAK8C,QAAQ9C,KAAK8C,QAAQ+C,OAAS,GAAGL,UACnEkB,EAAU1G,KAAK8C,QAAQ+C,QAAU,EAAI7F,KAAK8C,QAAQ9C,KAAK8C,QAAQ+C,OAAS,GAAGjE,MAAQ5B,KAAK6C,KAExFmE,EADehH,KAAK8C,QAAQ9C,KAAK8C,QAAQ+C,OAAS,GAAGJ,KAAKf,MAAM,MAGhEgC,EAAU1G,KAAK+F,aAZyC,MAcrCW,EAAQzC,QAAO,SAACgD,EAAeC,GAClD,IAAMY,GAAgBZ,EAAavD,KAAKoE,cAAgB,IAAIC,SAAS,EAAG,KAAO,KAAQd,EAAavD,KAAKsE,WAAa,EAAK,IAAID,SAAS,EAAG,KAC3I,MAAO,CAACf,EAAc,GAAGiB,cAAcJ,GAAgB,EAAIb,EAAc,GAAKa,EAC1Eb,EAAc,GAAGiB,cAAcJ,GAAgB,EAAIb,EAAc,GAAKa,KAC3E,CAAC,UAAW,YAlB6C,mBAcvDP,EAduD,KAc/CC,EAd+C,KAoB7C,OAAXR,IAAiBA,EAAS,CAACO,EAAQC,IAEvC,IAAIC,EAA4B,IAAIlG,IACpCmF,EAAQ/B,SAAQ,SAACjB,GACb,IAAMoE,GAAgBpE,EAAEC,KAAKoE,cAAgB,IAAIC,SAAS,EAAG,KAAO,KAAQtE,EAAEC,KAAKsE,WAAa,EAAK,IAAID,SAAS,EAAG,KACrHP,EAAK5F,IAAIiG,GAAeL,EAAKvB,IAAI4B,IAAiB,GAAKpE,EAAEG,WAM7D,IAHA,IAAIhB,EAAoB,YAAI4E,EAAKpB,WAAWrE,KAAI,SAAC0B,GAAD,MAAQ,CAAC7E,KAAM6E,EAAE,GAAI5E,MAAO4E,EAAE,OACzE6C,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAE3H,KAAKqJ,cAAczB,EAAE5H,SAErB,IAAhBgE,EAAKgD,QAAgBhD,EAAKgD,OAAS,IAAI,CAC1C,IAAIsC,EAAYtF,EAAKA,EAAKgD,OAAS,GAAGhH,KAAK6F,MAAM,KAAK1C,KAAI,SAACoG,GAAD,OAAOxK,OAAOyK,SAASD,MAC5D,KAAjBD,EAAU,GAAWA,EAAU,KAC9BA,EAAY,CAACA,EAAU,GAAK,EAAG,GACpC,IAAIG,GAAcH,EAAU,GAAK,IAAIH,SAAS,EAAG,KAAO,KAAOG,EAAU,GAAK,IAAIH,SAAS,EAAG,KAC9FnF,EAAK+C,KAAK,CAAC/G,KAAMyJ,EAAYxJ,MAAO,IAGxC,MAAO,CAAC+D,KAAMA,EAAMmE,OAAQA,K,iCAI5B,OAA4B,IAAxBhH,KAAK8C,QAAQ+C,OACN7F,KAAKgD,aAEThD,KAAK8C,QAAQ9C,KAAK8C,QAAQ+C,OAAS,GAAGhC,S,wCAI7C,OAAO7D,KAAKgD,e,mCAIZ,OAAOhD,KAAK8C,U,sCAIZ,OAA4B,IAAxB9C,KAAK8C,QAAQ+C,OACN,KACC7F,KAAK8C,QAAQ9C,KAAK8C,QAAQ+C,OAAS,K,kCAGvC0C,GACRvI,KAAK8C,QAAU9C,KAAK8C,QAAQtC,MAAM,EAAG+H,GACrCvI,KAAKyE,uB,uCAGQ7F,GACb,GAAyB,IAArBoB,KAAK6C,KAAKgD,SACV7F,KAAK8C,QAAQmB,QAAO,SAACC,EAAMC,GAAP,OAAgBD,GAA2B,YAAlBC,EAAKqB,UAA0BrB,EAAKsB,OAAS7G,KAAO,GAArG,CAGA,IAAI4J,EACJ,GAA4B,IAAxBxI,KAAK8C,QAAQ+C,OAEb2C,EADmBxI,KAAK8C,QAAQ9C,KAAK8C,QAAQ+C,OAAS,GAAGjE,MACjCmC,QAAO,SAACL,GAAD,OAAOA,EAAE3D,MAAM1B,SAASO,WAEvD4J,EAAaxI,KAAK6C,KAAKkB,QAAO,SAAAL,GAAC,OAAIA,EAAE3D,MAAM1B,SAASO,MAGxDoB,KAAK8C,QAAQ8C,KAAK,CACdJ,SAAU,UACVC,KAAM7G,EACNgD,MAAO4G,EACP3E,OAAQ2E,EACHvE,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,EAAKN,SAAQ,KAGpD7D,KAAKyE,wB,wCAkCSe,EAAoB1G,GAAgB,IAAD,EACjD,GAAyB,IAArBkB,KAAK6C,KAAKgD,SACV7F,KAAK8C,QAAQmB,QAAO,SAACC,EAAMC,GAAP,OAAgBD,GAASC,EAAKqB,WAAaA,GAAYrB,EAAKsB,OAAS3G,KAAQ,GAArG,CAOA,IAAI2J,EACJ,IALI,UAAAzI,KAAK2G,uBAAL,eAAsBnB,YAAaA,IACnCxF,KAAK8C,QAAU9C,KAAK8C,QAAQtC,MAAM,GAAI,IAId,IAAxBR,KAAK8C,QAAQ+C,OAGb4C,EAFmBzI,KAAK8C,QAAQ9C,KAAK8C,QAAQ+C,OAAS,GAAGjE,MAElCmC,QAAO,SAACL,GAAD,OAAQA,EAAE8B,KAAc1G,UAGtD2J,EAAYzI,KAAK6C,KAAKkB,QAAO,SAAAL,GAAC,OAAKA,EAAE8B,KAAc1G,KAGvDkB,KAAK8C,QAAQ8C,KAAK,CACdJ,SAAUA,EACVC,KAAM3G,EACN8C,MAAO6G,EACP5E,OAAQ4E,EAAUxE,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,EAAKN,SAAQ,KAIjE7D,KAAKyE,wB,2CAIYe,EAAoB1G,GAAgB,IAAD,EACpD,GAAyB,IAArBkB,KAAK6C,KAAKgD,SACV7F,KAAK8C,QAAQmB,QAAO,SAACC,EAAMC,GAAP,OAAgBD,GAASC,EAAKqB,WAAaA,GAAYrB,EAAKsB,OAAS3G,KAAQ,GAArG,CAOA,IAAI2J,EACJ,IALI,UAAAzI,KAAK2G,uBAAL,eAAsBnB,YAAaA,IACnCxF,KAAK8C,QAAU9C,KAAK8C,QAAQtC,MAAM,GAAI,IAId,IAAxBR,KAAK8C,QAAQ+C,OAGb4C,EAFmBzI,KAAK8C,QAAQ9C,KAAK8C,QAAQ+C,OAAS,GAAGjE,MAElCmC,QAAO,SAACL,GAAD,OAAQA,EAAE8B,KAAc1G,UAGtD2J,EAAYzI,KAAK6C,KAAKkB,QAAO,SAAAL,GAAC,OAAKA,EAAE8B,KAAc1G,KAGvDkB,KAAK8C,QAAQ8C,KAAK,CACdJ,SAAUA,EACVC,KAAM3G,EACN8C,MAAO6G,EACP5E,OAAQ4E,EAAUxE,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,EAAKN,SAAQ,KAGjE7D,KAAKyE,wB,sCAIOmD,EAAaC,GACzB,GAAyB,IAArB7H,KAAK6C,KAAKgD,OAAd,CAEI7F,KAAK8C,QAAQ+C,OAAS,GAAwD,WAAnD7F,KAAK8C,QAAQ9C,KAAK8C,QAAQ+C,OAAS,GAAGL,WACjExF,KAAK8C,QAAU9C,KAAK8C,QAAQtC,MAAM,GAAI,IAE1C,IACMiI,GADazI,KAAK8C,QAAQ+C,OAAS,EAAI7F,KAAK8C,QAAQ9C,KAAK8C,QAAQ+C,OAAS,GAAGjE,MAAQ5B,KAAK6C,MAE3FkB,QAAO,SAACL,GAAD,OAAQkE,GAAOlE,EAAEG,QAAUH,EAAEG,QAAUgE,KAEnD7H,KAAK8C,QAAQ8C,KAAK,CACdJ,SAAU,SACVC,KAAM/H,EAASkK,GAAO,IAAMlK,EAASmK,GACrCjG,MAAO6G,EACP5E,OAAQ4E,EACHxE,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,EAAKN,SAAQ,KAGpD7D,KAAKyE,wB,qCAGMmD,EAAaC,GACxB,GAAyB,IAArB7H,KAAK6C,KAAKgD,OAAd,CAEI7F,KAAK8C,QAAQ+C,OAAS,GAAwD,SAAnD7F,KAAK8C,QAAQ9C,KAAK8C,QAAQ+C,OAAS,GAAGL,WACjExF,KAAK8C,QAAU9C,KAAK8C,QAAQtC,MAAM,GAAI,IAE1C,IACMiI,GADazI,KAAK8C,QAAQ+C,OAAS,EAAI7F,KAAK8C,QAAQ9C,KAAK8C,QAAQ+C,OAAS,GAAGjE,MAAQ5B,KAAK6C,MAE3FkB,QAAO,SAACL,GACL,IAAMoE,GAAgBpE,EAAEC,KAAKoE,cAAgB,IAAIC,SAAS,EAAG,KAAO,KAAQtE,EAAEC,KAAKsE,WAAa,EAAK,IAAID,SAAS,EAAG,KACrH,OAAOJ,EAAIM,cAAcJ,IAAiB,GAAKA,EAAaI,cAAcL,IAAS,KAG3F7H,KAAK8C,QAAQ8C,KAAK,CACdJ,SAAU,OACVC,KAAMmC,EAAM,IAAMC,EAClBjG,MAAO6G,EACP5E,OAAQ4E,EACHxE,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,EAAKN,SAAQ,KAGpD7D,KAAKyE,0B,KCteQiE,E,WAejB,aAAuB,IAAD,gCAZdC,SAAqB,GAYP,KAXdC,eAAgC,KAWlB,KAVdlK,UAA4B,GAUd,KATdmK,gBASc,OARdC,OAAiB,EASrB9I,KAAK+I,aAAa3H,EAAaiD,cAAcC,YAC7CtE,KAAK6I,WAAa,IAAIlG,EAAW3C,KAAK4I,gBACtCxH,EAAaiD,cAAcE,aAAavE,KAAKgJ,eAAe/J,KAAKe,MAAO,GACxEiJ,MAAMzH,OAAOC,SAAS4B,SAAW,kBAC5B6F,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACC,GACH,EAAKR,SAAWQ,EAChB,EAAKL,OAAQ,EACe,OAAxB,EAAKF,iBAAyB,EAAKA,eAAiB,EAAKD,SAAS,IACtE,EAAKE,WAAW5F,WAAW,EAAK2F,gBAChC,EAAKlK,UAAUiG,SAAQ,SAAA1C,GAAC,OAAIA,U,+DAfpC,OADsB,OAAlBjC,KAAK2B,WAAmB3B,KAAK2B,SAAW,IAAI+G,GACzC1I,KAAK2B,a,uDAmBElB,GACdT,KAAKtB,UAAUkH,KAAKnF,K,0CAIpB,GAA2B,MAAvBT,KAAK4I,eAAwB,OAAO5I,KAAK4I,iB,8CAK7C,GAA2B,MAAvB5I,KAAK4I,eAAwB,OAAOF,EAASW,gBAAgBrJ,KAAK4I,kB,oCAKtE,GAAI5I,KAAK8I,MAAO,OAAO9I,KAAK2I,W,wCAK5B,GAAI3I,KAAK8I,MAAO,OAAO9I,KAAK2I,SAAS3G,IAAI0G,EAASW,mB,sCAKlD,OAAOrJ,KAAK6I,a,wCAGEpD,GACdzF,KAAK4I,eAAiBnD,EACtBrE,EAAaiD,cAAcsB,SAC3B3F,KAAK6I,WAAW5F,WAAWwC,GAC3BzF,KAAKtB,UAAUiG,SAAQ,SAAA1C,GAAC,OAAIA,S,mCAGXH,GACA,MAAbA,EAAM,KAAYA,EAAQA,EAAMtB,MAAM,IAC1C,IAAM2I,EAAMrH,EAAM4C,MAAM,KAAKX,QAAO,SAACL,GAAD,OAAOA,EAAE4F,WAAW,SACrC,IAAfH,EAAItD,SACJ7F,KAAK4I,eAAiBO,EAAI,GAAG9G,OAAO,M,uCAIxC,OAA4B,OAAxBrC,KAAK4I,eAAgC,GAClC,KAAO5I,KAAK4I,kB,uCAGAnD,GACnB,OAAIA,EAAK8D,MAAM,SAEJ9D,EAAO,KADD7H,OAAOyK,SAAS5C,GACD,GAAG+D,WACrB/D,M,KAjFDiD,EAEF/G,SAA4B,K,wCC2BzC8H,EAAa,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAChE,OAAQ,SAAU,YAAa,UAAW,WAAY,YAEpDC,EAAoB,SAAC,GAAD,IAAG5K,EAAH,EAAGA,MAAH,OACtB,0BAAMsB,MAAO,CAAEuJ,MAAO,SACjB7K,EAAM8K,eAAe,QAAS,CAAExJ,MAAO,WAAYyJ,SAAU,UAIhEC,EAAgB,SAAC,GAAD,IAAGhL,EAAH,EAAGA,MAAH,OAClB,8BAAOA,EAAMiL,iBAGXC,EAAqB,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,OAAQjE,EAA0C,EAA1CA,IAClC,GAAoB,SAAhBiE,EAAOxE,KAAiB,CACxBO,EAAIkE,IAAIV,WADgB,MAEFxD,EAAIkE,IAAIV,WAAW9E,MAAM,KAFvB,mBAEjByF,EAFiB,KAEXC,EAFW,KAGxB,OAAO,8BAAM,yCAAN,IAA8BX,EAAW7L,OAAOyK,SAAS+B,GAAS,GAAlE,IAAuED,GAC3E,OACH,8BAAM,gCAASF,EAAOI,MAAhB,KAAN,IAAwCrE,EAAIlH,QAqB/BwL,E,kDAsFjB,WAAY7L,GAA0B,IAAD,8BACjC,cAAMA,IArFF8L,gBAAkB,SAAC9L,GAAD,OACtB,kBAAC,IAAe+L,KAAhB,iBACQ/L,EADR,CAEIgM,QAAS,kBAAM,EAAKC,aAAajM,EAAMwL,SACvC7J,MAAO3B,EAAMwL,OAAOxE,OAAS,EAAK3F,MAAM6K,eAAiB,CAAEC,gBAAiB,WAAc,CAAEA,gBAAiB,eAgFhF,EA5EpBC,aAA8B,CAC3C,CAAEC,WAAY,OAAQC,KAAM,SAC5B,CAAED,WAAY,SAAUC,KAAM,QA0EG,EAvEpBC,QAAoB,CACjC,CAAEX,MAAO,MAAO5E,KAAM,MACtB,CAAE4E,MAAO,cAAe5E,KAAM,QAC9B,CAAE4E,MAAO,cAAe5E,KAAM,eAC9B,CAAE4E,MAAO,SAAU5E,KAAM,UACzB,CAAE4E,MAAO,OAAQ5E,KAAM,QACvB,CAAE4E,MAAO,WAAY5E,KAAM,YAC3B,CAAE4E,MAAO,aAAc5E,KAAM,cAC7B,CAAE4E,MAAO,QAAS5E,KAAM,SACxB,CAAE4E,MAAO,KAAM5E,KAAM,OA8DY,EA3DpBwF,qBAAuD,CACpE,CAAEH,WAAY,KAAMI,iBAAiB,GACrC,CAAEJ,WAAY,OAAQI,iBAAiB,GACvC,CAAEJ,WAAY,aAAcI,iBAAiB,GAC7C,CAAEJ,WAAY,OAAQI,iBAAiB,GACvC,CAAEJ,WAAY,WAAYI,iBAAiB,GAC3C,CAAEJ,WAAY,QAASI,iBAAiB,GACxC,CAAEJ,WAAY,KAAMI,iBAAiB,GACrC,CAAEJ,WAAY,cAAeI,iBAAiB,GAC9C,CAAEJ,WAAY,SAAUI,iBAAiB,IAkDR,EA/CpBC,kBAAwC,CACrD,CAAEL,WAAY,SAAUC,KAAM,MAAOK,mBAAmB,EAAOC,eAAe,GAC9E,CAAEP,WAAY,SAAUC,KAAM,MAAOK,mBAAmB,GACxD,CAAEN,WAAY,OAAQC,KAAM,QAASK,mBAAmB,IA4CvB,EAzCpBE,eAAkD,CAC/D,CAAER,WAAY,KAAMS,iBAAiB,GACrC,CAAET,WAAY,OAAQS,iBAAiB,GACvC,CAAET,WAAY,aAAcS,iBAAiB,GAC7C,CAAET,WAAY,OAAQS,iBAAiB,GACvC,CAAET,WAAY,WAAYS,iBAAiB,GAC3C,CAAET,WAAY,QAASS,iBAAiB,GACxC,CAAET,WAAY,KAAMS,iBAAiB,GACrC,CAAET,WAAY,cAAeS,iBAAiB,GAC9C,CAAET,WAAY,SAAUS,iBAAiB,IAgCR,EA7B7BC,yBAAiE,CACrE,CACIV,WAAY,OAAQW,SAAU,SAAC3M,GAC3B,OAAIA,aAAiB8E,KAEV,CAAEsG,IA/EL,SAACpL,GAAD,OACpBA,EAAMiJ,cAAcyB,WAAWxB,SAAS,EAAG,KAAO,KAAOlJ,EAAMmJ,WAAa,GAAGuB,WAAWxB,SAAS,EAAG,KA6E1E0D,CAAgB5M,IAElB,CAAEoL,IAAK,OAuBI,EAlB7ByB,YAAsC,CAC1C,CAAEb,WAAY,KAAMc,MAAO,IAC3B,CAAEd,WAAY,OAAQc,MAAO,KAC7B,CAAEd,WAAY,OAAQc,MAAO,KAC7B,CAAEd,WAAY,WAAYc,MAAO,KACjC,CAAEd,WAAY,aAAcc,MAAO,KACnC,CAAEd,WAAY,QAASc,MAAO,KAC9B,CAAEd,WAAY,KAAMc,MAAO,KAC3B,CAAEd,WAAY,cAAec,MAAO,KACpC,CAAEd,WAAY,SAAUc,MAAO,MASE,EANpBC,cAMoB,IAJ7BC,iBAI6B,IAF7BC,kCAAyE,GAI7E,EAAKF,SAAWG,IAAMC,YAEtB,EAAKnM,MAAQ,CACToM,aAAc,CAAC,CAAEpB,WAAY,KAAMqB,UAAW,QAC9CC,aAASC,EACTC,WAAY,IACZ3B,eAAgB,GAChB4B,WAAW,EACXC,WAAW,GAGf,EAAKV,YAAc,IAAIvK,SACI8K,IAAvB,EAAKvM,MAAMsM,SAAgD,SAAvB,EAAKtM,MAAMsM,SAC/C,EAAKK,wBAfwB,E,gEAmBhB,IAAD,OAChBzM,KAAKvB,MAAMwB,WAAWC,mBAAkB,WACpC,EAAKuM,wBACL,EAAKvL,mB,8CAIoB,IAAD,YACDmL,IAAvBrM,KAAKF,MAAMsM,SAAgD,SAAvBpM,KAAKF,MAAMsM,UAC/CpM,KAAK8L,YAAYY,QACjB1M,KAAKvB,MAAMwB,WAAW0M,cAAc3M,KAAKF,MAAMsM,SAASzH,SAAQ,SAAAC,GAC5D,EAAKkH,YAAYjK,IAAI+C,EAAM/F,KAAM+F,EAAM9F,UAG3CkB,KAAK+L,kCAAoC,CACrC,CACIjB,WAAY9K,KAAKF,MAAMsM,QACvBQ,QAAS,SAACpG,EAAGC,GAAJ,gBAAW,YAAKqF,mBAAL,eAAkB5F,IAAIM,KAAM,KAAM,YAAKsF,mBAAL,eAAkB5F,IAAIO,KAAM,S,gCAO9F,IAAMoG,EAASC,SAASC,cAAc,YACtCF,EAAOzM,MAAM4M,SAAW,QACxBH,EAAOzM,MAAM6M,KAAO,IACpBJ,EAAOzM,MAAM8M,IAAM,IACnBL,EAAOzM,MAAM+M,QAAU,IACvBN,EAAO/N,MAAQ0C,OAAOC,SAASW,KAC/B0K,SAASM,KAAKC,YAAYR,GAC1BA,EAAOS,QACPT,EAAOjM,SACPkM,SAASS,YAAY,QACrBT,SAASM,KAAKI,YAAYX,GAC1BY,MAAM,gF,yCAGSC,EAAuCC,EAAuCC,GACzF5N,KAAKF,MAAMsM,SAAWuB,EAAUvB,UAChCpM,KAAKyM,wBACLnH,QAAQC,IAAIvF,KAAKF,MAAMsM,SACvBpM,KAAK6N,SAAS,CACV3B,aAAclM,KAAK8N,4B,+BAMrB,IAAD,OACCC,EAAO/N,KAAKvB,MAAMwB,WAAW8F,aAAa/D,KAAI,SAAC0B,EAAGiE,GAAkB,OAAVjE,EAAEsK,GAAKrG,EAAUjE,KACjF,OAA0B,IAAtB1D,KAAKvB,MAAM6B,OACJ,kBAAC2N,EAAA,EAAD,MAEP,kBAACA,EAAA,EAAD,CACIC,UAAW,EACXC,aAAc,kBAAM,EAAKC,YAAY,IACrCC,aAAc,kBAAM,EAAKC,cAAc,KAEvC,kBAAC,IAAD,CAAMP,KAAMA,EAAM/C,QAAShL,KAAKgL,SAC5B,kBAAC,IAAD,CACIuD,QAASvO,KAAKF,MAAMoM,eAExB,kBAAC,IAAD,CACIsC,cAAiCnC,IAAvBrM,KAAKF,MAAMsM,QAAwB,CAAC,CAAEtB,WAAY9K,KAAKF,MAAMsM,UAAa,KAExF,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAcqC,WAAYzO,KAAK6K,aAAc6D,WAAY1O,KAAKmL,oBAE9D,kBAAC,IAAD,CAAoBwD,iBAAkB3O,KAAKwL,2BAC3C,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAmBmD,iBAAkB3O,KAAK+L,oCAC1C,kBAAC,IAAD,MAEA,kBAAC,IAAD,CAAkB6C,IAAK,CAAC,UAAWC,mBAAoBnF,IACvD,kBAAC,IAAD,CAAkBkF,IAAK,CAAC,QAASC,mBAAoB/E,IAErD,kBAAC,IAAD,CAAc6E,iBAAkB3O,KAAKiL,qBAAsB5K,OAAQL,KAAKF,MAAMwM,aAI9E,kBAAC,IAAD,CACIwC,yBAA0B,CAAC,QAE/B,kBAAC,IAAD,CAAgBC,cAAe/O,KAAKuK,kBACpC,kBAAC,IAAD,CACIyE,iBAAkBhF,EAClB2E,iBAAkB3O,KAAKsL,iBAE3B,kBAAC,IAAD,MAEA,kBAAC,IAAD,MACA,kBAAC2D,EAAA,EAAD,CAAMtF,MAAM,gBAAgBvH,KAAK,2BAA2BhC,MAAO,CAAC8O,QAAS,KACzE,kBAAC,IAAD,MADJ,aAGA,kBAACD,EAAA,EAAD,CAAMtF,MAAM,gBAAgBvH,KAAK,+BAA+BhC,MAAO,CAAC8O,QAAS,KAC7E,kBAAC,IAAD,MADJ,4BAGA,kBAACD,EAAA,EAAD,CAAMtF,MAAM,gBAAgBvH,KAAK,oCAAoChC,MAAO,CAAC8O,QAAS,KAClF,kBAAC,IAAD,MADJ,iBAGA,kBAACC,EAAA,EAAD,CAAQxF,MAAM,UAAUc,QAASzK,KAAKoP,QAASC,aAAW,SAA1D,SAGA,kBAAC,IAAD,CAAeC,qBAAmB,EAACC,sBAAuB,kBAAM,kCAChE,kBAAC,IAAD,CAAaC,YAAa,SAACpQ,GAAD,uBAAa,EAAKyM,SAAS4D,eAA3B,aAAa,EAAuBC,WAAWtQ,MACzE,kBAAC,IAAD,OAEJ,kBAAC,IAAD,CACIuQ,IAAK3P,KAAK6L,SACVb,QAAShL,KAAKgL,QACd+C,KAAMA,EACN6B,OAAQ,SAACC,GAAD,OAAc,EAAKD,OAAOC,S,gCAMxCC,GACN,IAAKA,EAAMhQ,MAAMyM,UAAW,CACxBuD,EAAMjC,SAAS,CAAEtB,WAAW,IAC5B,IAAIwD,EAAYC,aAAY,WACxB,IAAIC,EAAYH,EAAMhQ,MAAMwM,WAAa,GACzCwD,EAAMjC,SAAS,CAACvB,WAAY2D,IACxBH,EAAMhQ,MAAMwM,YAAc,KAC1BwD,EAAMjC,SAAS,CACXvB,WAAY,IACZC,WAAW,IAEf2D,cAAcH,IACPD,EAAMhQ,MAAM0M,YACnBsD,EAAMjC,SAAS,CAAEtB,WAAW,IAC5B2D,cAAcH,MAEnB,O,kCAICD,GACR,IAAKA,EAAMhQ,MAAMyM,UAAW,CACxBuD,EAAMjC,SAAS,CAAEtB,WAAW,IAC5B,IAAI4D,EAAcH,aAAY,WAC1B,IAAIC,EAAYH,EAAMhQ,MAAMwM,WAAa,GACzCwD,EAAMjC,SAAS,CAACvB,WAAY2D,IACxBH,EAAMhQ,MAAMwM,YAAc,KAC1BwD,EAAMjC,SAAS,CACXvB,WAAY,IACZC,WAAW,IAEf2D,cAAcC,IACPL,EAAMhQ,MAAM0M,YACnBsD,EAAMjC,SAAS,CAAEtB,WAAW,IAC5B2D,cAAcC,MAEnB,O,oCAIGL,GACV,IAAKA,EAAMhQ,MAAM0M,UAAW,CACxBsD,EAAMjC,SAAS,CAAErB,WAAW,IAC5B,IAAI4D,EAAgBJ,aAAY,WAC5B,IAAIK,EAAYP,EAAMhQ,MAAMwM,WAAa,GACzCwD,EAAMjC,SAAS,CAACvB,WAAY+D,IACxBP,EAAMhQ,MAAMwM,YAAc,MAC1BwD,EAAMjC,SAAS,CACXvB,WAAY,IACZE,WAAW,IAEf0D,cAAcE,MAEnB,O,mCAIUE,GACjBtQ,KAAK6N,SAAS,CACVlD,eAAgB2F,EAAM7K,OAE1BzF,KAAKuQ,WAAWD,K,iCAGDA,GACXE,GAAaF,EAAM7K,MACnBzF,KAAKvB,MAAMgS,SAASH,EAAM7K,MACL,eAAd6K,EAAM7K,MACbzF,KAAKvB,MAAMgS,SAAS,a,6BAIbZ,GACXA,EAASa,KAAKC,cAAczH,MAAK,SAAC0H,GAC9BC,iBAAO,IAAIC,KAAK,CAACF,GAAS,CAAE7F,KAAM,6BAA5B,uBACcrC,EAASrE,cAAc0M,wBADrC,e,6CAK8E,IAA/DvL,EAA8D,uDAA/BxF,KAAKF,MAAMsM,QACnE,MAAiB,SAAb5G,EACO,CAAC,CAAEsF,WAAY,OAAQqB,UAAW,aACvBE,IAAb7G,GAAuC,gBAAbA,EACxB,CAAC,CAAEsF,WAAY,KAAMqB,UAAW,QAC/B,CAAC,CAAErB,WAAYtF,EAAU2G,UAAW,a,GAnTfhL,a,2BC/DpB6P,E,uKAEApP,GACb,OAAOA,EAAQ,GACX,KAAK,EAAG,MAAO,cACf,KAAK,EAAG,MAAO,YACf,KAAK,EAAG,MAAO,gBACf,KAAK,EAAG,MAAO,OACf,KAAK,EAAG,MAAO,iBACf,KAAK,EAAG,MAAO,eACf,QAAS,MAAO,iB,0CAIH,IAAD,OAChB5B,KAAKvB,MAAMwB,WAAWC,mBAAkB,kBAAM,EAAKgB,mB,+BAG7C,IAAD,OACD+P,EAAOjR,KAAKvB,MAAMwB,WAAWiR,aACjC,OACI,kBAACC,EAAA,EAAD,CAAaC,UAAU,IAAIhR,MAAOJ,KAAKvB,MAAM2B,OACzC,kBAACiR,EAAA,EAAD,yBACA,kBAACC,EAAA,EAAD,CAASjH,MAAM,sBACX,kBAAC4E,EAAA,EAAD,CAAM/E,KAAM,EAAGP,MAAM,cACnBc,QAAS,kBAAM,EAAKhM,MAAMwB,WAAWiD,YAAY,KAC/C,kBAACmO,EAAA,EAAD,CAAYE,MAAM,UACd,yBAAKnR,MAAO,CAACwK,gBAAiB,eAA9B,SACW5K,KAAKvB,MAAMwB,WAAWuR,aADjC,KACiD5T,OAAOoC,KAAKvB,MAAMwB,WAAWuR,cAAc,GAAGhI,WAC3F,6BAFJ,IAGM9L,EAASsC,KAAKvB,MAAMwB,WAAWwR,uBAKhDR,EAAKzQ,MAAM,GAAI,GAAGwB,KAAI,SAAC+B,EAAQnC,GAAT,OACnB,kBAAC0P,EAAA,EAAD,CAASjH,MAAM,oBACX,kBAAC4E,EAAA,EAAD,CAAM/E,IAAKtI,EAAO+H,MAAM,gBAAgB4H,MAAM,SAC5C9G,QAAS,kBAAM,EAAKhM,MAAMwB,WAAWiD,YAAYtB,EAAQ,KACvD,kBAACyP,EAAA,EAAD,CAAYE,MAAM,UACd,yBAAKnR,MAAO,CAACwK,gBAAiB,EAAK8G,SAAS9P,KACvCmC,EAAOyB,SADZ,KACwBzB,EAAO0B,KAC3B,6BAFJ,IAGM/H,EAASqG,EAAOF,eAMrCoN,EAAKpL,OAAS,EAAK,yBAAKzF,MAAO,CAACwK,gBAAiB5K,KAAK0R,SAAST,EAAKpL,UACjE,kBAACwL,EAAA,EAAD,CAAY1H,MAAM,cAAc4H,MAAM,SAASrH,IAAK+G,EAAKpL,QACpDoL,EAAKA,EAAKpL,OAAS,GAAGL,SAD3B,KACuCyL,EAAKA,EAAKpL,OAAS,GAAGJ,KAAK,6BADlE,IACyE/H,EAASuT,EAAKA,EAAKpL,OAAS,GAAGhC,UACjF,U,GApDD1C,a,QCIrBwQ,E,4MAETC,eAA0B,E,kEAEP,IAAD,OACtB5R,KAAKvB,MAAMwB,WAAWC,mBAAkB,kBAAM,EAAKgB,mB,+BAG5B,IAAD,OAChB2B,EAAO7C,KAAK4R,cAAgB5R,KAAK6R,kBAAoB7R,KAAK8R,iBAChE9R,KAAK4R,eAAgB,EACrB,IAAMG,EAAa/R,KAAKvB,MAAMwB,WAAW0G,gBACnCqL,EAAyB,MAAdD,OAAqB1F,EACjC0F,EAAWvM,WAAaxF,KAAKvB,MAAM+G,SAAWuM,EAAWtM,UAAO4G,EAErE,OACI,yBAAKjM,MAAO,CAACC,OAAQ,QAASC,OAAQN,KAAKvB,MAAM6B,SAAU,GACrDN,KAAKvB,MAAM6B,OAAmB,KAC5B,kBAAC,IAAD,CAAqBD,OAAO,OAAOuL,MAAM,QACrC,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAK/I,KAAMA,EAAMoP,QAAQ,QAAQC,QAAQ,OACpCC,WAAW,EACX1H,QAAS,SAAC/G,GAAD,OAAO,EAAK0O,WAAW1O,KAE7Bb,EAAKb,KAAI,SAAC4C,EAAOhD,GAAR,OACL,kBAAC,IAAD,CAAMsI,IAAG,eAAUtI,GAASyQ,KAAM,EAAKX,SAASM,IAAapN,EAAM/F,YAI/E,kBAAC,IAAD,CAASyT,UAAW,SAACxT,GAAD,MAAW,IAAMpB,EAASoB,IACrCyT,aAAc,CAACrD,QAAS,QAASsD,OAAQ,EAAGC,aAAc,U,iCAQxE/O,GACA,UAAXA,EAAE7E,MACFmB,KAAK4R,eAAgB,EACrB5R,KAAKkB,eAGLlB,KAAKvB,MAAMwB,WAAW+E,kBAAkBhF,KAAKvB,MAAM+G,SAAU9B,EAAE7E,Q,uCAInE,IAAIgE,EAAO7C,KAAKvB,MAAMwB,WAAW0M,cAAc3M,KAAKvB,MAAM+G,UAEtDkN,EAAa,EACjB7P,EAAK8B,SAAQ,SAACC,GACV8N,GAAc9N,EAAM9F,SAKxB,IAFA,IAAM6T,EAAwB,IAAbD,EACbE,EAAa,EACTjL,EAAI9E,EAAKgD,OAAQ,EAAG8B,GAAK,EAAIA,IAC9B9E,EAAK8E,GAAG7I,MAAQ6T,IACf9P,EAAKgQ,OAAOlL,EAAG,GACfiL,GAAc/P,EAAK8E,GAAG7I,OAI9B,IAAIgU,EAAyB,CAACjU,KAAM,QAASC,MAAO8T,GAGpD,OAFA/P,EAAK+C,KAAKkN,GAEHjQ,I,wCAIP,IAAIA,EAAO7C,KAAKvB,MAAMwB,WAAW0M,cAAc3M,KAAKvB,MAAM+G,UAEtDkN,EAAa,EACjB7P,EAAK8B,SAAQ,SAACC,GACV8N,GAAc9N,EAAM9F,SAIxB,IADA,IAAM6T,EAAwB,IAAbD,EACT/K,EAAI9E,EAAKgD,OAAQ,EAAG8B,GAAK,EAAIA,IAC9B9E,EAAK8E,GAAG7I,OAAS6T,GAChB9P,EAAKgQ,OAAOlL,EAAG,GAEvB,OAAO9E,I,+BAGFmP,GACL,GAAIA,EACA,MAAO,UACX,OAAQhS,KAAKvB,MAAM+G,UACf,IAAK,OACD,MAAO,UACX,IAAK,WACD,MAAO,UACX,IAAK,aACD,MAAO,UACX,IAAK,KACD,MAAO,UACX,IAAK,QACD,MAAO,e,GAnGkBrE,a,yBCEpB4R,E,kDAEjB,WAAYtU,GAAqB,IAAD,8BAC5B,cAAMA,IACDqB,MAAQ,CACThB,MAAO,CAAC,EAAG,KACX+D,KAAM,IAJkB,E,gEASL,IAAD,OACtB7C,KAAKvB,MAAMwB,WAAWC,mBAAkB,kBACpC,EAAK8S,iBAEThT,KAAKgT,gB,oCAGM,IAAD,EACahT,KAAKvB,MAAMwB,WAAWgT,cAAc,IAApDpQ,EADG,EACHA,KAAMmE,EADH,EACGA,OACbhH,KAAK6N,SAAS,CACVhL,KAAMA,EACN/D,MAAOkI,M,+BAIY,IAAD,OAChBnE,EAAO7C,KAAKF,MAAM+C,KAClBmE,EAA2C,IAAhBnE,EAAKgD,OAAe,CAAC,EAAG,GAAK,CAAChD,EAAK,GAAG+E,IAAK/E,EAAKA,EAAKgD,OAAS,GAAGgC,MAClG,OACI,yBAAKzH,MAAO,CACR8S,YAAa,KAAMC,aAAa,aAAD,OAAeJ,EAAaK,gBAA5B,OAC/B/S,OAAQ,OAAQmS,OAAQ,QACzBlS,OAAQN,KAAKvB,MAAM6B,SAAU,GAC1BN,KAAKvB,MAAM6B,OAAmB,KAC5B,kBAAC,IAAD,CAAqBD,OAAO,MAAMuL,MAAM,QACpC,kBAAC,IAAD,CAAU/I,KAAMA,EAAMwQ,eAAgB,EAAGb,OAAQ,CAACc,OAAQ,EAAGrG,KAAM,EAAGsG,MAAO,IACzE,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,CAAOvB,QAAQ,OAAOjL,OAAQA,EAAQyM,MAAI,EAACC,YAAY,QACvD,kBAAC,IAAD,CAAO1M,OAAQ,CAAC,EAAG,WAAY2M,cAAe,SAAC5O,GAAD,MAAO,IAAMrH,EAASqH,IAC7D6G,MAAOmH,EAAaK,iBACvB,kBAAC,IAAD,CAAOQ,MAAO,IAAK5G,SAAS,aAAa5M,MAAO,CAACyT,WAAY,WAA7D,6CAIJ,kBAAC,IAAD,CAAeC,EAAG,EAAGC,MAAM,GAAGC,OAAO,UACrC,kBAAC,IAAD,CAAK/B,QAAS,QAASI,KAAMrS,KAAK0R,YAC7B7O,EAAKb,KAAI,SAAClD,EAAO8C,GAAR,OACN,kBAAC,IAAD,CAAMsI,IAAG,eAAUtI,GAASyQ,KAAM,EAAKX,WACjCvE,QAAS,EAAK8G,WAAWnV,EAAM8I,IAAK9I,EAAM+I,cAMpE,yBAAKzH,MAAO,CAAC8S,YAAaH,EAAaK,kBACnC,kBAACc,EAAA,EAAD,CAAQpV,MAAOkB,KAAKF,MAAMhB,MAClBqI,IAAKH,EAAO,GAAII,IAAKJ,EAAO,GAC5ByJ,SAAUzQ,KAAKmU,cAAclV,KAAKe,MAClCoU,kBAAmBpU,KAAKqU,uBAAuBpV,KAAKe,MACpDsU,kBAAkB,OAClBC,iBAAkB,SAACxP,GAAD,MAAO,IAAMrH,EAASqH,IACxCyP,MAAOxU,KAAKyU,SAASzN,GACrB0N,kBAAgB,sB,oCAe1BhU,EAAYiU,GACtB3U,KAAK6N,SAAS,CAAC/O,MAAO6V,M,6CAGHjU,EAAYiU,GAC/B,IAAMC,EAAOD,EACb3U,KAAKvB,MAAMwB,WAAWkF,gBAAgByP,EAAK,GAAIA,EAAK,M,iCAIpD,MAAO,Y,iCAGAhN,EAAaC,GAEpB,MAAO,GAAM,IADM9J,KAAKqJ,IAAI,EAAGrJ,KAAKoJ,IAAInH,KAAKF,MAAMhB,MAAM,GAAI+I,GAAQ9J,KAAKqJ,IAAIpH,KAAKF,MAAMhB,MAAM,GAAI8I,KAASC,EAAOD,M,mCAI1GjK,GACT,MAAO,CAACmB,MAAOnB,EAAGoW,MAAO,IAAMrW,EAASC,M,+BAGnCqJ,GAAmC,IAAD,OAEjC6N,EAAW,IADqC,GAAlC9B,EAAa+B,mBAA2B/B,EAAaK,kBACpCpM,EAAO,GAAKA,EAAO,IACpDwN,EAAgBxN,EAAOhF,KAAI,SAAA0B,GAAC,OAAI,EAAKqR,aAAarR,MAClDsD,EAAO,GAAK,GAAKA,EAAO,GAAK,IAC7BwN,EAAQA,EAAMzQ,QAAO,SAAAL,GAAC,OAAI3F,KAAKC,IAAI0F,EAAE5E,QAAU+V,MACzCjP,KAAK5F,KAAK+U,aAAa,IAIjC,IADA,IAAMC,EAAYjX,KAAKqJ,KAAKJ,EAAO,GAAKA,EAAO,IAAM,GAAI6N,GAChDlN,EAAI,EAAGX,EAAO,GAAKW,EAAIqN,GAAahO,EAAO,GAAK6N,EAAUlN,IAAK,CACpE,IAAMrB,EAAM1I,OAAOW,YAAYyI,EAAO,GAAKW,EAAIqN,GAAW/W,YAAY,IAClEF,KAAKC,IAAIsI,GAAO,GAAM0O,GAC1BR,EAAM5O,KAAK5F,KAAK+U,aAAazO,IAGjC,OAAOkO,K,0CA7CP,OAAOzW,KAAKqJ,IAAI0F,SAASmI,gBAAgBC,YAAa1T,OAAO2T,YAAc,K,sCAI3E,OAAOpC,EAAa+B,mBAAqB,IAAM,EAAI,O,GA3EjB3T,aCWpCsI,EAAa,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAE5E2L,E,kDAEjB,WAAY3W,GAAqB,IAAD,8BAC5B,cAAMA,IACDqB,MAAQ,CACThB,MAAO,CAAC,EAAG,GACXkI,OAAQ,CAAC,UAAW,WACpBnE,KAAM,IALkB,E,gEAUL,IAAD,OACtB7C,KAAKvB,MAAMwB,WAAWC,mBAAkB,kBACpC,EAAK8S,iBAEThT,KAAKgT,gB,oCAGM,IAAD,EACahT,KAAKvB,MAAMwB,WAAWoV,eAAtCxS,EADG,EACHA,KAAMmE,EADH,EACGA,OACPsO,EAAQzS,EAAKb,KAAI,SAAA0B,GAAC,OAAIA,EAAE7E,QAC9BmB,KAAK6N,SAAS,CACVhL,KAAMA,EACN/D,MAAO,CAACwW,EAAMhT,QAAQ0E,EAAO,IAAM,GAAKsO,EAAMhT,QAAQ0E,EAAO,IAAM,Q,+BAKvE,IAAMnE,EAAO7C,KAAKF,MAAM+C,KACxB,OACI,yBAAKzC,MAAO,CACR8S,YAAa,KAAMC,aAAa,aAAD,OAAeiC,EAAWhC,gBAA1B,OAC/B/S,OAAQ,OAAQmS,OAAQ,QACzBlS,OAAQN,KAAKvB,MAAM6B,SAAU,GAC1BN,KAAKvB,MAAM6B,OAAmB,KAC5B,kBAAC,IAAD,CAAqBD,OAAO,MAAMuL,MAAM,QACpC,kBAAC,IAAD,CAAW/I,KAAMA,EAAMwQ,eAAgB,EAAGb,OAAQ,CAACc,OAAQ,EAAGrG,KAAM,EAAGsG,MAAO,IAC1E,8BACI,oCAAgBvF,GAAG,WAAWuH,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KAClD,0BAAMC,OAAO,KAAKC,UAAW5V,KAAK0R,WAAYmE,YAAa,KAC3D,0BAAMF,OAAO,MAAMC,UAAW5V,KAAK0R,WAAYmE,YAAa,MAEhE,oCAAgB7H,GAAG,YAAYuH,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KACnD,0BAAMC,OAAQ3V,KAAK8V,eAAiB,IAAMF,UAAW5V,KAAK0R,WACpDmE,YAAa,KACnB,0BAAMF,OAAQ3V,KAAK8V,eAAiB,IAAMF,UAAW5V,KAAK0R,WACpDmE,YAAa,KACnB,0BAAMF,OAAQ3V,KAAK+V,gBAAkB,IAAMH,UAAW5V,KAAK0R,WACrDmE,YAAa,KACnB,0BAAMF,OAAQ3V,KAAK+V,gBAAkB,IAAMH,UAAW5V,KAAK0R,WACrDmE,YAAa,OAG3B,kBAAC,IAAD,CAAerC,gBAAgB,QAC/B,kBAAC,IAAD,CAAOvB,QAAQ,OAAOwB,MAAI,EAACC,YAAY,MAAMjU,MAAM,SACnD,kBAAC,IAAD,CAAOkU,cAAe,SAAC5O,GAAD,MAAO,IAAMrH,EAASqH,IAAI6G,MAAOwJ,EAAWhC,iBAC9D,kBAAC,IAAD,CAAOQ,MAAO,IAAK5G,SAAS,aAAa5M,MAAO,CAACyT,WAAY,WAA7D,uBAIJ,kBAAC,IAAD,CAASvB,UAAW,SAACxT,GAAD,MAAW,IAAMpB,EAASoB,IACrCyT,aAAc,CAACyD,QAAS,UACjC,kBAAC,IAAD,CAAelC,EAAG,EAAGC,MAAM,GAAGC,OAAO,UACrC,kBAAC,IAAD,CAAMjJ,KAAK,WAAWkH,QAAQ,QAAQ+B,OAAQhU,KAAK0R,WAAYuE,YAAa,EACtE5D,KAAK,sBAIvB,yBAAKjS,MAAO,CAAC8S,YAAakC,EAAWhC,kBACjC,kBAACc,EAAA,EAAD,CAAQpV,MAAOkB,KAAKF,MAAMhB,MAClBqI,IAAK,EAAGC,IAAKpH,KAAKF,MAAM+C,KAAKgD,OAC7B4K,SAAUzQ,KAAKmU,cAAclV,KAAKe,MAClCoU,kBAAmBpU,KAAKqU,uBAAuBpV,KAAKe,MACpDsU,kBAAkB,MAClBE,MAAOxU,KAAKyU,SAASzU,KAAKF,MAAM+C,MAChCqT,KAAM,KACNxB,kBAAgB,oB,oCAe1BhU,EAAYiU,GACtB3U,KAAK6N,SAAS,CAAC/O,MAAO6V,M,6CAGHjU,EAAYiU,GAC/B,IAAMC,EAAQD,EAA+B3S,KAAI,SAAA0B,GAAC,OAAI3F,KAAKoY,MAAMzS,EAAI,OAC/Db,EAAO7C,KAAKF,MAAM+C,KACxB7C,KAAKvB,MAAMwB,WAAWoF,eAAexC,EAAK+R,EAAK,IAAI/V,KAAMgE,EAAK+R,EAAK,IAAI/V,Q,iCAIvE,MAAO,Y,iCAGA+C,GAEP,OADAA,GAAS,GACF5B,KAAKF,MAAMhB,MAAM,IAAM8C,GAASA,GAAS5B,KAAKF,MAAMhB,MAAM,GAAK,EAAI,K,qCAI1E,OAAQkB,KAAKF,MAAMhB,MAAM,GAAK,IAAMkB,KAAKF,MAAM+C,KAAKgD,OAAS,K,sCAI7D,OAAQ7F,KAAKF,MAAMhB,MAAM,IAAOkB,KAAKF,MAAM+C,KAAKgD,OAAS,K,+BAGpDhD,GACL,IAAI2R,EAAQ3R,EAAKb,KAAI,SAAC0B,EAAGiE,GAAJ,MAAW,CAAC7I,MAAO6I,EAAI,GAAKoM,MAAOrQ,EAAE7E,SACtDuX,EAAqB,IAAIC,IAS7B,OARA7B,EAAM7P,SAAQ,SAACjB,EAAGiE,GACd,IAAM2O,EAAI5S,EAAEqQ,MAAMrP,MAAM,KACpB0R,EAAMG,IAAID,EAAE,IAAK9B,EAAM7M,GAAGoM,MAAQtK,EAAW7L,OAAOyK,SAASiO,EAAE,IAAM,IAErEF,EAAMI,IAAIF,EAAE,IACZ9B,EAAM7M,GAAGoM,MAAQtK,EAAW7L,OAAOyK,SAASiO,EAAE,IAAM,GAAnC,WAA4CA,EAAE,QAGhE9B,K,0CA7CP,OAAOzW,KAAKqJ,IAAI0F,SAASmI,gBAAgBC,YAAa1T,OAAO2T,YAAc,K,sCAI3E,OAAOnV,KAAK8U,mBAAqB,IAAM,EAAI,O,GAzFX3T,aCpBzB,SAASsV,EAAgBhY,GAEpC,OAAQA,EAAM+G,UACV,IAAK,OACD,OACI,kBAAC6L,EAAA,EAAD,CAAY1H,MAAM,iBAAlB,0DAIR,IAAK,OACD,OACI,kBAAC0H,EAAA,EAAD,CAAY1H,MAAM,iBAAlB,4DAIR,IAAK,WACD,OACI,kBAAC0H,EAAA,EAAD,CAAY1H,MAAM,iBAAlB,mCAIR,IAAK,aACD,OACI,kBAAC0H,EAAA,EAAD,CAAY1H,MAAM,iBAAlB,0CAIR,IAAK,KACD,OACI,kBAAC0H,EAAA,EAAD,CAAY1H,MAAM,iBAAlB,sCAIR,IAAK,QACD,OACI,kBAAC0H,EAAA,EAAD,CAAY1H,MAAM,iBAAlB,4FAIR,IAAK,UACD,OACI,kBAAC0H,EAAA,EAAD,CAAY1H,MAAM,iBAAlB,uKAMR,IAAK,SACD,OACI,kBAAC0H,EAAA,EAAD,CAAY1H,MAAM,iBAAlB,6DAIR,IAAK,QACD,OACI,kBAAC0H,EAAA,EAAD,CAAY1H,MAAM,iBAAlB,kHAGI,6BAHJ,8FAOR,IAAK,SACD,OACI,kBAAC0H,EAAA,EAAD,CAAY1H,MAAM,iBAAlB,iIAGI,6BAHJ,mLAQR,QACI,OAAO,+BCzDZ,SAAS6G,GAAc9N,GAC1B,OAAOD,EAAiBC,IAAU,CAAC,QAAU,UAAY,SAAW,QAAQrE,SAASqE,GAQvEgU,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,SAAU,GACVrX,WAAYmX,EAAMG,WAAWC,mBAEjC/E,SAAU,MALI0E,EAMd,SAACjY,GAAD,OAA0B,kBAACuY,EAAA,EAAQvY,MANvC,IAQqBwY,G,kDAGjB,WAAYxY,GAAsB,IAAD,8BAC7B,cAAMA,IAHFK,MAAkB,UAKtB,EAAKA,MAAQ,UAGb,EAAKgB,MAAQ,CACThB,MAAO,EAAKA,OAGhBsC,EAAaiD,cAAcE,aAAa,EAAK2S,cAAcjY,KAAnB,gBAA+B,GAV1C,E,gEAaN,IAAD,OACtBe,KAAKvB,MAAM0Y,OAAOjX,mBAAkB,kBAAM,EAAKgB,mB,iCAGxCY,GACU,MAAbA,EAAM,KAAYA,EAAQA,EAAMtB,MAAM,IAC1C,IAAM2I,EAAMrH,EAAM4C,MAAM,KAAKX,QAAO,SAACL,GAAD,OAAOA,EAAE4F,WAAW,WACxD,GAAmB,IAAfH,EAAItD,OAAc,MAAO,QAC7B,IAAIuC,EAAIe,EAAI,GAAG9G,OAAO,GACtB,OAAImO,GAAapI,GACNA,EACG,U,sCAId,MAAO,OAASpI,KAAKlB,Q,kCAGbA,GACRkB,KAAKlB,MAAQ0R,GAAa1R,GAASA,EAAQ,QAC3CkB,KAAK6N,SAAS,CAAC/O,MAAOkB,KAAKlB,QAC3BsC,EAAaiD,cAAcsB,W,+BAI3B,IAAMwR,EAASnX,KAAKvB,MAAM0Y,OACpBC,EAAe,kBAAC,EAAD,CAAanX,WAAYkX,EAAQ1G,SAAUzQ,KAAKqX,YAAYpY,KAAKe,MAAOI,MAAO,CAChGkX,OAAQ,EACR1M,gBAAiB,eAErB,OACI,oCACKwM,EACD,kBAACnJ,EAAA,EAAD,CAAOC,UAAW,EAAG9N,MAAO,CACxB4M,SAAU,WACVsK,QAAS,EACThE,OAAQ,EACR1H,MAAO,OAEP,kBAAC6K,EAAD,CAAiBjR,SAAUxF,KAAKF,MAAMhB,QACtC,kBAAC,EAAD,CAAWwB,OAA6B,YAArBN,KAAKF,MAAMhB,MAAqBmB,WAAYkX,IAC/D,kBAAC,EAAD,CAAa7W,QAASmC,EAAiBzC,KAAKF,MAAMhB,OACtC0G,SAAU/C,EAAiBzC,KAAKF,MAAMhB,OAASkB,KAAKF,MAAMhB,MAAQ,OAAQmB,WAAYkX,IAClG,kBAAC,EAAD,CAAc7W,OAA6B,WAArBN,KAAKF,MAAMhB,MAAoBmB,WAAYkX,IACjE,kBAAC,EAAD,CAAY7W,OAA6B,SAArBN,KAAKF,MAAMhB,MAAkBmB,WAAYkX,KAEjE,kBAAC,EAAD,CAAc/W,MAAO,CAAC4M,SAAU,WAAYsG,OAAQ,GAAIrT,WAAYkX,S,GA9D3CnL,IAAM7K,W,oBCKhCoW,G,kDA5BX,WAAY9Y,GAAY,IAAD,8BACnB,cAAMA,IACDqB,MAAQ,CACTqX,OAAQzO,EAASrE,cAAcmT,iBAHhB,E,gEAOI,IAAD,OACtB9O,EAASrE,cAAcnE,mBAAkB,WACrC,EAAK2N,SAAS,CACVsJ,OAAQzO,EAASrE,cAAcmT,uB,+BAMvC,OACI,6BAEI,kBAACC,GAAA,EAAD,MACA,kBAACC,GAAA,EAAD,CAAWC,SAAS,MAChB,kBAAC,GAAD,CAAaR,OAAQnX,KAAKF,MAAMqX,e,GAvBlCnL,IAAM7K,WCJJyW,QACW,cAA7BpW,OAAOC,SAASoW,UAEe,UAA7BrW,OAAOC,SAASoW,UAEhBrW,OAAOC,SAASoW,SAAStO,MACvB,2DCZNuO,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,GAAD,OAEJlL,SAASmL,eAAe,SDiItB,kBAAmBC,WACrBA,UAAUC,cAAcrP,MACrBI,MAAK,SAAAkP,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjT,QAAQiT,MAAMA,EAAMC,c","file":"static/js/main.da3cda79.chunk.js","sourcesContent":["export function commaFormat(x: number): string {\r\n    if (Number.isNaN(x)) return \"\"\r\n    let x_str: string = x.toFixed(2)\r\n    let parts: string[] = x_str.split(\".\")\r\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n    return parts.join(\".\");\r\n}\r\n\r\nexport function KMFormat(x: number): string {\r\n    if (Number.isNaN(x)) return \"\"\r\n    let suffix = \"\";\r\n    if (Math.abs(x) >= 1000000000) {\r\n        suffix = \"B\"\r\n        x /= 1000000000;\r\n    } else if (Math.abs(x) >= 1000000) {\r\n        suffix = \"M\"\r\n        x /= 1000000;\r\n    } else if (Math.abs(x) >= 1000) {\r\n        suffix = \"K\"\r\n        x /= 1000;\r\n    }\r\n    return x.toPrecision(3) + suffix;\r\n}\r\n\r\nexport function KMFToNum(str: string): number {\r\n    let unit = 1\r\n    if (str.includes('K')) {\r\n        unit = 1000\r\n        str = str.replace('K', '')\r\n    }\r\n    if (str.includes('M')) {\r\n        unit = 1000000\r\n        str = str.replace('M', '')\r\n    }\r\n    if (str.includes('B')) {\r\n        str = str.replace('B', '')\r\n        unit = 1000000000\r\n    }\r\n    return Number.parseFloat(str) * unit\r\n}\r\n","/**\r\n * Created by TylerLiu on 2020/04/23.\r\n */\r\nimport 'd3-transition';\r\nimport {select} from 'd3-selection';\r\nimport React, {Component} from 'react';\r\nimport ReactWordcloud, {Callbacks, OptionsProp, Word} from \"react-wordcloud\";\r\nimport {KMFormat} from \"../util\";\r\nimport {DataLoaderProps} from \"../models/DataLoader\";\r\n\r\ninterface WordCloudProps extends DataLoaderProps {\r\n    hidden?: boolean\r\n}\r\n\r\nexport default class WordCloud extends Component<WordCloudProps> {\r\n    private callbacks: Callbacks = {\r\n        getWordTooltip: (word: Word) => `${word.text} has $${KMFormat(word.value)} in the category.`,\r\n        onWordClick: this.getCallback('onWordClick').bind(this),\r\n        onWordMouseOut: this.getCallback('onWordMouseOut').bind(this),\r\n        onWordMouseOver: this.getCallback('onWordMouseOver').bind(this),\r\n    };\r\n\r\n    private options: OptionsProp = {\r\n        fontFamily: 'impact',\r\n        fontSizes: [12, 60],\r\n        fontStyle: 'normal',\r\n        fontWeight: 'normal',\r\n        scale: 'log',\r\n        //spiral: 'archimedean',\r\n        deterministic: true,\r\n\r\n        rotations: 4,\r\n        rotationAngles: [-45, 90],\r\n\r\n        transitionDuration: 200,\r\n    }\r\n\r\n    constructor(props: DataLoaderProps) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            words: [{text: 'Loading...', value: 100}]\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.dataloader.addChangeCallback(this.setWords.bind(this))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{height: '80vh'}} hidden={this.props.hidden}>\r\n                {(this.props.hidden || false) ? null : (\r\n                    <ReactWordcloud callbacks={this.callbacks} words={this.props.dataloader.getWordList().slice(0, 80)}\r\n                                    options={this.options}/>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    getCallback(callback: string) {\r\n        return (word: Word, event: MouseEvent | undefined) => {\r\n            const isActive = callback !== 'onWordMouseOut';\r\n            // @ts-ignore\r\n            const text = select(event.target);\r\n            text\r\n                .on('click', (() => {\r\n                    if (isActive) {\r\n                        this.props.dataloader.addKeywordFilter(word.text);\r\n                    }\r\n                }))\r\n                .transition()\r\n                .attr('background', 'white')\r\n                .attr('text-decoration', isActive ? 'underline' : 'none');\r\n        };\r\n    }\r\n\r\n    setWords() {\r\n        this.forceUpdate()\r\n    }\r\n}\r\n","export default class QueryBuilder {\r\n\r\n    private static instance: QueryBuilder | null = null\r\n    private queryString: string\r\n    private generators: Map<number, () => string> = new Map()\r\n\r\n    static getInstance() {\r\n        if (this.instance === null) this.instance = new QueryBuilder()\r\n        return this.instance\r\n    }\r\n\r\n\r\n    private constructor() {\r\n        this.queryString = window.location.search.replace('?', '')\r\n    }\r\n\r\n    getQuery() {\r\n        return this.queryString\r\n    }\r\n\r\n    addGenerator(callback: () => string, index: number) {\r\n        this.generators.set(index, callback)\r\n    }\r\n\r\n    update() {\r\n        let strings: string[] = [...this.generators.values()].map((c) => c())\r\n        const query = strings.join('&')\r\n\r\n        let path = window.location.href\r\n        if (path.includes('?')) path = path.substr(0, path.indexOf('?'))\r\n        window.history.pushState({path: path + '?' + query}, '', path + '?' + query);\r\n    }\r\n}\r\n","import {KMFormat, KMFToNum} from \"../util\";\r\nimport * as Papa from 'papaparse';\r\nimport QueryBuilder from \"./QueryBuilder\";\r\n\r\ninterface DataEntry {\r\n    date: Date,\r\n    fund: string,\r\n    division: string,\r\n    department: string,\r\n    gl: string,\r\n    event: string,\r\n    description: string,\r\n    amount: number,\r\n    words: string[],\r\n    id?: number\r\n}\r\n\r\nexport interface AmountBin {\r\n    low: number\r\n    high: number\r\n    value: number\r\n    name: string\r\n}\r\n\r\nexport type Category = 'fund' | 'division' | 'department' | 'gl' | 'event'\r\nexport function isOfTypeCategory (input: string): input is Category {\r\n    return ['fund', 'division', 'department', 'gl', 'event'].includes(input);\r\n}\r\n\r\nexport interface WordEntry {\r\n    text: string,\r\n    value: number\r\n}\r\n\r\ninterface Filter {\r\n    category: string,\r\n    name: string,\r\n    index: DataEntry[],\r\n    amount: number,\r\n}\r\n\r\nexport interface DataLoaderProps {\r\n    dataloader: DataLoader,\r\n    style?: Object,\r\n}\r\n\r\nexport default class DataLoader {\r\n\r\n    private data: DataEntry[] = []\r\n    private filters: Filter[] = []\r\n    private dataChangeCallbacks: (() => void)[] = []\r\n    private total_amount: number = 0\r\n    private dataset : string | null = null\r\n\r\n    constructor(dataset: string | null) {\r\n        this.dataset = dataset\r\n        this.setDataset(dataset)\r\n    }\r\n\r\n    setDataset(dataset: string | null) {\r\n        this.sliceFilter(0)\r\n        this.loadDataset(dataset)\r\n    }\r\n\r\n    getDataset(): string | null {\r\n        return this.dataset\r\n    }\r\n\r\n    private loadDataset(dataset: string | null) {\r\n        if (dataset === null) return\r\n        Papa.parse(window.location.pathname + \"/expense_summary_\" + dataset + \".csv\",\r\n            {\r\n                download: true,\r\n                header: true,\r\n                complete: (results) => {\r\n                    this.data = results.data.map((e) => {\r\n                        e.date = new Date(Number.parseFloat(e.date) * 1000)\r\n                        e.amount = Number.parseFloat(e.amount)\r\n                        e.words = e.__parsed_extra || []\r\n                        return e\r\n                    }).filter(e => !Number.isNaN(e.amount))\r\n\r\n                    this.onLoad()\r\n                }\r\n            })\r\n    }\r\n\r\n    private onLoad() {\r\n        this.total_amount = this.data.reduce((prev, curr) => prev + curr.amount, 0)\r\n        this.parseQuery(QueryBuilder.getInstance().getQuery())\r\n        QueryBuilder.getInstance().addGenerator(this.generateQueryString.bind(this), 2)\r\n        this.listChangeCallback()\r\n    }\r\n\r\n    private parseQuery(query: string) {\r\n        if (query[0] === '?') query = query.slice(1)\r\n        const callbacks = this.dataChangeCallbacks\r\n        this.dataChangeCallbacks = []\r\n        try {\r\n            query.split('&').forEach(entry => {\r\n                if (!entry.includes('=')) return\r\n                const sign_location = entry.indexOf('=')\r\n                const q = entry.substr(0, sign_location)\r\n                const v = entry.substr(sign_location + 1)\r\n                switch (q) {\r\n                    case 'keyword':\r\n                        this.addKeywordFilter(v)\r\n                        break\r\n                    case 'fund':\r\n                    case 'division':\r\n                    case 'department':\r\n                    case 'gl':\r\n                    case 'event':\r\n                        this.addCategoryFilter(q, atob(v))\r\n                        break\r\n                    case 'amount':\r\n                        if (!v.includes('..')) return\r\n                        const valuesa = v.split('..').map(e => KMFToNum(e))\r\n                        this.addAmountFilter(valuesa[0], valuesa[1])\r\n                        break\r\n                    case 'date':\r\n                        if (!v.includes('..')) return\r\n                        const valuesd = v.split('..')\r\n                        this.addMonthFilter(valuesd[0], valuesd[1])\r\n                        break\r\n                }\r\n            })\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n        this.dataChangeCallbacks = callbacks\r\n    }\r\n\r\n    private generateQueryString() {\r\n        const strings = this.filters.map((curr) => {\r\n            switch (curr.category) {\r\n                case 'keyword':\r\n                    return 'keyword=' + curr.name\r\n                case 'amount':\r\n                    return 'amount=' + curr.name.replace('~', '..')\r\n                case 'date':\r\n                    return 'date=' + curr.name.replace('~', '..')\r\n                default:\r\n                    return curr.category + '=' + btoa(curr.name)\r\n            }\r\n        })\r\n        return strings.join('&')\r\n    }\r\n\r\n    private listChangeCallback() {\r\n        this.dataChangeCallbacks.forEach(c => c())\r\n        QueryBuilder.getInstance().update()\r\n    }\r\n\r\n    addChangeCallback(callback: () => void) {\r\n        this.dataChangeCallbacks.push(callback)\r\n    }\r\n\r\n    getRecords(): DataEntry[] {\r\n        if (this.data.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        if (this.filters.length === 0) {\r\n            return this.data\r\n        }\r\n\r\n        return this.filters[this.filters.length - 1].index\r\n    }\r\n\r\n    getWordList(): WordEntry[] {\r\n        if (this.data.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        let words_set = new Map<string, number>()\r\n        this.getRecords().forEach(row => {\r\n            row.words.forEach(w => {\r\n                words_set.set(w, (words_set.get(w) || 0) + row.amount);\r\n            })\r\n        })\r\n\r\n        const chosen_words = this.filters.filter(e => e.category === 'keyword').map(e => e.name)\r\n\r\n        let words_list: WordEntry[] = []\r\n        for (let [word, val] of words_set.entries()) {\r\n            if (!chosen_words.includes(word))\r\n                words_list.push({text: word, value: val})\r\n        }\r\n\r\n        words_list.sort((a, b) => b.value - a.value)\r\n\r\n        return words_list\r\n    }\r\n\r\n    getCategories(category: Category): WordEntry[] {\r\n        if (this.data.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        let records: DataEntry[];\r\n        if (this.getLastFilter()?.category === category) {\r\n            records = this.filters.length >= 2 ? this.filters[this.filters.length - 2].index : this.data\r\n        } else {\r\n            records = this.getRecords()\r\n        }\r\n\r\n        let category_set = new Map<string, number>()\r\n        records.forEach(row => {\r\n            const cate_name = row[category]\r\n            category_set.set(cate_name, (category_set.get(cate_name) || 0) + row.amount);\r\n        })\r\n\r\n        let category_list: WordEntry[] = []\r\n        for (let [word, val] of category_set.entries()) {\r\n            category_list.push({text: word, value: val})\r\n        }\r\n\r\n        category_list.sort((a, b) => a.value - b.value)\r\n\r\n        return category_list\r\n    }\r\n\r\n    getAmountBins(numBin: number): { data: AmountBin[], domain: [number, number] } {\r\n        if (this.data.length === 0) {\r\n            return {data: [], domain: [0, 1]}\r\n        }\r\n\r\n        let records: DataEntry[];\r\n        let domain: [number, number] | null = null;\r\n        if (this.filters.length !== 0 && this.filters[this.filters.length - 1].category === 'amount') {\r\n            records = this.filters.length >= 2 ? this.filters[this.filters.length - 2].index : this.data\r\n            const values = this.filters[this.filters.length - 1].name.split('~').map(e => KMFToNum(e))\r\n            domain = values as [number, number]\r\n        } else {\r\n            records = this.getRecords()\r\n        }\r\n        let [allMin, allMax] = records.reduce(((previousValue, currentValue) =>\r\n            [Math.min(previousValue[0], currentValue.amount),\r\n                Math.max(previousValue[1], currentValue.amount)]), [Number.MAX_VALUE, Number.MIN_VALUE])\r\n\r\n        if (domain === null) domain = [allMin, allMax]\r\n        allMax += 0.001\r\n\r\n        let bins: AmountBin[] = []\r\n        let bin_size = (allMax - allMin) / numBin\r\n        for (let i = 0; i < numBin; i++) {\r\n            bins.push({\r\n                low: allMin + i * bin_size, high: allMin + (i + 1) * bin_size,\r\n                value: 0, name: KMFormat(allMin + (i + 0.5) * bin_size)\r\n            })\r\n        }\r\n\r\n        records.forEach((e) => {\r\n            bins.forEach((b) => {\r\n                if (b.low <= e.amount && e.amount < b.high)\r\n                    b.value += e.amount\r\n            })\r\n        })\r\n\r\n        return {data: bins, domain: domain}\r\n    }\r\n\r\n    getMonthBins(): { data: WordEntry[], domain: [string, string] } {\r\n        if (this.data.length === 0) {\r\n            return {data: [{text: '0000-01', value: 0}], domain: ['0000-01', '0000-01']}\r\n        }\r\n\r\n        let records: DataEntry[];\r\n        let domain: [string, string] | null = null;\r\n        if (this.filters.length !== 0 && this.filters[this.filters.length - 1].category === 'date') {\r\n            records = this.filters.length >= 2 ? this.filters[this.filters.length - 2].index : this.data\r\n            const values = this.filters[this.filters.length - 1].name.split('~')\r\n            domain = values as [string, string]\r\n        } else {\r\n            records = this.getRecords()\r\n        }\r\n        let [allMin, allMax] = records.reduce((previousValue, currentValue) => {\r\n            const month_string = (currentValue.date.getFullYear() + \"\").padStart(4, '0') + '-' + ((currentValue.date.getMonth() + 1) + \"\").padStart(2, \"0\")\r\n            return [previousValue[0].localeCompare(month_string) < 0 ? previousValue[0] : month_string,\r\n                previousValue[1].localeCompare(month_string) > 0 ? previousValue[1] : month_string]\r\n        }, ['9999-99', '0000-00'])\r\n\r\n        if (domain === null) domain = [allMin, allMax]\r\n\r\n        let bins: Map<string, number> = new Map()\r\n        records.forEach((e) => {\r\n            const month_string = (e.date.getFullYear() + \"\").padStart(4, \"0\") + '-' + ((e.date.getMonth() + 1) + \"\").padStart(2, \"0\")\r\n            bins.set(month_string, (bins.get(month_string) || 0) + e.amount)\r\n        })\r\n\r\n        let data: WordEntry[] = [...bins.entries()].map((e) => ({text: e[0], value: e[1]}))\r\n            .sort((a, b) => (a.text.localeCompare(b.text)))\r\n\r\n        while (data.length !== 0 && data.length < 12) {\r\n            let month_num = data[data.length - 1].text.split('-').map((s) => Number.parseInt(s))\r\n            if (month_num[1] !== 12) month_num[1]++\r\n            else month_num = [month_num[0] + 1, 1]\r\n            let next_month = (month_num[0] + \"\").padStart(4, \"0\") + '-' + (month_num[1] + \"\").padStart(2, \"0\")\r\n            data.push({text: next_month, value: 0})\r\n        }\r\n\r\n        return {data: data, domain: domain}\r\n    }\r\n\r\n    getTotal(): number {\r\n        if (this.filters.length === 0) {\r\n            return this.total_amount\r\n        }\r\n        return this.filters[this.filters.length - 1].amount\r\n    }\r\n\r\n    getDatasetTotal(): number {\r\n        return this.total_amount\r\n    }\r\n\r\n    getFilters() {\r\n        return this.filters\r\n    }\r\n\r\n    getLastFilter() {\r\n        if (this.filters.length === 0)\r\n            return null;\r\n        else return this.filters[this.filters.length - 1]\r\n    }\r\n\r\n    sliceFilter(remaining_length: number) {\r\n        this.filters = this.filters.slice(0, remaining_length)\r\n        this.listChangeCallback()\r\n    }\r\n\r\n    addKeywordFilter(word: string) {\r\n        if (this.data.length === 0) return\r\n        if (this.filters.reduce((prev, curr) => prev || (curr.category === 'keyword' && curr.name === word), false))\r\n            return\r\n\r\n        let word_index: DataEntry[]\r\n        if (this.filters.length !== 0) {\r\n            const last_index = this.filters[this.filters.length - 1].index\r\n            word_index = last_index.filter((e) => e.words.includes(word))\r\n        } else {\r\n            word_index = this.data.filter(e => e.words.includes(word))\r\n        }\r\n\r\n        this.filters.push({\r\n            category: 'keyword',\r\n            name: word,\r\n            index: word_index,\r\n            amount: word_index\r\n                .reduce((prev, curr) => prev + curr.amount, 0)\r\n        })\r\n\r\n        this.listChangeCallback()\r\n    }\r\n\r\n    // addCategoryFilter(category: Category, value: string) {\r\n    //     if (this.data.length === 0) return\r\n    //     if (this.filters.reduce((prev, curr) => prev || (curr.category === category && curr.name === value), false))\r\n    //         return\r\n\r\n    //     if (this.getLastFilter()?.category === category) {\r\n    //         this.filters = this.filters.slice(0, -1)\r\n    //     }\r\n\r\n    //     let new_index: DataEntry[]\r\n    //     if (this.filters.length !== 0) {\r\n    //         const last_index = this.filters[this.filters.length - 1].index\r\n    //         // @ts-ignore\r\n    //         new_index = last_index.filter((e) => (e[category] === value))\r\n    //     } else {\r\n    //         // @ts-ignore\r\n    //         new_index = this.data.filter(e => (e[category] === value))\r\n    //     }\r\n\r\n    //     this.filters.push({\r\n    //         category: category,\r\n    //         name: value,\r\n    //         index: new_index,\r\n    //         amount: new_index.reduce((prev, curr) => prev + curr.amount, 0)\r\n    //     })\r\n\r\n    //     this.listChangeCallback()\r\n    // }\r\n\r\n\r\n    \r\n    addCategoryFilter(category: Category, value: string) {\r\n        if (this.data.length === 0) return\r\n        if (this.filters.reduce((prev, curr) => prev || (curr.category === category && curr.name === value), false))\r\n            return\r\n\r\n        if (this.getLastFilter()?.category === category) {\r\n            this.filters = this.filters.slice(0, -1)\r\n        }\r\n\r\n        let new_index: DataEntry[]\r\n        if (this.filters.length !== 0) {\r\n            const last_index = this.filters[this.filters.length - 1].index\r\n            // @ts-ignore\r\n            new_index = last_index.filter((e) => (e[category] === value))\r\n        } else {\r\n            // @ts-ignore\r\n            new_index = this.data.filter(e => (e[category] === value))\r\n        }\r\n\r\n        this.filters.push({\r\n            category: category,\r\n            name: value,\r\n            index: new_index,\r\n            amount: new_index.reduce((prev, curr) => prev + curr.amount, 0)\r\n        })\r\n\r\n        // console.log(\"filters\", this.filters)\r\n        this.listChangeCallback()\r\n    }\r\n\r\n    \r\n    removeCategoryFilter(category: Category, value: string) {\r\n        if (this.data.length === 0) return\r\n        if (this.filters.reduce((prev, curr) => prev || (curr.category === category && curr.name === value), false))\r\n            return\r\n\r\n        if (this.getLastFilter()?.category === category) {\r\n            this.filters = this.filters.slice(0, -1)\r\n        }\r\n\r\n        let new_index: DataEntry[]\r\n        if (this.filters.length !== 0) {\r\n            const last_index = this.filters[this.filters.length - 1].index\r\n            // @ts-ignore\r\n            new_index = last_index.filter((e) => (e[category] === value))\r\n        } else {\r\n            // @ts-ignore\r\n            new_index = this.data.filter(e => (e[category] === value))\r\n        }\r\n\r\n        this.filters.push({\r\n            category: category,\r\n            name: value,\r\n            index: new_index,\r\n            amount: new_index.reduce((prev, curr) => prev + curr.amount, 0)\r\n        })\r\n\r\n        this.listChangeCallback()\r\n    }\r\n\r\n\r\n    addAmountFilter(low: number, high: number) {\r\n        if (this.data.length === 0) return\r\n\r\n        if (this.filters.length > 0 && this.filters[this.filters.length - 1].category === 'amount') {\r\n            this.filters = this.filters.slice(0, -1)\r\n        }\r\n        const last_index = this.filters.length > 0 ? this.filters[this.filters.length - 1].index : this.data\r\n        const new_index = last_index\r\n            .filter((e) => (low <= e.amount && e.amount <= high))\r\n\r\n        this.filters.push({\r\n            category: 'amount',\r\n            name: KMFormat(low) + \"~\" + KMFormat(high),\r\n            index: new_index,\r\n            amount: new_index\r\n                .reduce((prev, curr) => prev + curr.amount, 0)\r\n        })\r\n\r\n        this.listChangeCallback()\r\n    }\r\n\r\n    addMonthFilter(low: string, high: string) {\r\n        if (this.data.length === 0) return\r\n\r\n        if (this.filters.length > 0 && this.filters[this.filters.length - 1].category === 'date') {\r\n            this.filters = this.filters.slice(0, -1)\r\n        }\r\n        const last_index = this.filters.length > 0 ? this.filters[this.filters.length - 1].index : this.data\r\n        const new_index = last_index\r\n            .filter((e) => {\r\n                const month_string = (e.date.getFullYear() + \"\").padStart(4, '0') + '-' + ((e.date.getMonth() + 1) + \"\").padStart(2, '0')\r\n                return low.localeCompare(month_string) <= 0 && month_string.localeCompare(high) <= 0\r\n            })\r\n\r\n        this.filters.push({\r\n            category: 'date',\r\n            name: low + \"~\" + high,\r\n            index: new_index,\r\n            amount: new_index\r\n                .reduce((prev, curr) => prev + curr.amount, 0)\r\n        })\r\n\r\n        this.listChangeCallback()\r\n    }\r\n}\r\n","import QueryBuilder from \"./QueryBuilder\";\r\nimport DataLoader from \"./DataLoader\";\r\n\r\nexport default class Datasets {\r\n\r\n    private static instance: Datasets | null = null\r\n    private datasets: string[] = []\r\n    private currentDataset: string | null = null\r\n    private callbacks: (() => void)[] = []\r\n    private dataLoader: DataLoader\r\n    private ready: boolean = false\r\n\r\n    static getInstance() {\r\n        if (this.instance === null) this.instance = new Datasets()\r\n        return this.instance\r\n    }\r\n\r\n\r\n    private constructor() {\r\n        this.parseDataset(QueryBuilder.getInstance().getQuery())\r\n        this.dataLoader = new DataLoader(this.currentDataset)\r\n        QueryBuilder.getInstance().addGenerator(this.getQueryString.bind(this), 0)\r\n        fetch(window.location.pathname + \"/datasets.json\")\r\n            .then(res => res.json())\r\n            .then((res) => {\r\n                this.datasets = res\r\n                this.ready = true\r\n                if (this.currentDataset === null) this.currentDataset = this.datasets[0]\r\n                this.dataLoader.setDataset(this.currentDataset)\r\n                this.callbacks.forEach(c => c())\r\n            })\r\n    }\r\n\r\n    addChangeCallback(callback: () => void) {\r\n        this.callbacks.push(callback)\r\n    }\r\n\r\n    getCurrentDataset() {\r\n        if (this.currentDataset != null) return this.currentDataset\r\n        return undefined\r\n    }\r\n\r\n    getCurrentDatasetName() {\r\n        if (this.currentDataset != null) return Datasets.getDatasetTitle(this.currentDataset)\r\n        return undefined\r\n    }\r\n\r\n    getDatasets() {\r\n        if (this.ready) return this.datasets\r\n        return undefined\r\n    }\r\n\r\n    getDatasetNames() {\r\n        if (this.ready) return this.datasets.map(Datasets.getDatasetTitle)\r\n        return undefined\r\n    }\r\n\r\n    getDataLoader() {\r\n        return this.dataLoader\r\n    }\r\n\r\n    setCurrentDataset(name: string) {\r\n        this.currentDataset = name\r\n        QueryBuilder.getInstance().update()\r\n        this.dataLoader.setDataset(name)\r\n        this.callbacks.forEach(c => c())\r\n    }\r\n\r\n    private parseDataset(query: string) {\r\n        if (query[0] === '?') query = query.slice(1)\r\n        const res = query.split('&').filter((e) => e.startsWith('d='))\r\n        if (res.length !== 0)\r\n            this.currentDataset = res[0].substr(2)\r\n    }\r\n\r\n    private getQueryString(): string {\r\n        if (this.currentDataset === null) return \"\"\r\n        return 'd=' + this.currentDataset\r\n    }\r\n\r\n    static getDatasetTitle(name: string): string {\r\n        if (name.match(/^\\d*$/)) {\r\n            const year = Number.parseInt(name)\r\n            return name + '-' + (year + 1).toString()\r\n        } else return name\r\n    }\r\n}\r\n","/**\r\n * Created by TylerLiu on 2018/12/23.\r\n */\r\nimport React, { Component } from 'react';\r\nimport {\r\n    Grid,\r\n    VirtualTable,\r\n    TableHeaderRow,\r\n    TableSummaryRow,\r\n    ExportPanel,\r\n    TableColumnVisibility, Toolbar, TableGroupRow, GroupingPanel, SearchPanel, TableColumnResizing\r\n} from \"@devexpress/dx-react-grid-material-ui\";\r\nimport { Category, DataLoaderProps, isOfTypeCategory } from \"../models/DataLoader\";\r\nimport {\r\n    Column, GroupingState, GroupSummaryItem, IntegratedFiltering, IntegratedGrouping,\r\n    IntegratedSorting,\r\n    IntegratedSummary, SearchState,\r\n    Sorting,\r\n    SortingState, SummaryItem,\r\n    SummaryState, TableColumnWidthInfo, TableGroupRow as TableGroupRowBase\r\n} from \"@devexpress/dx-react-grid\";\r\nimport { Paper, Link, Button } from \"@material-ui/core\";\r\nimport { DataTypeProvider } from \"@devexpress/dx-react-grid\";\r\nimport { GridExporter } from \"@devexpress/dx-react-grid-export\";\r\nimport { saveAs } from \"file-saver\";\r\nimport Datasets from \"../models/Datasets\";\r\nimport { Workbook } from \"exceljs\";\r\nimport { isOfTypeTabs, TabTypes } from \"./DatasetView\";\r\nimport ContactSupportIcon from \"@material-ui/icons/ContactSupport\";\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\n\r\nconst month_name = ['January', 'February', 'March', 'April', 'May', 'June',\r\n    'July', 'August', 'September', 'October', 'November', 'December']\r\n\r\nconst CurrencyFormatter = ({ value }: { value: number }) => (\r\n    <span style={{ color: 'blue' }}>\r\n        {value.toLocaleString('en-US', { style: 'currency', currency: 'USD' })}\r\n    </span>\r\n);\r\n\r\nconst DateFormatter = ({ value }: { value: Date }) => (\r\n    <span>{value.toDateString()}</span>\r\n);\r\n\r\nconst DateGroupFormatter = ({ column, row }: TableGroupRowBase.ContentProps) => {\r\n    if (column.name === 'date') {\r\n        row.key.toString()\r\n        const [year, month] = row.key.toString().split('-');\r\n        return <span><strong>Date:</strong> {month_name[Number.parseInt(month) - 1]} {year}</span>\r\n    } else return (\r\n        <span><strong>{column.title}:</strong> {row.value}</span>\r\n    )\r\n};\r\n\r\nconst dateToYearMonth = (value: Date) =>\r\n    value.getFullYear().toString().padStart(4, '0') + '-' + (value.getMonth() + 1).toString().padStart(2, '0')\r\n\r\ninterface RecordTableState {\r\n    sortingState: Sorting[]\r\n    groupBy: Category | \"date\" | undefined\r\n    dataHeight: number\r\n    selectedColumn: string\r\n    isOpening: Boolean\r\n    isClosing: Boolean\r\n}\r\n\r\ninterface RecordTableProps extends DataLoaderProps {\r\n    hidden?: boolean | undefined;\r\n    onChange: (a: TabTypes) => void;\r\n}\r\n\r\nexport default class RecordTable extends Component<RecordTableProps, RecordTableState> {\r\n\r\n    private TableHeaderCell = (props: TableHeaderRow.CellProps) => (\r\n        <TableHeaderRow.Cell\r\n            {...props}\r\n            onClick={() => this.setHighlight(props.column)}\r\n            style={props.column.name === this.state.selectedColumn ? { backgroundColor: \"#376cf2\" } : { backgroundColor: \"#fcfcfc\" }}\r\n        />\r\n    );\r\n\r\n    private readonly summaryItems: SummaryItem[] = [\r\n        { columnName: 'date', type: 'count' },\r\n        { columnName: 'amount', type: 'sum' },\r\n    ]\r\n\r\n    private readonly columns: Column[] = [\r\n        { title: 'Row', name: 'id' },\r\n        { title: 'Posted Date', name: 'date' },\r\n        { title: 'Description', name: 'description' },\r\n        { title: 'Amount', name: 'amount' },\r\n        { title: 'Fund', name: 'fund' },\r\n        { title: 'Division', name: 'division' },\r\n        { title: 'Department', name: 'department' },\r\n        { title: 'Event', name: 'event' },\r\n        { title: 'GL', name: 'gl' },\r\n    ]\r\n\r\n    private readonly tableColumnExtension: VirtualTable.ColumnExtension[] = [\r\n        { columnName: 'id', wordWrapEnabled: true },\r\n        { columnName: 'date', wordWrapEnabled: true },\r\n        { columnName: 'department', wordWrapEnabled: true },\r\n        { columnName: 'fund', wordWrapEnabled: true },\r\n        { columnName: 'division', wordWrapEnabled: true },\r\n        { columnName: 'event', wordWrapEnabled: true },\r\n        { columnName: 'gl', wordWrapEnabled: true },\r\n        { columnName: 'description', wordWrapEnabled: true },\r\n        { columnName: 'amount', wordWrapEnabled: true },\r\n    ]\r\n\r\n    private readonly groupSummaryItems: GroupSummaryItem[] = [\r\n        { columnName: 'amount', type: 'sum', showInGroupFooter: false, alignByColumn: true },\r\n        { columnName: 'amount', type: 'sum', showInGroupFooter: true },\r\n        { columnName: 'date', type: 'count', showInGroupFooter: true },\r\n    ]\r\n\r\n    private readonly groupExtension: TableGroupRow.ColumnExtension[] = [\r\n        { columnName: 'id', showWhenGrouped: true },\r\n        { columnName: 'date', showWhenGrouped: true },\r\n        { columnName: 'department', showWhenGrouped: true },\r\n        { columnName: 'fund', showWhenGrouped: true },\r\n        { columnName: 'division', showWhenGrouped: true },\r\n        { columnName: 'event', showWhenGrouped: true },\r\n        { columnName: 'gl', showWhenGrouped: true },\r\n        { columnName: 'description', showWhenGrouped: true },\r\n        { columnName: 'amount', showWhenGrouped: true },\r\n    ]\r\n\r\n    private groupingColumnExtensions: IntegratedGrouping.ColumnExtension[] = [\r\n        {\r\n            columnName: 'date', criteria: (value) => {\r\n                if (value instanceof Date) {\r\n                    const key = dateToYearMonth(value)\r\n                    return { key: key }\r\n                } else return { key: \"\" };\r\n            }\r\n        }\r\n    ]\r\n\r\n    private columnWidth: TableColumnWidthInfo[] = [\r\n        { columnName: 'id', width: 70 },\r\n        { columnName: 'date', width: 150 },\r\n        { columnName: 'fund', width: 150 },\r\n        { columnName: 'division', width: 150 },\r\n        { columnName: 'department', width: 150 },\r\n        { columnName: 'event', width: 150 },\r\n        { columnName: 'gl', width: 150 },\r\n        { columnName: 'description', width: 350 },\r\n        { columnName: 'amount', width: 150 },\r\n    ]\r\n\r\n    private readonly exporter: React.RefObject<{ exportGrid: (options?: object) => void }>\r\n\r\n    private groupWeight: Map<string, number>\r\n\r\n    private integratedSortingColumnExtensions: IntegratedSorting.ColumnExtension[] = []\r\n\r\n    constructor(props: RecordTableProps) {\r\n        super(props);\r\n        this.exporter = React.createRef()\r\n\r\n        this.state = {\r\n            sortingState: [{ columnName: 'id', direction: 'asc' }],\r\n            groupBy: undefined,\r\n            dataHeight: 110,\r\n            selectedColumn: '',\r\n            isOpening: false,\r\n            isClosing: false\r\n        }\r\n\r\n        this.groupWeight = new Map<string, number>()\r\n        if (this.state.groupBy !== undefined && this.state.groupBy !== 'date') {\r\n            this.buildGroupWeightTable()\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.dataloader.addChangeCallback(() => {\r\n            this.buildGroupWeightTable();\r\n            this.forceUpdate()\r\n        })\r\n    }\r\n\r\n    private buildGroupWeightTable() {\r\n        if (this.state.groupBy !== undefined && this.state.groupBy !== 'date') {\r\n            this.groupWeight.clear()\r\n            this.props.dataloader.getCategories(this.state.groupBy).forEach(entry => {\r\n                this.groupWeight.set(entry.text, entry.value)\r\n            })\r\n\r\n            this.integratedSortingColumnExtensions = [\r\n                {\r\n                    columnName: this.state.groupBy,\r\n                    compare: (a, b) => (this.groupWeight?.get(a) || 0) - (this.groupWeight?.get(b) || 0)\r\n                },\r\n            ]\r\n        }\r\n    }\r\n\r\n    private copyURL() {\r\n        const selBox = document.createElement('textarea');\r\n        selBox.style.position = 'fixed';\r\n        selBox.style.left = '0';\r\n        selBox.style.top = '0';\r\n        selBox.style.opacity = '0';\r\n        selBox.value = window.location.href;\r\n        document.body.appendChild(selBox);\r\n        selBox.focus();\r\n        selBox.select();\r\n        document.execCommand('copy');\r\n        document.body.removeChild(selBox);\r\n        alert('Link copied to clipboard! Sharing this link will save all applied filters.');\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<RecordTableProps>, prevState: Readonly<RecordTableState>, snapshot?: any): void {\r\n        if (this.state.groupBy != prevState.groupBy) {\r\n            this.buildGroupWeightTable()\r\n            console.log(this.state.groupBy);\r\n            this.setState({\r\n                sortingState: this.getGroupSortingState(),\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const rows = this.props.dataloader.getRecords().map((e, i) => { e.id = i; return e })\r\n        if (this.props.hidden === true)\r\n            return <Paper />\r\n        else return (\r\n            <Paper\r\n                elevation={0}\r\n                onMouseEnter={() => this.expandTable(this)}\r\n                onMouseLeave={() => this.collapseTable(this)}\r\n            >\r\n                <Grid rows={rows} columns={this.columns}>\r\n                    <SortingState\r\n                        sorting={this.state.sortingState}\r\n                    />\r\n                    <GroupingState\r\n                        grouping={this.state.groupBy !== undefined ? [{ columnName: this.state.groupBy }] : []}\r\n                    />\r\n                    <SearchState />\r\n                    <SummaryState totalItems={this.summaryItems} groupItems={this.groupSummaryItems} />\r\n\r\n                    <IntegratedGrouping columnExtensions={this.groupingColumnExtensions} />\r\n                    <IntegratedFiltering />\r\n                    <IntegratedSorting columnExtensions={this.integratedSortingColumnExtensions} />\r\n                    <IntegratedSummary />\r\n\r\n                    <DataTypeProvider for={['amount']} formatterComponent={CurrencyFormatter} />\r\n                    <DataTypeProvider for={['date']} formatterComponent={DateFormatter} />\r\n\r\n                    <VirtualTable columnExtensions={this.tableColumnExtension} height={this.state.dataHeight} />\r\n                    {/* <TableColumnResizing\r\n                        defaultColumnWidths={this.columnWidth}\r\n                    /> */}\r\n                    <TableColumnVisibility\r\n                        defaultHiddenColumnNames={['id']}\r\n                    />\r\n                    <TableHeaderRow cellComponent={this.TableHeaderCell} />\r\n                    <TableGroupRow\r\n                        contentComponent={DateGroupFormatter}\r\n                        columnExtensions={this.groupExtension}\r\n                    />\r\n                    <TableSummaryRow />\r\n\r\n                    <Toolbar />\r\n                    <Link color=\"textSecondary\" href=\"https://forms.google.com\" style={{padding: 20}}>\r\n                        <ContactSupportIcon/> Comments\r\n                    </Link>\r\n                    <Link color=\"textSecondary\" href=\"mailto:vtran@asucla.ucla.edu\" style={{padding: 20}}>\r\n                        <EmailIcon/> Professional Accountant\r\n                    </Link>\r\n                    <Link color=\"textSecondary\" href=\"mailto:usacouncil@asucla.ucla.edu\" style={{padding: 20}}>\r\n                        <EmailIcon/> USAC Council\r\n                    </Link>\r\n                    <Button color=\"inherit\" onClick={this.copyURL} aria-label=\"share\">\r\n                        Share\r\n                    </Button>\r\n                    <GroupingPanel showSortingControls emptyMessageComponent={() => <span />} />\r\n                    <ExportPanel startExport={(options) => this.exporter.current?.exportGrid(options)} />\r\n                    <SearchPanel />\r\n                </Grid>\r\n                <GridExporter\r\n                    ref={this.exporter}\r\n                    columns={this.columns}\r\n                    rows={rows}\r\n                    onSave={(workbook) => this.onSave(workbook)}\r\n                />\r\n            </Paper>\r\n        )\r\n    }\r\n\r\n    peekTable(table : RecordTable) : void {\r\n        if (!table.state.isOpening) {\r\n            table.setState({ isOpening: true })\r\n            var peekTimer = setInterval(() => {\r\n                var incHeight = table.state.dataHeight + 70\r\n                table.setState({dataHeight: incHeight})\r\n                if (table.state.dataHeight >= 200) {\r\n                    table.setState({ \r\n                        dataHeight: 200,\r\n                        isOpening: false\r\n                    })\r\n                    clearInterval(peekTimer)\r\n                } else if (table.state.isClosing) {\r\n                    table.setState({ isOpening: false })\r\n                    clearInterval(peekTimer)\r\n                }\r\n            }, 10)\r\n        }\r\n    }\r\n\r\n    expandTable(table : RecordTable) : void {\r\n        if (!table.state.isOpening) {\r\n            table.setState({ isOpening: true })\r\n            var expandTimer = setInterval(() => {\r\n                var incHeight = table.state.dataHeight + 70\r\n                table.setState({dataHeight: incHeight})\r\n                if (table.state.dataHeight >= 500) {\r\n                    table.setState({ \r\n                        dataHeight: 500,\r\n                        isOpening: false\r\n                    })\r\n                    clearInterval(expandTimer)\r\n                } else if (table.state.isClosing) {\r\n                    table.setState({ isOpening: false })\r\n                    clearInterval(expandTimer)\r\n                }\r\n            }, 10)\r\n        }\r\n    }\r\n\r\n    collapseTable(table : RecordTable) : void {\r\n        if (!table.state.isClosing) {\r\n            table.setState({ isClosing: true })\r\n            var collapseTimer = setInterval(() => {\r\n                var decHeight = table.state.dataHeight - 70\r\n                table.setState({dataHeight: decHeight})\r\n                if (table.state.dataHeight <= 110) {\r\n                    table.setState({ \r\n                        dataHeight: 110,\r\n                        isClosing: false\r\n                    })\r\n                    clearInterval(collapseTimer)\r\n                }\r\n            }, 10)\r\n        }\r\n    }\r\n\r\n    private setHighlight(sorts: Column) {\r\n        this.setState({\r\n            selectedColumn: sorts.name\r\n        })\r\n        this.setSorting(sorts)\r\n    }\r\n\r\n    private setSorting(sorts: Column) {\r\n        if (isOfTypeTabs(sorts.name)) {\r\n            this.props.onChange(sorts.name);\r\n        } else if (sorts.name == 'description') {\r\n            this.props.onChange('keyword');\r\n        }\r\n    }\r\n\r\n    private onSave(workbook: Workbook) {\r\n        workbook.xlsx.writeBuffer().then((buffer) => {\r\n            saveAs(new Blob([buffer], { type: 'application/octet-stream' }),\r\n                `Transactions-${Datasets.getInstance().getCurrentDatasetName()}.xlsx`);\r\n        });\r\n    }\r\n\r\n    private getGroupSortingState(category: string | undefined = this.state.groupBy): Sorting[] {\r\n        if (category === 'date')\r\n            return [{ columnName: 'date', direction: \"asc\" }]\r\n        else if (category === undefined || category === 'description')\r\n            return [{ columnName: 'id', direction: 'asc' }]\r\n        else return [{ columnName: category, direction: 'desc' }]\r\n    }\r\n\r\n}\r\n","/**\r\n * Created by TylerLiu on 2018/12/23.\r\n */\r\nimport React, {Component} from 'react';\r\nimport {Breadcrumbs, Tooltip, Typography, Container} from \"@material-ui/core\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport {KMFormat} from \"../util\";\r\nimport {DataLoaderProps} from \"../models/DataLoader\";\r\n\r\nexport default class KeywordCrumb extends Component<DataLoaderProps> {\r\n\r\n    private getColor(index : number): string {\r\n        switch(index % 6) {\r\n            case 0: return \"DeepSkyBlue\"\r\n            case 1: return \"LightBlue\"\r\n            case 2: return \"DarkTurquoise\"\r\n            case 3: return \"Cyan\"\r\n            case 4: return \"CornflowerBlue\"\r\n            case 5: return \"LightSkyBlue\"\r\n            default: return \"DeepSkyBlue\"\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.dataloader.addChangeCallback(() => this.forceUpdate())\r\n    }\r\n\r\n    render() {\r\n        let list = this.props.dataloader.getFilters()\r\n        return (\r\n            <Breadcrumbs separator=\">\" style={this.props.style}>\r\n                <Typography>Fliters Applied:</Typography>\r\n                <Tooltip title=\"Remove All Filters\">\r\n                    <Link key={-1} color=\"textPrimary\"\r\n                      onClick={() => this.props.dataloader.sliceFilter(0)}>\r\n                        <Typography align=\"center\">\r\n                            <div style={{backgroundColor: \"DodgerBlue\"}}>\r\n                                year: {this.props.dataloader.getDataset()}-{(Number(this.props.dataloader.getDataset())+1).toString()}\r\n                                <br/>\r\n                                ${KMFormat(this.props.dataloader.getDatasetTotal())}\r\n                            </div>\r\n                        </Typography>\r\n                    </Link>\r\n                </Tooltip>\r\n                {list.slice(0, -1).map((filter, index) => (\r\n                    <Tooltip title=\"View This Filter\">\r\n                        <Link key={index} color=\"textSecondary\" align=\"center\"\r\n                          onClick={() => this.props.dataloader.sliceFilter(index + 1)}>\r\n                            <Typography align=\"center\">\r\n                                <div style={{backgroundColor: this.getColor(index)}}>\r\n                                    {filter.category}: {filter.name}\r\n                                    <br/>\r\n                                    ${KMFormat(filter.amount)}\r\n                                </div>\r\n                            </Typography>\r\n                        </Link>\r\n                    </Tooltip>\r\n                ))}\r\n                {list.length > 0 ? (<div style={{backgroundColor: this.getColor(list.length)}}>\r\n                    <Typography color=\"textPrimary\" align=\"center\" key={list.length}>     \r\n                        {list[list.length - 1].category}: {list[list.length - 1].name}<br/>${KMFormat(list[list.length - 1].amount)}\r\n                    </Typography></div>) : null}\r\n            </Breadcrumbs>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from \"react\";\r\nimport {Category, DataLoaderProps, WordEntry} from \"../models/DataLoader\";\r\nimport {Cell, Pie, PieChart, ResponsiveContainer, Tooltip} from 'recharts';\r\nimport {KMFormat} from \"../util\";\r\n\r\ninterface CategoryPieProps extends DataLoaderProps {\r\n    category: Category\r\n    hidden?: boolean\r\n}\r\n\r\n/**\r\n * Component for a single layer pie Chart.\r\n */\r\nexport default class CategoryPie extends Component<CategoryPieProps> {\r\n\r\n    private otherSelected : Boolean = false\r\n\r\n    componentDidMount(): void {\r\n        this.props.dataloader.addChangeCallback(() => this.forceUpdate())\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const data = this.otherSelected ? this.loadOtherSlices() : this.loadMainSlices()\r\n        this.otherSelected = false\r\n        const lastFilter = this.props.dataloader.getLastFilter()\r\n        const selected = lastFilter == null ? undefined :\r\n            (lastFilter.category === this.props.category ? lastFilter.name : undefined)\r\n\r\n        return (\r\n            <div style={{height: '80vh'}} hidden={this.props.hidden || false}>\r\n                {(this.props.hidden || false) ? null : (\r\n                    <ResponsiveContainer height=\"100%\" width=\"100%\">\r\n                        <PieChart>\r\n                            <Pie data={data} dataKey=\"value\" nameKey=\"text\"\r\n                                 labelLine={false}\r\n                                 onClick={(e) => this.clickSlice(e)}>\r\n                                {\r\n                                    data.map((entry, index) => (\r\n                                        <Cell key={`cell-${index}`} fill={this.getColor(selected === entry.text)}/>\r\n                                    ))\r\n                                }\r\n                            </Pie>\r\n                            <Tooltip formatter={(value) => \"$\" + KMFormat(value as number)}\r\n                                     contentStyle={{padding: '0 5px', margin: 0, borderRadius: 5}}/>\r\n                        </PieChart>\r\n                    </ResponsiveContainer>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    private clickSlice(e : any) {\r\n        if (e.text === \"Other\") {\r\n            this.otherSelected = true\r\n            this.forceUpdate()\r\n        }\r\n        else\r\n            this.props.dataloader.addCategoryFilter(this.props.category, e.text)\r\n    }\r\n\r\n    private loadMainSlices() : readonly WordEntry[] {\r\n        var data = this.props.dataloader.getCategories(this.props.category)\r\n\r\n        let totalValue = 0\r\n        data.forEach((entry) => {\r\n            totalValue += entry.value\r\n        })\r\n\r\n        const maxPrice = totalValue * 0.02\r\n        var otherPrice = 0\r\n        for(var i = data.length -1; i >= 0 ; i--) {\r\n            if(data[i].value < maxPrice) {\r\n                data.splice(i, 1)\r\n                otherPrice += data[i].value\r\n            }\r\n        }\r\n\r\n        var otherSlice : WordEntry = {text: \"Other\", value: otherPrice}\r\n        data.push(otherSlice)\r\n\r\n        return data\r\n    }\r\n\r\n    private loadOtherSlices() : readonly WordEntry[] {\r\n        var data = this.props.dataloader.getCategories(this.props.category)\r\n\r\n        let totalValue = 0\r\n        data.forEach((entry) => {\r\n            totalValue += entry.value\r\n        })\r\n\r\n        const maxPrice = totalValue * 0.02\r\n        for(var i = data.length -1; i >= 0 ; i--)\r\n            if(data[i].value >= maxPrice)\r\n                data.splice(i, 1)\r\n        \r\n        return data\r\n    }\r\n\r\n    getColor(selected: boolean): string {\r\n        if (selected)\r\n            return \"#f44336\"\r\n        switch (this.props.category) {\r\n            case \"fund\":\r\n                return \"#8bc34a\"\r\n            case \"division\":\r\n                return \"#ab47bc\"\r\n            case \"department\":\r\n                return \"#26c6da\"\r\n            case \"gl\":\r\n                return \"#26a69a\"\r\n            case \"event\":\r\n                return \"#ef6c00\"\r\n        }\r\n    }\r\n}\r\n","import React, {Component} from \"react\";\r\nimport {AmountBin, DataLoaderProps} from \"../models/DataLoader\";\r\nimport {Bar, BarChart, CartesianGrid, Cell, Label, ReferenceLine, ResponsiveContainer, XAxis, YAxis} from 'recharts';\r\nimport {KMFormat} from \"../util\";\r\nimport {Mark, Slider} from \"@material-ui/core\";\r\n\r\ninterface SliderProps extends DataLoaderProps {\r\n    hidden?: boolean\r\n}\r\n\r\ninterface SliderState {\r\n    value: [number, number]\r\n    data: AmountBin[]\r\n}\r\n\r\nexport default class AmountSlider extends Component<SliderProps, SliderState> {\r\n\r\n    constructor(props: SliderProps) {\r\n        super(props);\r\n        this.state = {\r\n            value: [0, 100],\r\n            data: []\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount(): void {\r\n        this.props.dataloader.addChangeCallback(() =>\r\n            this.updateState()\r\n        )\r\n        this.updateState()\r\n    }\r\n\r\n    updateState() {\r\n        const {data, domain} = this.props.dataloader.getAmountBins(40)\r\n        this.setState({\r\n            data: data,\r\n            value: domain,\r\n        })\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const data = this.state.data\r\n        const domain: [number, number] = data.length === 0 ? [0, 1] : [data[0].low, data[data.length - 1].high]\r\n        return (\r\n            <div style={{\r\n                paddingLeft: '5%', paddingRight: `calc(5% + ${AmountSlider.getYAxisWidth()}px)`,\r\n                height: '80vh', margin: \"auto\"\r\n            }} hidden={this.props.hidden || false}>\r\n                {(this.props.hidden || false) ? null : (\r\n                    <ResponsiveContainer height=\"90%\" width=\"100%\">\r\n                        <BarChart data={data} barCategoryGap={0} margin={{bottom: 0, left: 0, right: 0}}>\r\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                            <XAxis dataKey=\"name\" domain={domain} hide orientation=\"top\"/>\r\n                            <YAxis domain={[0, 'dataMax']} tickFormatter={(v) => '$' + KMFormat(v)}\r\n                                   width={AmountSlider.getYAxisWidth()}>\r\n                                <Label angle={270} position=\"insideLeft\" style={{textAnchor: 'middle'}}>\r\n                                    Expense Sum in Transaction Amount Bin($)\r\n                                </Label>\r\n                            </YAxis>\r\n                            <ReferenceLine y={0} label=\"\" stroke=\"black\"/>\r\n                            <Bar dataKey={\"value\"} fill={this.getColor()}>\r\n                                {data.map((value, index) => (\r\n                                    <Cell key={`cell-${index}`} fill={this.getColor()}\r\n                                          opacity={this.getOpacity(value.low, value.high)}/>\r\n                                ))}\r\n                            </Bar>\r\n                        </BarChart>\r\n                    </ResponsiveContainer>\r\n                )}\r\n                <div style={{paddingLeft: AmountSlider.getYAxisWidth()}}>\r\n                    <Slider value={this.state.value}\r\n                            min={domain[0]} max={domain[1]}\r\n                            onChange={this.onRangeChange.bind(this)}\r\n                            onChangeCommitted={this.onRangeChangeCommitted.bind(this)}\r\n                            valueLabelDisplay=\"auto\"\r\n                            valueLabelFormat={(v) => '$' + KMFormat(v)}\r\n                            marks={this.getMarks(domain)}\r\n                            aria-labelledby=\"Amount-slider\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    static getViewportWidth() {\r\n        return Math.max(document.documentElement.clientWidth, window.innerWidth || 0)\r\n    }\r\n\r\n    static getYAxisWidth() {\r\n        return AmountSlider.getViewportWidth() < 480 ? 0 : 72\r\n    }\r\n\r\n    onRangeChange(event: any, newValues: number | number[]) {\r\n        this.setState({value: newValues as [number, number]})\r\n    }\r\n\r\n    onRangeChangeCommitted(event: any, newValues: number | number[]) {\r\n        const nVal = newValues as [number, number]\r\n        this.props.dataloader.addAmountFilter(nVal[0], nVal[1])\r\n    }\r\n\r\n    getColor(): string {\r\n        return \"#29b6f6\"\r\n    }\r\n\r\n    getOpacity(low: number, high: number): number {\r\n        const proportion = Math.max(0, Math.min(this.state.value[1], high) - Math.max(this.state.value[0], low)) / (high - low)\r\n        return 0.3 + 0.7 * proportion\r\n    }\r\n\r\n    getMarkPoint(x: number): Mark {\r\n        return {value: x, label: '$' + KMFormat(x)}\r\n    }\r\n\r\n    getMarks(domain: [number, number]): Mark[] {\r\n        const total_width = AmountSlider.getViewportWidth() * 0.8 - AmountSlider.getYAxisWidth()\r\n        const min_diff = 60 / total_width * (domain[1] - domain[0])\r\n        let marks: Mark[] = domain.map(e => this.getMarkPoint(e))\r\n        if (domain[0] < 0 && domain[1] > 0) {\r\n            marks = marks.filter(e => Math.abs(e.value) >= min_diff)\r\n            marks.push(this.getMarkPoint(0))\r\n        }\r\n\r\n        const step_size = Math.max((domain[1] - domain[0]) / 10, min_diff)\r\n        for (let i = 1; domain[0] + i * step_size <= domain[1] - min_diff; i++) {\r\n            const val = Number.parseFloat((domain[0] + i * step_size).toPrecision(2))\r\n            if (Math.abs(val) < 0.9 * step_size) continue\r\n            marks.push(this.getMarkPoint(val))\r\n        }\r\n\r\n        return marks\r\n    }\r\n}\r\n","import React, {Component} from \"react\";\r\nimport {DataLoaderProps, WordEntry} from \"../models/DataLoader\";\r\nimport {\r\n    Area,\r\n    AreaChart,\r\n    CartesianGrid,\r\n    Label,\r\n    ReferenceLine,\r\n    ResponsiveContainer,\r\n    Tooltip,\r\n    XAxis,\r\n    YAxis\r\n} from 'recharts';\r\nimport {KMFormat} from \"../util\";\r\nimport {Mark, Slider} from \"@material-ui/core\";\r\n\r\ninterface SliderProps extends DataLoaderProps {\r\n    hidden?: boolean\r\n}\r\n\r\ninterface SliderState {\r\n    value: [number, number]\r\n    domain: [string, string]\r\n    data: WordEntry[]\r\n}\r\n\r\nconst month_name = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\n\r\nexport default class DateSlider extends Component<SliderProps, SliderState> {\r\n\r\n    constructor(props: SliderProps) {\r\n        super(props);\r\n        this.state = {\r\n            value: [0, 1],\r\n            domain: ['0000-01', '9999-12'],\r\n            data: []\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount(): void {\r\n        this.props.dataloader.addChangeCallback(() =>\r\n            this.updateState()\r\n        )\r\n        this.updateState()\r\n    }\r\n\r\n    updateState() {\r\n        const {data, domain} = this.props.dataloader.getMonthBins()\r\n        const names = data.map(e => e.text)\r\n        this.setState({\r\n            data: data,\r\n            value: [names.indexOf(domain[0]) + 0.5, names.indexOf(domain[1]) + 0.5],\r\n        })\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const data = this.state.data\r\n        return (\r\n            <div style={{\r\n                paddingLeft: '5%', paddingRight: `calc(5% + ${DateSlider.getYAxisWidth()}px)`,\r\n                height: '80vh', margin: \"auto\"\r\n            }} hidden={this.props.hidden || false}>\r\n                {(this.props.hidden || false) ? null : (\r\n                    <ResponsiveContainer height=\"90%\" width=\"100%\">\r\n                        <AreaChart data={data} barCategoryGap={0} margin={{bottom: 0, left: 0, right: 0}}>\r\n                            <defs>\r\n                                <linearGradient id=\"fillGrad\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                    <stop offset=\"5%\" stopColor={this.getColor()} stopOpacity={0.9}/>\r\n                                    <stop offset=\"95%\" stopColor={this.getColor()} stopOpacity={0.3}/>\r\n                                </linearGradient>\r\n                                <linearGradient id=\"fillGrad2\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\">\r\n                                    <stop offset={this.getLeftPoint() - 0.01} stopColor={this.getColor()}\r\n                                          stopOpacity={0.2}/>\r\n                                    <stop offset={this.getLeftPoint() + 0.01} stopColor={this.getColor()}\r\n                                          stopOpacity={0.6}/>\r\n                                    <stop offset={this.getRightPoint() - 0.01} stopColor={this.getColor()}\r\n                                          stopOpacity={0.6}/>\r\n                                    <stop offset={this.getRightPoint() + 0.01} stopColor={this.getColor()}\r\n                                          stopOpacity={0.2}/>\r\n                                </linearGradient>\r\n                            </defs>\r\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                            <XAxis dataKey=\"text\" hide orientation=\"top\" scale=\"band\"/>\r\n                            <YAxis tickFormatter={(v) => '$' + KMFormat(v)} width={DateSlider.getYAxisWidth()}>\r\n                                <Label angle={270} position=\"insideLeft\" style={{textAnchor: 'middle'}}>\r\n                                    Monthly Expense($)\r\n                                </Label>\r\n                            </YAxis>\r\n                            <Tooltip formatter={(value) => \"$\" + KMFormat(value as number)}\r\n                                     contentStyle={{display: 'none'}}/>\r\n                            <ReferenceLine y={0} label=\"\" stroke=\"black\"/>\r\n                            <Area type=\"monotone\" dataKey=\"value\" stroke={this.getColor()} fillOpacity={1}\r\n                                  fill=\"url(#fillGrad2)\"/>\r\n                        </AreaChart>\r\n                    </ResponsiveContainer>\r\n                )}\r\n                <div style={{paddingLeft: DateSlider.getYAxisWidth()}}>\r\n                    <Slider value={this.state.value}\r\n                            min={0} max={this.state.data.length}\r\n                            onChange={this.onRangeChange.bind(this)}\r\n                            onChangeCommitted={this.onRangeChangeCommitted.bind(this)}\r\n                            valueLabelDisplay=\"off\"\r\n                            marks={this.getMarks(this.state.data)}\r\n                            step={null}\r\n                            aria-labelledby=\"Date-slider\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    static getViewportWidth() {\r\n        return Math.max(document.documentElement.clientWidth, window.innerWidth || 0)\r\n    }\r\n\r\n    static getYAxisWidth() {\r\n        return this.getViewportWidth() < 480 ? 0 : 72\r\n    }\r\n\r\n    onRangeChange(event: any, newValues: number | number[]) {\r\n        this.setState({value: newValues as [number, number]})\r\n    }\r\n\r\n    onRangeChangeCommitted(event: any, newValues: number | number[]) {\r\n        const nVal = (newValues as [number, number]).map(e => Math.round(e - 0.5))\r\n        const data = this.state.data\r\n        this.props.dataloader.addMonthFilter(data[nVal[0]].text, data[nVal[1]].text)\r\n    }\r\n\r\n    getColor(): string {\r\n        return \"#009688\"\r\n    }\r\n\r\n    getOpacity(index: number): number {\r\n        index += 0.5\r\n        return this.state.value[0] <= index && index <= this.state.value[1] ? 1 : 0.3\r\n    }\r\n\r\n    getLeftPoint(): number {\r\n        return (this.state.value[0] - 1) / (this.state.data.length - 1)\r\n    }\r\n\r\n    getRightPoint(): number {\r\n        return (this.state.value[1]) / (this.state.data.length - 1)\r\n    }\r\n\r\n    getMarks(data: WordEntry[]): Mark[] {\r\n        let marks = data.map((e, i) => ({value: i + 0.5, label: e.text}))\r\n        let years: Set<String> = new Set<String>();\r\n        marks.forEach((e, i) => {\r\n            const d = e.label.split('-')\r\n            if (years.has(d[0])) marks[i].label = month_name[Number.parseInt(d[1]) - 1]\r\n            else {\r\n                years.add(d[0])\r\n                marks[i].label = month_name[Number.parseInt(d[1]) - 1] + ` ${d[0]}`;\r\n            }\r\n        })\r\n        return marks\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport {Category} from \"../models/DataLoader\";\r\n\r\nexport interface ExpProps {\r\n    category: Category | 'date' | 'amount' | 'keyword' | 'table' | 'footer';\r\n}\r\n\r\nexport default function ExplanationText(props: ExpProps) {\r\n\r\n    switch (props.category) {\r\n        case 'date':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    Date transaction entered. (purchases occur beforehand)\r\n                </Typography>\r\n            )\r\n        case 'fund':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    Source of money (includes student fees and other income)\r\n                </Typography>\r\n            )\r\n        case 'division':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    Allocates money to departments.\r\n                </Typography>\r\n            )\r\n        case 'department':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    Spends money (includes student groups)\r\n                </Typography>\r\n            )\r\n        case 'gl':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    Rules for how each $ can be spent.\r\n                </Typography>\r\n            )\r\n        case 'event':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    Occasion/reason for transaction. ( generic label is “Commission/Dept related”)\r\n                </Typography>\r\n            )\r\n        case 'keyword':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    Spender documents where money is spent.\r\n                    Accountant abreviates. Wordcloud deabreviates.\r\n                    Font size of word represents total $ for all descriptions that include word.\r\n                </Typography>\r\n            )\r\n        case 'amount':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    Size of each transaction. (may include several purchases)\r\n                </Typography>\r\n            )\r\n        case 'table':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    Above is the raw transaction table of the Undergraduate Student Association.\r\n                    Click on a column to visualize it.\r\n                    <br/>\r\n                    Low on time? Most important is the descriptions column. Everything else is administrative.\r\n                </Typography>\r\n            )\r\n        case 'footer':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    We had to de-abbreviate them, but sometimes did that incorrectly,\r\n                    so please comment at the bottom of the page if you see that.\r\n                    <br/>\r\n                    These abbreviations had to be autocorrected so they can be categorized in the visual.\r\n                    If autocorrect groups transactions incorrectly, please comment at the bottom of the page.\r\n                </Typography>\r\n            )\r\n        default:\r\n            return <div/>\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport WordCloud from \"./WordCloud\";\r\nimport RecordTable from \"./RecordTable\";\r\nimport KeywordCrumb from \"./KeywordCrumb\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport DataLoader, {Category, isOfTypeCategory} from \"../models/DataLoader\";\r\nimport CategoryPie from \"./CategoryPie\";\r\nimport {Container, Tab, Tabs, withStyles, Typography} from \"@material-ui/core\";\r\nimport AmountSlider from \"./AmountSlider\";\r\nimport QueryBuilder from \"../models/QueryBuilder\";\r\nimport DateSlider from \"./DateSlider\";\r\nimport ExplanationText from \"./ExplanationText\";\r\n\r\nexport type TabTypes = Category | 'table' | 'keyword' | \"amount\" | \"date\";\r\n\r\ninterface DatasetState {\r\n    value: TabTypes;\r\n}\r\n\r\ninterface DatasetProps {\r\n    loader: DataLoader\r\n}\r\n\r\nexport function isOfTypeTabs (input: string): input is TabTypes {\r\n    return isOfTypeCategory(input) || ['table' , 'keyword' , \"amount\" , \"date\"].includes(input);\r\n}\r\n\r\ninterface StyledTabProps{\r\n    label?: React.ReactNode;\r\n    value?: any;\r\n}\r\n\r\nconst NarrowTab = withStyles((theme) => ({\r\n    root: {\r\n        minWidth: 72,\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n    selected: {},\r\n}))((props:StyledTabProps) => <Tab {...props} />);\r\n\r\nexport default class DatasetView extends React.Component<DatasetProps, DatasetState> {\r\n    private value: TabTypes = 'keyword'\r\n\r\n    constructor(props: DatasetProps) {\r\n        super(props);\r\n\r\n        this.value = 'keyword'\r\n        // this.parseQuery(QueryBuilder.getInstance().getQuery())\r\n\r\n        this.state = {\r\n            value: this.value,\r\n        }\r\n\r\n        QueryBuilder.getInstance().addGenerator(this.generateQuery.bind(this), 1)\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.props.loader.addChangeCallback(() => this.forceUpdate())\r\n    }\r\n\r\n    parseQuery(query: string): TabTypes {\r\n        if (query[0] === '?') query = query.slice(1)\r\n        const res = query.split('&').filter((e) => e.startsWith('tab='))\r\n        if (res.length === 0) return 'table'\r\n        let s = res[0].substr(4)\r\n        if (isOfTypeTabs(s)) {\r\n            return s\r\n        } else return 'table'\r\n    }\r\n\r\n    generateQuery(): string {\r\n        return 'tab=' + this.value\r\n    }\r\n\r\n    onTabChange(value: string) {\r\n        this.value = isOfTypeTabs(value) ? value : 'table'\r\n        this.setState({value: this.value})\r\n        QueryBuilder.getInstance().update()\r\n    }\r\n\r\n    render() {\r\n        const loader = this.props.loader\r\n        const tableElement = <RecordTable dataloader={loader} onChange={this.onTabChange.bind(this)} style={{\r\n            zIndex: 2,\r\n            backgroundColor: \"lightblue\",\r\n        }}/>\r\n        return (\r\n            <>\r\n                {tableElement}\r\n                <Paper elevation={2} style={{\r\n                    position: \"absolute\",\r\n                    zIndex: -1,\r\n                    bottom: 0,\r\n                    width: 1230\r\n                }}>\r\n                    <ExplanationText category={this.state.value}/>\r\n                    <WordCloud hidden={this.state.value !== 'keyword'} dataloader={loader}/>\r\n                    <CategoryPie hidden={!isOfTypeCategory(this.state.value)}\r\n                                category={isOfTypeCategory(this.state.value) ? this.state.value : \"fund\"} dataloader={loader}/>\r\n                    <AmountSlider hidden={this.state.value !== \"amount\"} dataloader={loader}/>\r\n                    <DateSlider hidden={this.state.value !== 'date'} dataloader={loader}/>\r\n                </Paper>\r\n                <KeywordCrumb style={{position: \"absolute\", bottom: 0}} dataloader={loader}/>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TopBar from \"./components/TopBar\";\r\nimport DatasetView from \"./components/DatasetView\"\r\nimport DataLoader from \"./models/DataLoader\";\r\nimport Datasets from \"./models/Datasets\";\r\nimport {Container, CssBaseline, Link, Paper, Typography} from \"@material-ui/core\";\r\nimport ContactSupportIcon from '@material-ui/icons/ContactSupport';\r\nimport Footer from \"./components/Footer\";\r\nimport RecordTable from './components/RecordTable';\r\nimport YearSelect from './components/YearSelect';\r\n\r\ninterface AppState {\r\n    loader: DataLoader\r\n}\r\n\r\nclass App extends React.Component<{}, AppState> {\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = {\r\n            loader: Datasets.getInstance().getDataLoader()\r\n        }\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        Datasets.getInstance().addChangeCallback(() => {\r\n            this.setState({\r\n                loader: Datasets.getInstance().getDataLoader()\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* <YearSelect /> */}\r\n                <CssBaseline />\r\n                <Container maxWidth=\"lg\">\r\n                    <DatasetView loader={this.state.loader} />\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
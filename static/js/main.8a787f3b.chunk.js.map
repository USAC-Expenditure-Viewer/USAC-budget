{"version":3,"sources":["models/QueryBuilder.ts","util.ts","models/DataLoader.ts","models/Datasets.ts","components/Instructions.tsx","components/TopBar.tsx","components/WordCloud.tsx","components/RecordTable.tsx","components/KeywordCrumb.tsx","components/CategoryPie.tsx","components/AmountSlider.tsx","components/DateSlider.tsx","components/DatasetView.tsx","components/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["QueryBuilder","queryString","generators","Map","this","window","location","search","replace","instance","callback","index","set","query","values","map","c","join","path","href","includes","substr","indexOf","history","pushState","KMFormat","x","Number","isNaN","suffix","Math","abs","toPrecision","KMFToNum","str","unit","parseFloat","DataLoader","dataset","data","filters","dataChangeCallbacks","total_amount","setDataset","sliceFilter","loadDataset","Papa","pathname","download","header","complete","results","e","date","Date","amount","words","__parsed_extra","filter","onLoad","reduce","prev","curr","parseQuery","getInstance","getQuery","addGenerator","generateQueryString","bind","listChangeCallback","slice","callbacks","split","forEach","entry","sign_location","q","v","addKeywordFilter","addCategoryFilter","atob","valuesa","addAmountFilter","valuesd","addMonthFilter","console","log","category","name","btoa","update","push","length","words_set","getRecords","row","w","get","chosen_words","words_list","entries","word","val","text","value","sort","a","b","records","getLastFilter","category_set","cate_name","category_list","numBin","domain","previousValue","currentValue","min","max","MAX_VALUE","MIN_VALUE","allMin","allMax","bins","bin_size","i","low","high","month_string","getFullYear","padStart","getMonth","localeCompare","month_num","s","parseInt","next_month","remaining_length","word_index","new_index","Datasets","datasets","currentDataset","dataLoader","ready","parseDataset","getQueryString","fetch","then","res","json","getDatasetTitle","startsWith","match","toString","InstructionBackProp","props","Backdrop","style","zIndex","color","Paper","backgroundColor","width","height","Typography","variant","alignItems","padding","borderRadius","margin","TopBar","state","drawer","backdropOn","addChangeCallback","forceUpdate","toggleDrawer","setState","toggleBackdrop","dataset_list","getDatasets","AppBar","position","Toolbar","Tooltip","title","IconButton","edge","aria-label","onClick","flexGrow","getCurrentDatasetName","Button","open","Drawer","anchor","onClose","List","ListItem","button","key","setCurrentDataset","ListItemIcon","ListItemText","primary","React","Component","WordCloud","getWordTooltip","onWordClick","getCallback","onWordMouseOut","onWordMouseOver","options","fontFamily","fontSizes","fontStyle","fontWeight","scale","deterministic","rotations","rotationAngles","transitionDuration","dataloader","setWords","hidden","getWordList","event","isActive","select","target","on","transition","attr","month_name","CurrencyFormatter","toLocaleString","currency","DateFormatter","toDateString","DateGroupFormatter","column","year","month","RecordTable","TableHeaderCell","Cell","setSorting","groupBy","summaryItems","columnName","type","columns","tableColumnExtension","wordWrapEnabled","align","groupSummaryItems","showInGroupFooter","alignByColumn","groupExtension","showWhenGrouped","groupingColumnExtensions","criteria","dateToYearMonth","columnWidth","exporter","groupWeight","integratedSortingColumnExtensions","createRef","sortingState","getGroupSortingState","lastGroupBy","undefined","buildGroupWeightTable","clear","getCategories","compare","prevProps","prevState","snapshot","rows","id","sorting","grouping","totalItems","groupItems","columnExtensions","for","formatterComponent","defaultColumnWidths","defaultHiddenColumnNames","cellComponent","contentComponent","showSortingControls","emptyMessageComponent","startExport","current","exportGrid","ref","onSave","workbook","sorts","direction","onChange","xlsx","writeBuffer","buffer","saveAs","Blob","KeywordCrumb","list","getFilters","Breadcrumbs","separator","Link","getDatasetTotal","CategoryPie","lastFilter","selected","dataKey","nameKey","labelLine","fill","getColor","formatter","contentStyle","AmountSlider","updateState","getAmountBins","paddingLeft","paddingRight","getYAxisWidth","barCategoryGap","bottom","left","right","strokeDasharray","hide","orientation","tickFormatter","angle","textAnchor","y","label","stroke","opacity","getOpacity","Slider","onRangeChange","onChangeCommitted","onRangeChangeCommitted","valueLabelDisplay","valueLabelFormat","marks","getMarks","aria-labelledby","newValues","nVal","min_diff","getViewportWidth","getMarkPoint","step_size","document","documentElement","clientWidth","innerWidth","DateSlider","getMonthBins","names","x1","y1","x2","y2","offset","stopColor","stopOpacity","getLeftPoint","getRightPoint","display","fillOpacity","step","round","years","Set","d","has","add","DatasetView","generateQuery","loader","onValueChange","Tabs","indicatorColor","textColor","Tab","elevation","getCategory","columnToTabID","Footer","App","getDataLoader","CssBaseline","Container","maxWidth","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8a787f3b.chunk.js","sourcesContent":["export default class QueryBuilder {\n\n    private static instance: QueryBuilder | null = null\n    private queryString: string\n    private generators: Map<number, () => string> = new Map()\n\n    static getInstance() {\n        if (this.instance === null) this.instance = new QueryBuilder()\n        return this.instance\n    }\n\n\n    private constructor() {\n        this.queryString = window.location.search.replace('?', '')\n    }\n\n    getQuery() {\n        return this.queryString\n    }\n\n    addGenerator(callback: () => string, index: number) {\n        this.generators.set(index, callback)\n    }\n\n    update() {\n        let strings: string[] = [...this.generators.values()].map((c) => c())\n        const query = strings.join('&')\n\n        let path = window.location.href\n        if (path.includes('?')) path = path.substr(0, path.indexOf('?'))\n        window.history.pushState({path: path + '?' + query}, '', path + '?' + query);\n    }\n}\n","export function commaFormat(x: number): string {\n    if (Number.isNaN(x)) return \"\"\n    let x_str: string = x.toFixed(2)\n    let parts: string[] = x_str.split(\".\")\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n    return parts.join(\".\");\n}\n\nexport function KMFormat(x: number): string {\n    if (Number.isNaN(x)) return \"\"\n    let suffix = \"\";\n    if (Math.abs(x) >= 1000000000) {\n        suffix = \"B\"\n        x /= 1000000000;\n    } else if (Math.abs(x) >= 1000000) {\n        suffix = \"M\"\n        x /= 1000000;\n    } else if (Math.abs(x) >= 1000) {\n        suffix = \"K\"\n        x /= 1000;\n    }\n    return x.toPrecision(3) + suffix;\n}\n\nexport function KMFToNum(str: string): number {\n    let unit = 1\n    if (str.includes('K')) {\n        unit = 1000\n        str = str.replace('K', '')\n    }\n    if (str.includes('M')) {\n        unit = 1000000\n        str = str.replace('M', '')\n    }\n    if (str.includes('B')) {\n        str = str.replace('B', '')\n        unit = 1000000000\n    }\n    return Number.parseFloat(str) * unit\n}\n","import {KMFormat, KMFToNum} from \"../util\";\nimport * as Papa from 'papaparse';\nimport QueryBuilder from \"./QueryBuilder\";\n\ninterface DataEntry {\n    date: Date,\n    fund: string,\n    division: string,\n    department: string,\n    gl: string,\n    event: string,\n    description: string,\n    amount: number,\n    words: string[],\n    id?: number\n}\n\nexport interface AmountBin {\n    low: number\n    high: number\n    value: number\n    name: string\n}\n\nexport type Category = 'fund' | 'division' | 'department' | 'gl' | 'event'\n\nexport interface WordEntry {\n    text: string,\n    value: number\n}\n\ninterface Filter {\n    category: string,\n    name: string,\n    index: DataEntry[],\n    amount: number,\n}\n\nexport interface DataLoaderProps {\n    dataloader: DataLoader,\n    style?: Object,\n}\n\nexport default class DataLoader {\n\n    private data: DataEntry[] = []\n    private filters: Filter[] = []\n    private dataChangeCallbacks: (() => void)[] = []\n    private total_amount: number = 0\n\n    constructor(dataset: string | null) {\n        this.setDataset(dataset)\n    }\n\n    setDataset(dataset: string | null) {\n        this.sliceFilter(0)\n        this.loadDataset(dataset)\n    }\n\n    private loadDataset(dataset: string | null) {\n        if (dataset === null) return\n        Papa.parse(window.location.pathname + \"/expense_summary_\" + dataset + \".csv\",\n            {\n                download: true,\n                header: true,\n                complete: (results) => {\n                    this.data = results.data.map((e) => {\n                        e.date = new Date(Number.parseFloat(e.date) * 1000)\n                        e.amount = Number.parseFloat(e.amount)\n                        e.words = e.__parsed_extra || []\n                        return e\n                    }).filter(e => !Number.isNaN(e.amount))\n\n                    this.onLoad()\n                }\n            })\n    }\n\n    private onLoad() {\n        this.total_amount = this.data.reduce((prev, curr) => prev + curr.amount, 0)\n        this.parseQuery(QueryBuilder.getInstance().getQuery())\n        QueryBuilder.getInstance().addGenerator(this.generateQueryString.bind(this), 2)\n        this.listChangeCallback()\n    }\n\n    private parseQuery(query: string) {\n        if (query[0] === '?') query = query.slice(1)\n        const callbacks = this.dataChangeCallbacks\n        this.dataChangeCallbacks = []\n        try {\n            query.split('&').forEach(entry => {\n                if (!entry.includes('=')) return\n                const sign_location = entry.indexOf('=')\n                const q = entry.substr(0, sign_location)\n                const v = entry.substr(sign_location + 1)\n                switch (q) {\n                    case 'keyword':\n                        this.addKeywordFilter(v)\n                        break\n                    case 'fund':\n                    case 'division':\n                    case 'department':\n                    case 'gl':\n                    case 'event':\n                        this.addCategoryFilter(q, atob(v))\n                        break\n                    case 'amount':\n                        if (!v.includes('..')) return\n                        const valuesa = v.split('..').map(e => KMFToNum(e))\n                        this.addAmountFilter(valuesa[0], valuesa[1])\n                        break\n                    case 'date':\n                        if (!v.includes('..')) return\n                        const valuesd = v.split('..')\n                        this.addMonthFilter(valuesd[0], valuesd[1])\n                        break\n                }\n            })\n        } catch (e) {\n            console.log(e)\n        }\n        this.dataChangeCallbacks = callbacks\n    }\n\n    private generateQueryString() {\n        const strings = this.filters.map((curr) => {\n            switch (curr.category) {\n                case 'keyword':\n                    return 'keyword=' + curr.name\n                case 'amount':\n                    return 'amount=' + curr.name.replace('~', '..')\n                case 'date':\n                    return 'date=' + curr.name.replace('~', '..')\n                default:\n                    return curr.category + '=' + btoa(curr.name)\n            }\n        })\n        return strings.join('&')\n    }\n\n    private listChangeCallback() {\n        this.dataChangeCallbacks.forEach(c => c())\n        QueryBuilder.getInstance().update()\n    }\n\n    addChangeCallback(callback: () => void) {\n        this.dataChangeCallbacks.push(callback)\n    }\n\n    getRecords(): DataEntry[] {\n        if (this.data.length === 0) {\n            return [];\n        }\n\n        if (this.filters.length === 0) {\n            return this.data\n        }\n\n        return this.filters[this.filters.length - 1].index\n    }\n\n    getWordList(): WordEntry[] {\n        if (this.data.length === 0) {\n            return [];\n        }\n\n        let words_set = new Map<string, number>()\n        this.getRecords().forEach(row => {\n            row.words.forEach(w => {\n                words_set.set(w, (words_set.get(w) || 0) + row.amount);\n            })\n        })\n\n        const chosen_words = this.filters.filter(e => e.category === 'keyword').map(e => e.name)\n\n        let words_list: WordEntry[] = []\n        for (let [word, val] of words_set.entries()) {\n            if (!chosen_words.includes(word))\n                words_list.push({text: word, value: val})\n        }\n\n        words_list.sort((a, b) => b.value - a.value)\n\n        return words_list\n    }\n\n    getCategories(category: Category): WordEntry[] {\n        if (this.data.length === 0) {\n            return [];\n        }\n\n        let records: DataEntry[];\n        if (this.getLastFilter()?.category === category) {\n            records = this.filters.length >= 2 ? this.filters[this.filters.length - 2].index : this.data\n        } else {\n            records = this.getRecords()\n        }\n\n        let category_set = new Map<string, number>()\n        records.forEach(row => {\n            const cate_name = row[category]\n            category_set.set(cate_name, (category_set.get(cate_name) || 0) + row.amount);\n        })\n\n        let category_list: WordEntry[] = []\n        for (let [word, val] of category_set.entries()) {\n            category_list.push({text: word, value: val})\n        }\n\n        category_list.sort((a, b) => a.value - b.value)\n\n        return category_list\n    }\n\n    getAmountBins(numBin: number): { data: AmountBin[], domain: [number, number] } {\n        if (this.data.length === 0) {\n            return {data: [], domain: [0, 1]}\n        }\n\n        let records: DataEntry[];\n        let domain: [number, number] | null = null;\n        if (this.filters.length !== 0 && this.filters[this.filters.length - 1].category === 'amount') {\n            records = this.filters.length >= 2 ? this.filters[this.filters.length - 2].index : this.data\n            const values = this.filters[this.filters.length - 1].name.split('~').map(e => KMFToNum(e))\n            domain = values as [number, number]\n        } else {\n            records = this.getRecords()\n        }\n        let [allMin, allMax] = records.reduce(((previousValue, currentValue) =>\n            [Math.min(previousValue[0], currentValue.amount),\n                Math.max(previousValue[1], currentValue.amount)]), [Number.MAX_VALUE, Number.MIN_VALUE])\n\n        if (domain === null) domain = [allMin, allMax]\n        allMax += 0.001\n\n        let bins: AmountBin[] = []\n        let bin_size = (allMax - allMin) / numBin\n        for (let i = 0; i < numBin; i++) {\n            bins.push({\n                low: allMin + i * bin_size, high: allMin + (i + 1) * bin_size,\n                value: 0, name: KMFormat(allMin + (i + 0.5) * bin_size)\n            })\n        }\n\n        records.forEach((e) => {\n            bins.forEach((b) => {\n                if (b.low <= e.amount && e.amount < b.high)\n                    b.value += e.amount\n            })\n        })\n\n        return {data: bins, domain: domain}\n    }\n\n    getMonthBins(): { data: WordEntry[], domain: [string, string] } {\n        if (this.data.length === 0) {\n            return {data: [{text: '0000-01', value: 0}], domain: ['0000-01', '0000-01']}\n        }\n\n        let records: DataEntry[];\n        let domain: [string, string] | null = null;\n        if (this.filters.length !== 0 && this.filters[this.filters.length - 1].category === 'date') {\n            records = this.filters.length >= 2 ? this.filters[this.filters.length - 2].index : this.data\n            const values = this.filters[this.filters.length - 1].name.split('~')\n            domain = values as [string, string]\n        } else {\n            records = this.getRecords()\n        }\n        let [allMin, allMax] = records.reduce((previousValue, currentValue) => {\n            const month_string = (currentValue.date.getFullYear() + \"\").padStart(4, '0') + '-' + ((currentValue.date.getMonth() + 1) + \"\").padStart(2, \"0\")\n            return [previousValue[0].localeCompare(month_string) < 0 ? previousValue[0] : month_string,\n                previousValue[1].localeCompare(month_string) > 0 ? previousValue[1] : month_string]\n        }, ['9999-99', '0000-00'])\n\n        if (domain === null) domain = [allMin, allMax]\n\n        let bins: Map<string, number> = new Map()\n        records.forEach((e) => {\n            const month_string = (e.date.getFullYear() + \"\").padStart(4, \"0\") + '-' + ((e.date.getMonth() + 1) + \"\").padStart(2, \"0\")\n            bins.set(month_string, (bins.get(month_string) || 0) + e.amount)\n        })\n\n        let data: WordEntry[] = [...bins.entries()].map((e) => ({text: e[0], value: e[1]}))\n            .sort((a, b) => (a.text.localeCompare(b.text)))\n\n        while (data.length !== 0 && data.length < 12) {\n            let month_num = data[data.length - 1].text.split('-').map((s) => Number.parseInt(s))\n            if (month_num[1] !== 12) month_num[1]++\n            else month_num = [month_num[0] + 1, 1]\n            let next_month = (month_num[0] + \"\").padStart(4, \"0\") + '-' + (month_num[1] + \"\").padStart(2, \"0\")\n            data.push({text: next_month, value: 0})\n        }\n\n        return {data: data, domain: domain}\n    }\n\n    getTotal(): number {\n        if (this.filters.length === 0) {\n            return this.total_amount\n        }\n        return this.filters[this.filters.length - 1].amount\n    }\n\n    getDatasetTotal(): number {\n        return this.total_amount\n    }\n\n    getFilters() {\n        return this.filters\n    }\n\n    getLastFilter() {\n        if (this.filters.length === 0)\n            return null;\n        else return this.filters[this.filters.length - 1]\n    }\n\n    sliceFilter(remaining_length: number) {\n        this.filters = this.filters.slice(0, remaining_length)\n        this.listChangeCallback()\n    }\n\n    addKeywordFilter(word: string) {\n        if (this.data.length === 0) return\n        if (this.filters.reduce((prev, curr) => prev || (curr.category === 'keyword' && curr.name === word), false))\n            return\n\n        let word_index: DataEntry[]\n        if (this.filters.length !== 0) {\n            const last_index = this.filters[this.filters.length - 1].index\n            word_index = last_index.filter((e) => e.words.includes(word))\n        } else {\n            word_index = this.data.filter(e => e.words.includes(word))\n        }\n\n        this.filters.push({\n            category: 'keyword',\n            name: word,\n            index: word_index,\n            amount: word_index\n                .reduce((prev, curr) => prev + curr.amount, 0)\n        })\n\n        this.listChangeCallback()\n    }\n\n    addCategoryFilter(category: Category, value: string) {\n        if (this.data.length === 0) return\n        if (this.filters.reduce((prev, curr) => prev || (curr.category === category && curr.name === value), false))\n            return\n\n        if (this.getLastFilter()?.category === category) {\n            this.filters = this.filters.slice(0, -1)\n        }\n\n        let new_index: DataEntry[]\n        if (this.filters.length !== 0) {\n            const last_index = this.filters[this.filters.length - 1].index\n            // @ts-ignore\n            new_index = last_index.filter((e) => (e[category] === value))\n        } else {\n            // @ts-ignore\n            new_index = this.data.filter(e => (e[category] === value))\n        }\n\n        this.filters.push({\n            category: category,\n            name: value,\n            index: new_index,\n            amount: new_index.reduce((prev, curr) => prev + curr.amount, 0)\n        })\n\n        this.listChangeCallback()\n    }\n\n    addAmountFilter(low: number, high: number) {\n        if (this.data.length === 0) return\n\n        if (this.filters.length > 0 && this.filters[this.filters.length - 1].category === 'amount') {\n            this.filters = this.filters.slice(0, -1)\n        }\n        const last_index = this.filters.length > 0 ? this.filters[this.filters.length - 1].index : this.data\n        const new_index = last_index\n            .filter((e) => (low <= e.amount && e.amount <= high))\n\n        this.filters.push({\n            category: 'amount',\n            name: KMFormat(low) + \"~\" + KMFormat(high),\n            index: new_index,\n            amount: new_index\n                .reduce((prev, curr) => prev + curr.amount, 0)\n        })\n\n        this.listChangeCallback()\n    }\n\n    addMonthFilter(low: string, high: string) {\n        if (this.data.length === 0) return\n\n        if (this.filters.length > 0 && this.filters[this.filters.length - 1].category === 'date') {\n            this.filters = this.filters.slice(0, -1)\n        }\n        const last_index = this.filters.length > 0 ? this.filters[this.filters.length - 1].index : this.data\n        const new_index = last_index\n            .filter((e) => {\n                const month_string = (e.date.getFullYear() + \"\").padStart(4, '0') + '-' + ((e.date.getMonth() + 1) + \"\").padStart(2, '0')\n                return low.localeCompare(month_string) <= 0 && month_string.localeCompare(high) <= 0\n            })\n\n        this.filters.push({\n            category: 'date',\n            name: low + \"~\" + high,\n            index: new_index,\n            amount: new_index\n                .reduce((prev, curr) => prev + curr.amount, 0)\n        })\n\n        this.listChangeCallback()\n    }\n}\n","import QueryBuilder from \"./QueryBuilder\";\nimport DataLoader from \"./DataLoader\";\n\nexport default class Datasets {\n\n    private static instance: Datasets | null = null\n    private datasets: string[] = []\n    private currentDataset: string | null = null\n    private callbacks: (() => void)[] = []\n    private dataLoader: DataLoader\n    private ready: boolean = false\n\n    static getInstance() {\n        if (this.instance === null) this.instance = new Datasets()\n        return this.instance\n    }\n\n\n    private constructor() {\n        this.parseDataset(QueryBuilder.getInstance().getQuery())\n        this.dataLoader = new DataLoader(this.currentDataset)\n        QueryBuilder.getInstance().addGenerator(this.getQueryString.bind(this), 0)\n        fetch(window.location.pathname + \"/datasets.json\")\n            .then(res => res.json())\n            .then((res) => {\n                this.datasets = res\n                this.ready = true\n                if (this.currentDataset === null) this.currentDataset = this.datasets[0]\n                this.dataLoader.setDataset(this.currentDataset)\n                this.callbacks.forEach(c => c())\n            })\n    }\n\n    addChangeCallback(callback: () => void) {\n        this.callbacks.push(callback)\n    }\n\n    getCurrentDataset() {\n        if (this.currentDataset != null) return this.currentDataset\n        return undefined\n    }\n\n    getCurrentDatasetName() {\n        if (this.currentDataset != null) return Datasets.getDatasetTitle(this.currentDataset)\n        return undefined\n    }\n\n    getDatasets() {\n        if (this.ready) return this.datasets\n        return undefined\n    }\n\n    getDatasetNames() {\n        if (this.ready) return this.datasets.map(Datasets.getDatasetTitle)\n        return undefined\n    }\n\n    getDataLoader() {\n        return this.dataLoader\n    }\n\n    setCurrentDataset(name: string) {\n        this.currentDataset = name\n        QueryBuilder.getInstance().update()\n        this.dataLoader.setDataset(name)\n        this.callbacks.forEach(c => c())\n    }\n\n    private parseDataset(query: string) {\n        if (query[0] === '?') query = query.slice(1)\n        const res = query.split('&').filter((e) => e.startsWith('d='))\n        if (res.length !== 0)\n            this.currentDataset = res[0].substr(2)\n    }\n\n    private getQueryString(): string {\n        if (this.currentDataset === null) return \"\"\n        return 'd=' + this.currentDataset\n    }\n\n    static getDatasetTitle(name: string): string {\n        if (name.match(/^\\d*$/)) {\n            const year = Number.parseInt(name)\n            return name + '-' + (year + 1).toString()\n        } else return name\n    }\n}\n","import {Backdrop, BackdropProps, Paper, Typography} from \"@material-ui/core\";\nimport React from \"react\";\nimport MenuIcon from \"@material-ui/icons/Menu\"\nimport 'fontsource-roboto';\n\nexport default function InstructionBackProp(props: BackdropProps) {\n    return (\n        <Backdrop style={{zIndex: 10, color: '#fff'}}{...props}>\n            <Paper style={{backgroundColor: \"white\", width: \"80%\", height: \"80%\"}}>\n            <Typography variant=\"h3\">Budget Viewer</Typography>\n            <hr/>\n            <p>This is a viewer/analyzer for Expense of Undergraduate Student Association. </p>\n            <Typography variant=\"h4\">Usage</Typography>\n            <ul>\n                <li style={{alignItems: \"center\"}}>Click on <MenuIcon style={{color: \"#fff\", backgroundColor: \"#3f51b5\", padding: 6, borderRadius: 3, margin: 3}} />\n                on top right to select the data year.</li>\n            </ul>\n            </Paper>\n        </Backdrop>\n    )\n}\n","import {\n    AppBar, Button,\n    Drawer,\n    IconButton,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Toolbar, Tooltip,\n    Typography\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ListIcon from \"@material-ui/icons/List\";\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport React from \"react\";\nimport Datasets from \"../models/Datasets\";\nimport InstructionBackProp from \"./Instructions\";\n\ninterface BarState {\n    drawer: boolean\n    backdropOn: boolean\n}\n\nexport default class TopBar extends React.Component<{}, BarState> {\n\n    constructor(props: {}) {\n        super(props);\n\n        this.state = {\n            drawer: false,\n            backdropOn: false\n        }\n    }\n\n    componentDidMount(): void {\n        Datasets.getInstance().addChangeCallback(() => this.forceUpdate())\n    }\n\n    render() {\n        const toggleDrawer = (state: boolean) => () => this.setState({drawer: state})\n        const toggleBackdrop = (state: boolean) => () => this.setState({backdropOn: state})\n        const dataset_list: string[] = Datasets.getInstance().getDatasets() || []\n        return (\n            <AppBar position=\"sticky\">\n                <Toolbar>\n                    <Tooltip title=\"Select Dataset\">\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"dataset menu\" onClick={toggleDrawer(true)}>\n                            <MenuIcon/>\n                        </IconButton>\n                    </Tooltip>\n                    <Typography variant=\"h6\" style={{flexGrow: 1}}>\n                        {\"Undergraduate Student Association Expenditure \" + Datasets.getInstance().getCurrentDatasetName()}\n                    </Typography>\n                    <Button color=\"inherit\" onClick={toggleBackdrop(true)}>\n                        <HelpOutlineIcon />\n                    </Button>\n                    <InstructionBackProp open={this.state.backdropOn} onClick={toggleBackdrop(false)}/>\n                </Toolbar>\n                <Drawer anchor={'left'} open={this.state.drawer} onClose={toggleDrawer(false)}>\n                    <div onClick={toggleDrawer(false)}>\n                        <List>\n                            {dataset_list.map(text => (\n                                <ListItem button key={text} onClick={() => {\n                                    toggleDrawer(false)\n                                    Datasets.getInstance().setCurrentDataset(text)\n                                }}>\n                                    <ListItemIcon><ListIcon/></ListItemIcon>\n                                    <ListItemText primary={\"Budget \" + Datasets.getDatasetTitle(text)}/>\n                                </ListItem>\n                            ))}\n                        </List>\n                    </div>\n                </Drawer>\n            </AppBar>\n        )\n    }\n}\n","/**\n * Created by TylerLiu on 2020/04/23.\n */\nimport 'd3-transition';\nimport {select} from 'd3-selection';\nimport React, {Component} from 'react';\nimport ReactWordcloud, {Callbacks, OptionsProp, Word} from \"react-wordcloud\";\nimport {KMFormat} from \"../util\";\nimport {DataLoaderProps} from \"../models/DataLoader\";\n\ninterface WordCloudProps extends DataLoaderProps {\n    hidden?: boolean\n}\n\nexport default class WordCloud extends Component<WordCloudProps> {\n    private callbacks: Callbacks = {\n        getWordTooltip: (word: Word) => `${word.text} has $${KMFormat(word.value)} in the category.`,\n        onWordClick: this.getCallback('onWordClick').bind(this),\n        onWordMouseOut: this.getCallback('onWordMouseOut').bind(this),\n        onWordMouseOver: this.getCallback('onWordMouseOver').bind(this),\n    };\n\n    private options: OptionsProp = {\n        fontFamily: 'impact',\n        fontSizes: [12, 60],\n        fontStyle: 'normal',\n        fontWeight: 'normal',\n        scale: 'log',\n        //spiral: 'archimedean',\n        deterministic: true,\n\n        rotations: 4,\n        rotationAngles: [-45, 90],\n\n        transitionDuration: 200,\n    }\n\n    constructor(props: DataLoaderProps) {\n        super(props)\n\n        this.state = {\n            words: [{text: 'Loading...', value: 100}]\n        }\n    }\n\n    componentDidMount() {\n        this.props.dataloader.addChangeCallback(this.setWords.bind(this))\n    }\n\n    render() {\n        return (\n            <div style={{height: '80vh'}} hidden={this.props.hidden}>\n                {(this.props.hidden || false) ? null : (\n                    <ReactWordcloud callbacks={this.callbacks} words={this.props.dataloader.getWordList().slice(0, 80)}\n                                    options={this.options}/>\n                )}\n            </div>\n        )\n    }\n\n    getCallback(callback: string) {\n        return (word: Word, event: MouseEvent | undefined) => {\n            const isActive = callback !== 'onWordMouseOut';\n            // @ts-ignore\n            const text = select(event.target);\n            text\n                .on('click', (() => {\n                    if (isActive) {\n                        this.props.dataloader.addKeywordFilter(word.text);\n                    }\n                }))\n                .transition()\n                .attr('background', 'white')\n                .attr('text-decoration', isActive ? 'underline' : 'none');\n        };\n    }\n\n    setWords() {\n        this.forceUpdate()\n    }\n}\n","/**\n * Created by TylerLiu on 2018/12/23.\n */\nimport React, {Component} from 'react';\nimport {\n    Grid,\n    VirtualTable,\n    TableHeaderRow,\n    TableSummaryRow,\n    ExportPanel,\n    TableColumnVisibility, ColumnChooser, Toolbar, TableGroupRow, GroupingPanel, SearchPanel, TableColumnResizing\n} from \"@devexpress/dx-react-grid-material-ui\";\nimport {Category, DataLoaderProps} from \"../models/DataLoader\";\nimport {\n    Column, GroupingState, GroupSummaryItem, IntegratedFiltering, IntegratedGrouping,\n    IntegratedSorting,\n    IntegratedSummary, SearchState,\n    Sorting,\n    SortingState, SummaryItem,\n    SummaryState, TableColumnWidthInfo, TableGroupRow as TableGroupRowBase\n} from \"@devexpress/dx-react-grid\";\nimport {Paper} from \"@material-ui/core\";\nimport {DataTypeProvider} from \"@devexpress/dx-react-grid\";\nimport {GridExporter} from \"@devexpress/dx-react-grid-export\";\nimport {saveAs} from \"file-saver\";\nimport Datasets from \"../models/Datasets\";\nimport {Workbook} from \"exceljs\";\n\nconst month_name = ['January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December']\n\nconst CurrencyFormatter = ({value}: {value: number}) => (\n    <span style={{ color: 'darkblue' }}>\n        {value.toLocaleString('en-US', { style: 'currency', currency: 'USD' })}\n    </span>\n);\n\nconst DateFormatter = ({ value }: {value: Date}) => (\n    <span>{value.toDateString()}</span>\n);\n\nconst DateGroupFormatter = ({ column, row }: TableGroupRowBase.ContentProps) => {\n    if (column.name === 'date') {\n        row.key.toString()\n        const [year, month] = row.key.toString().split('-');\n        return <span><strong>Date:</strong> {month_name[Number.parseInt(month) - 1]} {year}</span>\n    } else return (\n        <span><strong>{column.title}:</strong> {row.value}</span>\n    )\n};\n\nconst dateToYearMonth = (value: Date) =>\n    value.getFullYear().toString().padStart(4, '0') + '-' + (value.getMonth() + 1).toString().padStart(2, '0')\n\ninterface RecordTableState {\n    sortingState: Sorting[]\n    lastGroupBy: Category | \"date\" | undefined\n}\n\ninterface RecordTableProps extends DataLoaderProps{\n    groupBy?: Category | \"date\" | undefined;\n    onChange: (value: string) => void;\n}\n\nexport default class RecordTable extends Component<RecordTableProps, RecordTableState> {\n\n    private TableHeaderCell = (props: TableHeaderRow.CellProps) => (\n        <TableHeaderRow.Cell\n            {...props}\n            onClick={() => this.setSorting(props.column)}\n            style={this.props.groupBy === props.column.name ? {color: \"#3f51b5\"}: {}}\n        />\n    );\n\n    private readonly summaryItems: SummaryItem[] = [\n        { columnName: 'date', type: 'count' },\n        { columnName: 'amount', type: 'sum'},\n    ]\n\n    private readonly columns: Column[] = [\n        {title: 'Row', name: 'id'},\n        {title: 'Posted Date', name: 'date'},\n        {title: 'Department', name: 'department'},\n        {title: 'Fund', name: 'fund'},\n        {title: 'Division', name: 'division'},\n        {title: 'Event', name: 'event'},\n        {title: 'GL', name: 'gl'},\n        {title: 'Description', name: 'description'},\n        {title: 'Amount', name: 'amount'},\n    ]\n\n    private readonly tableColumnExtension: VirtualTable.ColumnExtension[] = [\n        {columnName: 'id',          wordWrapEnabled:true},\n        {columnName: 'date',        wordWrapEnabled:true},\n        {columnName: 'department',  wordWrapEnabled:true},\n        {columnName: 'fund',        wordWrapEnabled:true},\n        {columnName: 'division',    wordWrapEnabled:true},\n        {columnName: 'event',       wordWrapEnabled:true},\n        {columnName: 'gl',          wordWrapEnabled:true},\n        {columnName: 'description', wordWrapEnabled:true},\n        {columnName: 'amount',      wordWrapEnabled:true, align: 'center'},\n    ]\n\n    private readonly groupSummaryItems: GroupSummaryItem[] = [\n        { columnName: 'amount', type: 'sum', showInGroupFooter: false, alignByColumn: true},\n        { columnName: 'amount', type: 'sum', showInGroupFooter: true},\n        { columnName: 'date', type: 'count', showInGroupFooter: true},\n    ]\n\n    private readonly groupExtension: TableGroupRow.ColumnExtension[] = [\n        {columnName: 'id',          showWhenGrouped:true},\n        {columnName: 'date',        showWhenGrouped:true},\n        {columnName: 'department',  showWhenGrouped:true},\n        {columnName: 'fund',        showWhenGrouped:true},\n        {columnName: 'division',    showWhenGrouped:true},\n        {columnName: 'event',       showWhenGrouped:true},\n        {columnName: 'gl',          showWhenGrouped:true},\n        {columnName: 'description', showWhenGrouped:true},\n        {columnName: 'amount',      showWhenGrouped:true},\n    ]\n\n    private groupingColumnExtensions: IntegratedGrouping.ColumnExtension[] = [\n        {columnName: 'date', criteria: (value) => {\n            if (value instanceof Date) {\n                const key = dateToYearMonth(value)\n                return {key: key}\n            } else return {key: \"\"};\n        }}\n    ]\n\n    private columnWidth: TableColumnWidthInfo[] = [\n        {columnName: 'id',          width: 70},\n        {columnName: 'date',        width: 150},\n        {columnName: 'fund',        width: 150},\n        {columnName: 'division',    width: 150},\n        {columnName: 'department',  width: 150},\n        {columnName: 'event',       width: 150},\n        {columnName: 'gl',          width: 150},\n        {columnName: 'description', width: 350},\n        {columnName: 'amount',      width: 150},\n    ]\n\n    private readonly exporter: React.RefObject<{exportGrid: (options?: object) => void}>\n\n    private groupWeight: Map<string, number>\n\n    private integratedSortingColumnExtensions: IntegratedSorting.ColumnExtension[] = []\n\n    constructor(props: RecordTableProps) {\n        super(props);\n        this.exporter = React.createRef()\n\n        this.state = {\n            sortingState: this.getGroupSortingState(),\n            lastGroupBy: this.props.groupBy,\n        }\n\n        this.groupWeight = new Map<string, number>()\n        if (this.props.groupBy !== undefined && this.props.groupBy !== 'date') {\n            this.buildGroupWeightTable()\n        }\n    }\n\n    componentDidMount() {\n        this.props.dataloader.addChangeCallback(() => {\n            this.buildGroupWeightTable();\n            this.forceUpdate()\n        })\n    }\n\n    private buildGroupWeightTable() {\n        if (this.props.groupBy !== undefined && this.props.groupBy !== 'date') {\n            this.groupWeight.clear()\n            this.props.dataloader.getCategories(this.props.groupBy).forEach(entry => {\n                this.groupWeight.set(entry.text, entry.value)\n            })\n\n            this.integratedSortingColumnExtensions = [\n                { columnName: this.props.groupBy,\n                    compare: (a, b) => (this.groupWeight?.get(a)||0) - (this.groupWeight?.get(b)||0)\n                },\n            ]\n        }\n    }\n\n    componentDidUpdate(prevProps: Readonly<RecordTableProps>, prevState: Readonly<RecordTableState>, snapshot?: any): void {\n        if (this.state.lastGroupBy != this.props.groupBy) {\n            this.buildGroupWeightTable()\n            console.log(this.props.groupBy);\n            this.setState({\n                sortingState: this.getGroupSortingState(),\n                lastGroupBy: this.props.groupBy\n            })\n        }\n\n    }\n\n    render() {\n        const rows = this.props.dataloader.getRecords().map((e, i) => {e.id = i; return e})\n\n        return (\n            <Paper>\n                <Grid rows={rows} columns={this.columns}>\n                    <SortingState\n                        sorting={this.state.sortingState}\n                    />\n                    <GroupingState\n                        grouping={this.props.groupBy !== undefined ? [{columnName: this.props.groupBy}]:[]}\n                    />\n                    <SearchState/>\n                    <SummaryState totalItems={this.summaryItems} groupItems={this.groupSummaryItems}/>\n\n                    <IntegratedGrouping columnExtensions={this.groupingColumnExtensions}/>\n                    <IntegratedFiltering />\n                    <IntegratedSorting columnExtensions={this.integratedSortingColumnExtensions}/>\n                    <IntegratedSummary />\n\n                    <DataTypeProvider for={['amount']} formatterComponent={CurrencyFormatter} />\n                    <DataTypeProvider for={['date']} formatterComponent={DateFormatter} />\n\n                    <VirtualTable columnExtensions={this.tableColumnExtension}/>\n                    <TableColumnResizing\n                        defaultColumnWidths={this.columnWidth}\n                    />\n                    <TableColumnVisibility\n                        defaultHiddenColumnNames={['id']}\n                    />\n                    <TableHeaderRow cellComponent={this.TableHeaderCell}/>\n                    <TableGroupRow\n                        contentComponent={DateGroupFormatter}\n                        columnExtensions={this.groupExtension}\n                        />\n                    <TableSummaryRow />\n\n                    <Toolbar />\n                    <GroupingPanel showSortingControls emptyMessageComponent={() => <span/>}/>\n                    <SearchPanel />\n                    <ExportPanel startExport={(options) => this.exporter.current?.exportGrid(options)} />\n                </Grid>\n                <GridExporter\n                    ref={this.exporter}\n                    columns={this.columns}\n                    rows={rows}\n                    onSave={(workbook) => this.onSave(workbook)}\n                />\n            </Paper>\n        )\n    }\n\n    private setSorting(sorts: Column) {\n        if (sorts.name === this.props.groupBy) {\n            this.setState({sortingState: this.state.sortingState.map(\n                value => ({...value, direction: value.direction === \"asc\" ? \"desc\" : \"asc\" }))})\n        } else {\n            this.props.onChange(sorts.name)\n            this.setState({sortingState: this.getGroupSortingState(sorts.name)})\n        }\n    }\n\n    private onSave(workbook: Workbook){\n        workbook.xlsx.writeBuffer().then((buffer) => {\n            saveAs(new Blob([buffer], { type: 'application/octet-stream' }),\n                `Transactions-${Datasets.getInstance().getCurrentDatasetName()}.xlsx` );\n        });\n    }\n\n    private getGroupSortingState(category: string | undefined = this.props.groupBy): Sorting[] {\n        if (category === 'date')\n            return [{columnName: 'date', direction: \"asc\"}]\n        else if (category === undefined || category === 'description')\n            return [{columnName: 'id', direction: 'asc'}]\n        else return [{columnName: category, direction: 'desc'}]\n    }\n\n}\n","/**\n * Created by TylerLiu on 2018/12/23.\n */\nimport React, {Component} from 'react';\nimport {Breadcrumbs, Tooltip, Typography} from \"@material-ui/core\";\nimport Link from \"@material-ui/core/Link\";\nimport {KMFormat} from \"../util\";\nimport {DataLoaderProps} from \"../models/DataLoader\";\n\nexport default class KeywordCrumb extends Component<DataLoaderProps> {\n\n    componentDidMount() {\n        this.props.dataloader.addChangeCallback(() => this.forceUpdate())\n    }\n\n    render() {\n        let list = this.props.dataloader.getFilters()\n        return (\n            <Breadcrumbs separator=\">\" style={this.props.style}>\n                <Tooltip title=\"Remove All Filters\">\n                    <Link key={-1} color=\"textPrimary\"\n                        onClick={() => this.props.dataloader.sliceFilter(0)}>Transactions [${KMFormat(this.props.dataloader.getDatasetTotal())}]</Link>\n                </Tooltip>\n                {list.slice(0, -1).map((filter, index) => (\n                    <Tooltip title=\"View This Filter\">\n                        <Link key={index} color=\"textSecondary\"\n                              onClick={() => this.props.dataloader.sliceFilter(index + 1)}>{filter.category}: {filter.name} [${KMFormat(filter.amount)}]</Link>\n                    </Tooltip>\n                ))}\n                {list.length > 0 ? (<Typography color=\"textPrimary\"\n                                                key={list.length}>{list[list.length - 1].category}: {list[list.length - 1].name} [${KMFormat(list[list.length - 1].amount)}]</Typography>) : null}\n            </Breadcrumbs>\n        )\n    }\n}\n","import React, {Component} from \"react\";\nimport {Category, DataLoaderProps} from \"../models/DataLoader\";\nimport {Cell, Pie, PieChart, ResponsiveContainer, Tooltip} from 'recharts';\nimport {KMFormat} from \"../util\";\n\ninterface CategoryPieProps extends DataLoaderProps {\n    category: Category\n    hidden?: boolean\n}\n\n/**\n * Component for a single layer pie Chart.\n */\nexport default class CategoryPie extends Component<CategoryPieProps> {\n\n    componentDidMount(): void {\n        this.props.dataloader.addChangeCallback(() => this.forceUpdate())\n    }\n\n    render(): React.ReactNode {\n        const data = this.props.dataloader.getCategories(this.props.category)\n        const lastFilter = this.props.dataloader.getLastFilter()\n        const selected = lastFilter == null ? undefined :\n            (lastFilter.category === this.props.category ? lastFilter.name : undefined)\n\n        return (\n            <div style={{height: '80vh'}} hidden={this.props.hidden || false}>\n                {(this.props.hidden || false) ? null : (\n                    <ResponsiveContainer height=\"100%\" width=\"100%\">\n                        <PieChart>\n                            <Pie data={data} dataKey=\"value\" nameKey=\"text\"\n                                 labelLine={false}\n                                 onClick={(e) => this.props.dataloader.addCategoryFilter(this.props.category, e.text)}>\n                                {\n                                    data.map((entry, index) => (\n                                        <Cell key={`cell-${index}`} fill={this.getColor(selected === entry.text)}/>\n                                    ))\n                                }\n                            </Pie>\n                            <Tooltip formatter={(value) => \"$\" + KMFormat(value as number)}\n                                     contentStyle={{padding: '0 5px', margin: 0, borderRadius: 5}}/>\n                        </PieChart>\n                    </ResponsiveContainer>\n                )}\n            </div>\n        )\n    }\n\n    getColor(selected: boolean): string {\n        if (selected)\n            return \"#f44336\"\n        switch (this.props.category) {\n            case \"fund\":\n                return \"#8bc34a\"\n            case \"division\":\n                return \"#ab47bc\"\n            case \"department\":\n                return \"#26c6da\"\n            case \"gl\":\n                return \"#26a69a\"\n            case \"event\":\n                return \"#ef6c00\"\n        }\n    }\n}\n","import React, {Component} from \"react\";\nimport {AmountBin, DataLoaderProps} from \"../models/DataLoader\";\nimport {Bar, BarChart, CartesianGrid, Cell, Label, ReferenceLine, ResponsiveContainer, XAxis, YAxis} from 'recharts';\nimport {KMFormat} from \"../util\";\nimport {Mark, Slider} from \"@material-ui/core\";\n\ninterface SliderProps extends DataLoaderProps {\n    hidden?: boolean\n}\n\ninterface SliderState {\n    value: [number, number]\n    data: AmountBin[]\n}\n\nexport default class AmountSlider extends Component<SliderProps, SliderState> {\n\n    constructor(props: SliderProps) {\n        super(props);\n        this.state = {\n            value: [0, 100],\n            data: []\n        }\n    }\n\n\n    componentDidMount(): void {\n        this.props.dataloader.addChangeCallback(() =>\n            this.updateState()\n        )\n        this.updateState()\n    }\n\n    updateState() {\n        const {data, domain} = this.props.dataloader.getAmountBins(20)\n        this.setState({\n            data: data,\n            value: domain,\n        })\n    }\n\n    render(): React.ReactNode {\n        const data = this.state.data\n        const domain: [number, number] = data.length === 0 ? [0, 1] : [data[0].low, data[data.length - 1].high]\n        return (\n            <div style={{\n                paddingLeft: '5%', paddingRight: `calc(5% + ${AmountSlider.getYAxisWidth()}px)`,\n                height: '80vh', margin: \"auto\"\n            }} hidden={this.props.hidden || false}>\n                {(this.props.hidden || false) ? null : (\n                    <ResponsiveContainer height=\"90%\" width=\"100%\">\n                        <BarChart data={data} barCategoryGap={0} margin={{bottom: 0, left: 0, right: 0}}>\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\n                            <XAxis dataKey=\"name\" domain={domain} hide orientation=\"top\"/>\n                            <YAxis domain={[0, 'dataMax']} tickFormatter={(v) => '$' + KMFormat(v)}\n                                   width={AmountSlider.getYAxisWidth()}>\n                                <Label angle={270} position=\"insideLeft\" style={{textAnchor: 'middle'}}>\n                                    Expense Sum in Transaction Amount Bin($)\n                                </Label>\n                            </YAxis>\n                            <ReferenceLine y={0} label=\"\" stroke=\"black\"/>\n                            <Bar dataKey={\"value\"} fill={this.getColor()}>\n                                {data.map((value, index) => (\n                                    <Cell key={`cell-${index}`} fill={this.getColor()}\n                                          opacity={this.getOpacity(value.low, value.high)}/>\n                                ))}\n                            </Bar>\n                        </BarChart>\n                    </ResponsiveContainer>\n                )}\n                <div style={{paddingLeft: AmountSlider.getYAxisWidth()}}>\n                    <Slider value={this.state.value}\n                            min={domain[0]} max={domain[1]}\n                            onChange={this.onRangeChange.bind(this)}\n                            onChangeCommitted={this.onRangeChangeCommitted.bind(this)}\n                            valueLabelDisplay=\"auto\"\n                            valueLabelFormat={(v) => '$' + KMFormat(v)}\n                            marks={this.getMarks(domain)}\n                            aria-labelledby=\"Amount-slider\"\n                    />\n                </div>\n            </div>\n        )\n    }\n\n    static getViewportWidth() {\n        return Math.max(document.documentElement.clientWidth, window.innerWidth || 0)\n    }\n\n    static getYAxisWidth() {\n        return AmountSlider.getViewportWidth() < 480 ? 0 : 72\n    }\n\n    onRangeChange(event: any, newValues: number | number[]) {\n        this.setState({value: newValues as [number, number]})\n    }\n\n    onRangeChangeCommitted(event: any, newValues: number | number[]) {\n        const nVal = newValues as [number, number]\n        this.props.dataloader.addAmountFilter(nVal[0], nVal[1])\n    }\n\n    getColor(): string {\n        return \"#29b6f6\"\n    }\n\n    getOpacity(low: number, high: number): number {\n        const proportion = Math.max(0, Math.min(this.state.value[1], high) - Math.max(this.state.value[0], low)) / (high - low)\n        return 0.3 + 0.7 * proportion\n    }\n\n    getMarkPoint(x: number): Mark {\n        return {value: x, label: '$' + KMFormat(x)}\n    }\n\n    getMarks(domain: [number, number]): Mark[] {\n        const total_width = AmountSlider.getViewportWidth() * 0.8 - AmountSlider.getYAxisWidth()\n        const min_diff = 60 / total_width * (domain[1] - domain[0])\n        let marks: Mark[] = domain.map(e => this.getMarkPoint(e))\n        if (domain[0] < 0 && domain[1] > 0) {\n            marks = marks.filter(e => Math.abs(e.value) >= min_diff)\n            marks.push(this.getMarkPoint(0))\n        }\n\n        const step_size = Math.max((domain[1] - domain[0]) / 10, min_diff)\n        for (let i = 1; domain[0] + i * step_size <= domain[1] - min_diff; i++) {\n            const val = Number.parseFloat((domain[0] + i * step_size).toPrecision(2))\n            if (Math.abs(val) < 0.9 * step_size) continue\n            marks.push(this.getMarkPoint(val))\n        }\n\n        return marks\n    }\n}\n","import React, {Component} from \"react\";\nimport {DataLoaderProps, WordEntry} from \"../models/DataLoader\";\nimport {\n    Area,\n    AreaChart,\n    CartesianGrid,\n    Label,\n    ReferenceLine,\n    ResponsiveContainer,\n    Tooltip,\n    XAxis,\n    YAxis\n} from 'recharts';\nimport {KMFormat} from \"../util\";\nimport {Mark, Slider} from \"@material-ui/core\";\n\ninterface SliderProps extends DataLoaderProps {\n    hidden?: boolean\n}\n\ninterface SliderState {\n    value: [number, number]\n    domain: [string, string]\n    data: WordEntry[]\n}\n\nconst month_name = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\nexport default class DateSlider extends Component<SliderProps, SliderState> {\n\n    constructor(props: SliderProps) {\n        super(props);\n        this.state = {\n            value: [0, 1],\n            domain: ['0000-01', '9999-12'],\n            data: []\n        }\n    }\n\n\n    componentDidMount(): void {\n        this.props.dataloader.addChangeCallback(() =>\n            this.updateState()\n        )\n        this.updateState()\n    }\n\n    updateState() {\n        const {data, domain} = this.props.dataloader.getMonthBins()\n        const names = data.map(e => e.text)\n        this.setState({\n            data: data,\n            value: [names.indexOf(domain[0]) + 0.5, names.indexOf(domain[1]) + 0.5],\n        })\n    }\n\n    render(): React.ReactNode {\n        const data = this.state.data\n        return (\n            <div style={{\n                paddingLeft: '5%', paddingRight: `calc(5% + ${DateSlider.getYAxisWidth()}px)`,\n                height: '80vh', margin: \"auto\"\n            }} hidden={this.props.hidden || false}>\n                {(this.props.hidden || false) ? null : (\n                    <ResponsiveContainer height=\"90%\" width=\"100%\">\n                        <AreaChart data={data} barCategoryGap={0} margin={{bottom: 0, left: 0, right: 0}}>\n                            <defs>\n                                <linearGradient id=\"fillGrad\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                    <stop offset=\"5%\" stopColor={this.getColor()} stopOpacity={0.9}/>\n                                    <stop offset=\"95%\" stopColor={this.getColor()} stopOpacity={0.3}/>\n                                </linearGradient>\n                                <linearGradient id=\"fillGrad2\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\">\n                                    <stop offset={this.getLeftPoint() - 0.01} stopColor={this.getColor()}\n                                          stopOpacity={0.2}/>\n                                    <stop offset={this.getLeftPoint() + 0.01} stopColor={this.getColor()}\n                                          stopOpacity={0.6}/>\n                                    <stop offset={this.getRightPoint() - 0.01} stopColor={this.getColor()}\n                                          stopOpacity={0.6}/>\n                                    <stop offset={this.getRightPoint() + 0.01} stopColor={this.getColor()}\n                                          stopOpacity={0.2}/>\n                                </linearGradient>\n                            </defs>\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\n                            <XAxis dataKey=\"text\" hide orientation=\"top\" scale=\"band\"/>\n                            <YAxis tickFormatter={(v) => '$' + KMFormat(v)} width={DateSlider.getYAxisWidth()}>\n                                <Label angle={270} position=\"insideLeft\" style={{textAnchor: 'middle'}}>\n                                    Monthly Expense($)\n                                </Label>\n                            </YAxis>\n                            <Tooltip formatter={(value) => \"$\" + KMFormat(value as number)}\n                                     contentStyle={{display: 'none'}}/>\n                            <ReferenceLine y={0} label=\"\" stroke=\"black\"/>\n                            <Area type=\"monotone\" dataKey=\"value\" stroke={this.getColor()} fillOpacity={1}\n                                  fill=\"url(#fillGrad2)\"/>\n                        </AreaChart>\n                    </ResponsiveContainer>\n                )}\n                <div style={{paddingLeft: DateSlider.getYAxisWidth()}}>\n                    <Slider value={this.state.value}\n                            min={0} max={this.state.data.length}\n                            onChange={this.onRangeChange.bind(this)}\n                            onChangeCommitted={this.onRangeChangeCommitted.bind(this)}\n                            valueLabelDisplay=\"off\"\n                            marks={this.getMarks(this.state.data)}\n                            step={null}\n                            aria-labelledby=\"Date-slider\"\n                    />\n                </div>\n            </div>\n        )\n    }\n\n    static getViewportWidth() {\n        return Math.max(document.documentElement.clientWidth, window.innerWidth || 0)\n    }\n\n    static getYAxisWidth() {\n        return this.getViewportWidth() < 480 ? 0 : 72\n    }\n\n    onRangeChange(event: any, newValues: number | number[]) {\n        this.setState({value: newValues as [number, number]})\n    }\n\n    onRangeChangeCommitted(event: any, newValues: number | number[]) {\n        const nVal = (newValues as [number, number]).map(e => Math.round(e - 0.5))\n        const data = this.state.data\n        this.props.dataloader.addMonthFilter(data[nVal[0]].text, data[nVal[1]].text)\n    }\n\n    getColor(): string {\n        return \"#009688\"\n    }\n\n    getOpacity(index: number): number {\n        index += 0.5\n        return this.state.value[0] <= index && index <= this.state.value[1] ? 1 : 0.3\n    }\n\n    getLeftPoint(): number {\n        return (this.state.value[0] - 1) / (this.state.data.length - 1)\n    }\n\n    getRightPoint(): number {\n        return (this.state.value[1]) / (this.state.data.length - 1)\n    }\n\n    getMarks(data: WordEntry[]): Mark[] {\n        let marks = data.map((e, i) => ({value: i + 0.5, label: e.text}))\n        let years: Set<String> = new Set<String>();\n        marks.forEach((e, i) => {\n            const d = e.label.split('-')\n            if (years.has(d[0])) marks[i].label = month_name[Number.parseInt(d[1]) - 1]\n            else {\n                years.add(d[0])\n                marks[i].label = month_name[Number.parseInt(d[1]) - 1] + ` ${d[0]}`;\n            }\n        })\n        return marks\n    }\n}\n","import React from 'react';\nimport '../App.css';\nimport WordCloud from \"./WordCloud\";\nimport RecordTable from \"./RecordTable\";\nimport KeywordCrumb from \"./KeywordCrumb\";\nimport Paper from \"@material-ui/core/Paper\";\nimport DataLoader from \"../models/DataLoader\";\nimport CategoryPie from \"./CategoryPie\";\nimport {Tab, Tabs} from \"@material-ui/core\";\nimport AmountSlider from \"./AmountSlider\";\nimport QueryBuilder from \"../models/QueryBuilder\";\nimport DateSlider from \"./DateSlider\";\n\ninterface DatasetState {\n    value: number\n\n}\n\ninterface DatasetProps {\n    loader: DataLoader\n}\n\nexport default class DatasetView extends React.Component<DatasetProps, DatasetState> {\n    private value: number = 0\n\n    constructor(props: DatasetProps) {\n        super(props);\n\n        this.value = this.parseQuery(QueryBuilder.getInstance().getQuery())\n\n        this.state = {\n            value: this.value,\n        }\n\n        QueryBuilder.getInstance().addGenerator(this.generateQuery.bind(this), 1)\n    }\n\n    componentDidMount(): void {\n        this.props.loader.addChangeCallback(() => this.forceUpdate())\n    }\n\n    parseQuery(query: string): number {\n        if (query[0] === '?') query = query.slice(1)\n        const res = query.split('&').filter((e) => e.startsWith('tab='))\n        if (res.length === 0) return 0\n        return Number.parseInt(res[0].substr(4))\n    }\n\n    generateQuery(): string {\n        return 'tab=' + this.value\n    }\n\n    render() {\n        const loader = this.props.loader\n\n        const onValueChange = (e: any, value: number) => {\n                this.value = value\n                this.setState({value: value})\n                QueryBuilder.getInstance().update()\n        }\n\n        return (\n            <div>\n                <KeywordCrumb style={{margin: 10}} dataloader={loader}/>\n                <Tabs value={this.state.value}\n                      onChange={onValueChange}\n                      variant=\"scrollable\"\n                      indicatorColor=\"primary\" textColor=\"primary\">\n                    <Tab label=\"Keywords\"/>\n                    <Tab label=\"Fund\"/>\n                    <Tab label=\"Division\"/>\n                    <Tab label=\"Department\"/>\n                    <Tab label=\"GL\"/>\n                    <Tab label=\"Event\"/>\n                    <Tab label=\"Amount\"/>\n                    <Tab label=\"Date\"/>\n                </Tabs>\n\n                <Paper elevation={2} style={{padding: 10}}>\n                <WordCloud hidden={this.state.value !== 0} dataloader={loader}/>\n                <CategoryPie hidden={this.state.value !== 1} category={\"fund\"} dataloader={loader}/>\n                <CategoryPie hidden={this.state.value !== 2} category={\"division\"} dataloader={loader}/>\n                <CategoryPie hidden={this.state.value !== 3} category={\"department\"} dataloader={loader}/>\n                <CategoryPie hidden={this.state.value !== 4} category={\"gl\"} dataloader={loader}/>\n                <CategoryPie hidden={this.state.value !== 5} category={\"event\"} dataloader={loader}/>\n                <AmountSlider hidden={this.state.value !== 6} dataloader={loader}/>\n                <DateSlider hidden={this.state.value !== 7} dataloader={loader}/>\n                </Paper>\n                <br/>\n                <Paper elevation={2}>\n                <RecordTable dataloader={loader} groupBy={this.getCategory(this.state.value)} onChange={(value) => onValueChange(this, this.columnToTabID(value))}/>\n                </Paper>\n            </div>\n        );\n    }\n\n    private getCategory(index: number) {\n        switch (index) {\n            case 1: return \"fund\"\n            case 2: return \"division\"\n            case 3: return \"department\"\n            case 4: return \"gl\"\n            case 5: return \"event\"\n            case 7: return \"date\"\n            default: return undefined\n        }\n    }\n\n    private columnToTabID(column: string) {\n        switch (column) {\n            case \"description\": return 0\n            case \"fund\": return 1\n            case \"division\": return 2\n            case \"department\": return 3\n            case \"gl\": return 4\n            case \"event\": return 5\n            case \"amount\": return 6\n            case \"date\": return 7\n            case \"id\": return 0\n            default: return 0\n        }\n    }\n}\n","import {Link, Paper} from \"@material-ui/core\";\nimport ContactSupportIcon from \"@material-ui/icons/ContactSupport\";\nimport EmailIcon from '@material-ui/icons/Email';\nimport React from \"react\";\n\nexport default function Footer() {\n    return (\n        <footer>\n            <div style={{padding: 20}}>\n                <Link color=\"textSecondary\" href=\"https://forms.gle/ujBj7aWWvT9SHWHt9\" style={{padding: 20}}>\n                    <ContactSupportIcon/> Comments\n                </Link>\n                <Link color=\"textSecondary\" href=\"mailto:vtran@asucla.ucla.edu\" style={{padding: 20}}>\n                    <EmailIcon/> Professional Accountant\n                </Link>\n                <Link color=\"textSecondary\" href=\"mailto:usacouncil@asucla.ucla.edu\" style={{padding: 20}}>\n                    <EmailIcon/> USAC Council\n                </Link>\n            </div>\n        </footer>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport TopBar from \"./components/TopBar\";\nimport DatasetView from \"./components/DatasetView\"\nimport DataLoader from \"./models/DataLoader\";\nimport Datasets from \"./models/Datasets\";\nimport {Container, CssBaseline, Link} from \"@material-ui/core\";\nimport ContactSupportIcon from '@material-ui/icons/ContactSupport';\nimport Footer from \"./components/Footer\";\n\ninterface AppState {\n    loader: DataLoader\n}\n\nclass App extends React.Component<{}, AppState> {\n\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            loader: Datasets.getInstance().getDataLoader()\n        }\n    }\n\n    componentDidMount(): void {\n        Datasets.getInstance().addChangeCallback(() => {\n            this.setState({\n                loader: Datasets.getInstance().getDataLoader()\n            })\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <CssBaseline />\n                <TopBar />\n                <Container maxWidth=\"lg\">\n                <DatasetView loader={this.state.loader} />\n                <Footer />\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
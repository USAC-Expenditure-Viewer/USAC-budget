{"version":3,"sources":["Wordcloud.js","RecordTable.js","KeywordCrumb.js","KeywordList.js","Dataloader.js","TopBar.js","App.js","serviceWorker.js","index.js"],"names":["WordCloud","props","callbacks","getWordTooltip","word","text","Math","round","value","onWordClick","getCallback","bind","onWordMouseOut","onWordMouseOver","options","fontFamily","fontSizes","fontStyle","fontWeight","scale","deterministic","rotations","rotationAngles","transitionDuration","state","words","this","dataLoader","addWordsCallback","setWords","style","callback","event","isActive","element","target","select","on","keywordList","addWord","transition","attr","setState","Component","records","order","orderBy","addRecordCallback","setRecords","property","isAsc","isDesc","Paper","TableContainer","height","Table","stickyHeader","size","aria-label","onRequestSort","handleRequestSort","TableBody","stableSort","map","row","index","TableRow","key","TableCell","Date","date","toDateString","department","description","amount","TableFooter","position","bottom","backgroundColor","borderTop","borderTopColor","align","reduce","prev","curr","comparator","a","b","array","getComparator","stabilizedThis","el","sort","headCells","id","label","RecordTableHead","TableHead","headCell","sortDirection","TableSortLabel","active","direction","onClick","createSortHandler","KeywordCrumb","addChangeCallback","reRender","tick","list","getList","Breadcrumbs","separator","Link","color","reset","slice","sliceWord","length","Typography","KeywordList","push","includes","forEach","c","indexOf","Dataloader","input_url","fetch","then","res","json","result","listChangeCallback","getRecords","getWordList","root_word","filter","w","words_set","undefined","words_list","TopBar","AppBar","Toolbar","IconButton","edge","variant","App","loader","className","margin","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5ff1178c.chunk.js","sourcesContent":["/**\n * Created by TylerLiu on 2018/12/23.\n */\nimport 'd3-transition';\nimport { select } from 'd3-selection';\nimport React, { Component } from 'react';\nimport ReactWordcloud from \"react-wordcloud\";\n\nexport default class WordCloud extends Component{\n\n    constructor(props) {\n        super(props)\n\n        this.callbacks = {\n            getWordTooltip: word =>`${word.text} has $${Math.round(word.value * 100) / 100} in the category.`,\n            onWordClick: this.getCallback('onWordClick').bind(this),\n            onWordMouseOut: this.getCallback('onWordMouseOut').bind(this),\n            onWordMouseOver: this.getCallback('onWordMouseOver').bind(this),\n        };\n\n        this.options = {\n            fontFamily: 'impact',\n            fontSizes: [5, 60],\n            fontStyle: 'normal',\n            fontWeight: 'normal',\n            scale: 'log',\n            //spiral: 'archimedean',\n            deterministic: true,\n\n            rotations: 4,\n            rotationAngles: [-45, 90],\n\n            transitionDuration: 200,\n        }\n\n        this.state = {\n            words : [{text: 'Loading...', value: 100}]\n        }\n    }\n\n     componentDidMount() {\n         this.props.dataLoader.addWordsCallback(this.setWords.bind(this))\n     }\n\n    render() {\n        return(\n            <ReactWordcloud style={this.props.style} callbacks={this.callbacks} words={this.state.words} options={this.options}/>\n        )\n    }\n\n    getCallback(callback) {\n        return function(word, event) {\n            const isActive = callback !== 'onWordMouseOut';\n            const element = event.target;\n            const text = select(element);\n            text\n                .on('click', (() => {\n                    if (isActive) {\n                        this.props.keywordList.addWord(word.text);\n                    }\n                }))\n                .transition()\n                .attr('background', 'white')\n                .attr('text-decoration', isActive ? 'underline' : 'none');\n        };\n    }\n\n    setWords(words) {\n        this.setState({\n            words: words\n        })\n    }\n}","/**\n * Created by TylerLiu on 2018/12/23.\n */\nimport React, {Component} from 'react';\nimport {TableContainer, Paper, Table, TableHead, TableRow, TableCell, TableBody, TableFooter} from \"@material-ui/core\";\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\n\nexport default class WordCloud extends Component{\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            records : [],\n            order : 'asc',\n            orderBy : null,\n        }\n    }\n\n     componentDidMount() {\n         this.props.dataLoader.addRecordCallback(this.setRecords.bind(this))\n     }\n\n    setRecords(records) {\n        this.setState({\n            records: records,\n            order: \"asc\",\n            orderBy: null\n        })\n     }\n\n    handleRequestSort(event, property) {\n        let isAsc = this.state.orderBy === property && this.state.order === \"asc\";\n        let isDesc = this.state.orderBy === property && this.state.order === \"desc\";\n        this.setState({\n            order: isAsc ? \"desc\" : \"asc\",\n            orderBy: isDesc ? null : property,\n        })\n    }\n\n    render() {\n        return(\n            <Paper style={this.props.style}>\n                <TableContainer style={{height: \"100%\"}}>\n                    <Table stickyHeader size=\"small\" aria-label=\"Transaction Records\">\n                        <RecordTableHead order={this.state.order} orderBy={this.state.orderBy}\n                                         onRequestSort={this.handleRequestSort.bind(this)}/>\n                        <TableBody>\n                            {this.stableSort(this.state.records).map((row, index) => (\n                                <TableRow key={index}>\n                                    <TableCell>{new Date(row.date * 1000).toDateString()}</TableCell>\n                                    <TableCell>{row.department}</TableCell>\n                                    <TableCell>{row.description}</TableCell>\n                                    <TableCell>{row.amount}</TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                        <TableFooter style={{position: \"sticky\", bottom: 0, backgroundColor: \"#fafafa\", borderTop: 1, borderTopColor: \"#e0e0e0\"}}>\n                            <TableRow>\n                                <TableCell></TableCell>\n                                <TableCell></TableCell>\n                                <TableCell align=\"right\">Total: </TableCell>\n                                <TableCell>\n                                    {Math.round(this.state.records.reduce((prev, curr) => prev + curr.amount, 0) * 100) / 100}\n                                </TableCell>\n                            </TableRow>\n                        </TableFooter>\n                    </Table>\n                </TableContainer>\n            </Paper>\n        )\n    }\n\n    getComparator() {\n        let comparator = (a, b, orderBy) => (a[orderBy] < b[orderBy]) ? -1 : (a[orderBy] > b[orderBy] ? 1 : 0);\n        if (this.state.orderBy === null) return null;\n        return this.state.order === 'asc'\n            ? (a, b) => comparator(a, b, this.state.orderBy)\n            : (a, b) => -comparator(a, b, this.state.orderBy)\n    }\n\n    stableSort(array) {\n        const comparator = this.getComparator()\n        if (comparator === null) return array\n        const stabilizedThis = array.map((el, index) => [el, index])\n        stabilizedThis.sort((a, b) => {\n            const order = comparator(a[0], b[0])\n            if (order !== 0) return order\n            return a[1] - b[1]\n        });\n        return stabilizedThis.map((el) => el[0])\n    }\n}\n\nconst headCells = [\n    { id: 'date', label: 'Date' },\n    { id: 'department', label: 'Department' },\n    { id: 'description', label: 'Description' },\n    { id: 'amount', label: 'Amount' },\n];\n\nclass RecordTableHead extends Component {\n\n    createSortHandler(property) {\n        return (event) => this.props.onRequestSort(event, property);\n    }\n\n    render() {\n        return (\n            <TableHead>\n                <TableRow>\n                    {headCells.map((headCell) => (\n                        <TableCell\n                            key={headCell.id}\n                            sortDirection={this.props.orderBy === headCell.id ? this.props.order : false}\n                        >\n                            <TableSortLabel\n                                active={this.props.orderBy === headCell.id}\n                                direction={this.props.orderBy === headCell.id ? this.props.order : 'asc'}\n                                onClick={this.createSortHandler(headCell.id)}\n                            >\n                                {headCell.label}\n                            </TableSortLabel>\n                        </TableCell>\n                    ))}\n                </TableRow>\n            </TableHead>\n        );\n    }\n}","/**\n * Created by TylerLiu on 2018/12/23.\n */\nimport React, {Component} from 'react';\nimport {Breadcrumbs, Typography} from \"@material-ui/core\";\nimport Link from \"@material-ui/core/Link\";\n\nexport default class KeywordCrumb extends Component{\n\n    constructor(props) {\n        super(props)\n\n        this.props.keywordList.addChangeCallback(() =>this.reRender())\n\n        this.state = {\n            tick: 0\n        }\n    }\n\n    componentDidMount() {\n\n    }\n\n    render() {\n        let list = this.props.keywordList.getList()\n        return(\n            <Breadcrumbs separator=\"-\" style={this.props.style}>\n                <Link color=\"textPrimary\" onClick={()=>this.props.keywordList.reset()}>Transactions</Link>\n                {list.slice(0, -1).map(word=>(\n                    <Link color=\"textSecondary\" onClick={()=>this.props.keywordList.sliceWord(word)}>{word}</Link>\n                ))}\n                {list.length > 0 ? (<Typography color=\"textPrimary\">{list[list.length-1]}</Typography>) : null}\n            </Breadcrumbs>\n        )\n    }\n\n    reRender(){\n        this.setState({tick: this.state.tick + 1})\n    }\n}","\nexport default class KeywordList{\n\n    constructor(){\n        this.list = []\n        this.callback = []\n    }\n\n    addChangeCallback(callback) {\n        this.callback.push(callback)\n    }\n\n    addWord(word) {\n        if (!this.list.includes(word)) {\n            this.list.push(word)\n            this.callback.forEach(c => c(this.list))\n        }\n    }\n\n    sliceWord(word) {\n        let index = this.list.indexOf(word)\n        if (index !== -1) {\n            this.list = this.list.slice(0, index + 1)\n            this.callback.forEach(c => c(this.list))\n        }\n    }\n\n    reset() {\n        this.list = []\n        this.callback.forEach(c => c(this.list))\n    }\n\n    getList(){\n        return this.list\n    }\n}","\nexport default class Dataloader{\n\n    #data = null\n    #records_callbacks = []\n    #words_callbacks = []\n    #keywordList\n\n    constructor(input_url, keywordList) {\n        fetch(input_url)\n            .then(res => res.json())\n            .then(result =>{\n                this.#data = result\n                this.listChangeCallback()\n            })\n        this.#keywordList = keywordList\n        keywordList.addChangeCallback(() => this.listChangeCallback())\n    }\n\n    listChangeCallback() {\n        let records = this.getRecords(this.#keywordList.getList())\n        this.#records_callbacks.forEach(c=>c(records))\n        let words = this.getWordList(records)\n        this.#words_callbacks.forEach(c=>c(words))\n    }\n\n    addRecordCallback(callback) {\n        this.#records_callbacks.push(callback)\n    }\n\n    addWordsCallback(callback) {\n        this.#words_callbacks.push(callback)\n    }\n\n    getRecords(root_word) {\n        if (this.#data === null) {\n            return [{\"date\": \"\",\n                \"department\": \"\",\n                \"description\": \"Loading...\",\n                \"amount\": \"\",}];\n        }\n\n        if (root_word === null || root_word === [])\n            return this.#data\n\n        let records = this.#data.filter(row => {\n            return root_word.map((w) => row.words.includes(w)).reduce((a, b)=>a && b, true)\n        })\n        //records.sort((a, b) => b.amount - a.amount)\n        return records\n    }\n\n    getWordList(records) {\n        if (this.#data === null) {\n            return [{text: 'Loading...', value: 100}];\n        }\n\n        let words_set = {}\n        records.forEach(row => {\n            row.words.forEach(w => {\n                if (words_set[w] === undefined) words_set[w] = row.amount;\n                else words_set[w] += row.amount;\n            })\n        })\n\n        let words_list = []\n        for (let w in words_set) {\n            words_list.push({text: w, value: words_set[w]})\n        }\n\n        words_list.sort((a, b) => a.value - b.value)\n\n        return words_list\n    }\n}","import {AppBar, IconButton, Toolbar, Typography} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport React from \"react\";\n\nexport default function TopBar() {\n    return (\n        <AppBar position=\"sticky\">\n            <Toolbar>\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                    <MenuIcon/>\n                </IconButton>\n                <Typography variant=\"h6\">\n                    USAC Budget/Spendings 2018-2019\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    )\n}","import React from 'react';\nimport './App.css';\nimport WordCloud from \"./Wordcloud\";\nimport RecordTable from \"./RecordTable\";\nimport KeywordCrumb from \"./KeywordCrumb\";\nimport Paper from \"@material-ui/core/Paper\";\nimport KeywordList from \"./KeywordList\";\nimport Dataloader from \"./Dataloader\";\nimport TopBar from \"./TopBar\";\n\nfunction App() {\n    let list = new KeywordList()\n    let loader = new Dataloader(\"/expense_summary.json\", list)\n    return (\n        <div>\n            <TopBar/>\n            <Paper variant=\"outlined\" className=\"App\" style={{margin: '0 10%'}}>\n                <KeywordCrumb style={{margin: 10}} keywordList={list}/>\n                <WordCloud style={{width: '100%', height: '80vh'}} keywordList={list} dataLoader={loader}/>\n                <RecordTable style={{height: '80vh'}} dataLoader={loader}/>\n            </Paper>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
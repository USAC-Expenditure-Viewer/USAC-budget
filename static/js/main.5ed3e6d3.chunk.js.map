{"version":3,"sources":["util.ts","components/WordCloud.tsx","models/QueryBuilder.ts","models/DataLoader.ts","models/Datasets.ts","components/RecordTable.tsx","components/KeywordCrumb.tsx","components/CategoryPie.tsx","components/AmountSlider.tsx","components/DateSlider.tsx","components/ExplanationText.tsx","components/DatasetView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["KMFormat","x","Number","isNaN","suffix","Math","abs","toPrecision","KMFToNum","str","unit","includes","replace","parseFloat","WordCloud","props","callbacks","getWordTooltip","word","text","value","onWordClick","getCallback","bind","onWordMouseOut","onWordMouseOver","options","fontFamily","fontSizes","fontStyle","fontWeight","scale","deterministic","rotations","rotationAngles","transitionDuration","state","words","this","dataloader","addChangeCallback","setWords","style","height","hidden","getWordList","slice","callback","event","isActive","select","target","on","addKeywordFilter","transition","attr","forceUpdate","Component","QueryBuilder","queryString","generators","Map","window","location","search","instance","index","set","query","values","map","c","join","path","href","substr","indexOf","history","pushState","isOfTypeCategory","input","DataLoader","dataset","data","filters","dataChangeCallbacks","total_amount","otherDepth","otherCategory","peekTable","setDataset","sliceFilter","loadDataset","Papa","pathname","download","header","complete","results","e","date","Date","amount","__parsed_extra","filter","onLoad","reduce","prev","curr","parseQuery","getInstance","getQuery","addGenerator","generateQueryString","listChangeCallback","split","forEach","entry","sign_location","q","v","addCategoryFilter","atob","valuesa","addAmountFilter","valuesd","addMonthFilter","console","log","category","name","btoa","update","push","depth","active","length","words_set","getRecords","row","w","get","chosen_words","words_list","entries","val","sort","a","b","records","getLastFilter","category_set","cate_name","category_list","numBin","domain","previousValue","currentValue","min","max","MAX_VALUE","MIN_VALUE","allMin","allMax","bins","bin_size","i","low","high","month_string","getFullYear","padStart","getMonth","localeCompare","month_num","s","parseInt","next_month","remaining_length","word_index","new_index","Datasets","datasets","currentDataset","dataLoader","ready","parseDataset","getQueryString","fetch","then","res","json","getDatasetTitle","startsWith","match","toString","month_name","CurrencyFormatter","color","toLocaleString","currency","DateFormatter","toDateString","DateGroupFormatter","column","key","year","month","title","RecordTable","TableHeaderCell","Cell","onClick","setHighlight","selectedColumn","backgroundColor","getSelectedBackgroundColor","getBackgroundColor","summaryItems","columnName","type","columns","tableColumnExtension","wordWrapEnabled","groupSummaryItems","showInGroupFooter","alignByColumn","groupExtension","showWhenGrouped","groupingColumnExtensions","criteria","dateToYearMonth","columnWidth","width","exporter","groupWeight","searchValue","integratedSortingColumnExtensions","React","createRef","sortingState","direction","groupBy","undefined","dataHeight","isOpening","isClosing","buildGroupWeightTable","clear","getCategories","compare","setState","expandTable","collapseTable","prevProps","prevState","snapshot","getGroupSortingState","getPeekTable","setPeekTable","rows","id","Paper","elevation","onMouseEnter","onMouseLeave","sorting","grouping","onValueChange","searchLock","totalItems","groupItems","columnExtensions","for","formatterComponent","defaultHiddenColumnNames","cellComponent","contentComponent","showSortingControls","emptyMessageComponent","startExport","current","exportGrid","ref","onSave","workbook","table","peekTimer","setInterval","incHeight","clearInterval","pauseTimer","expandTimer","collapseTimer","decHeight","sorts","setSorting","isOfTypeTabs","onChange","xlsx","writeBuffer","buffer","saveAs","Blob","getCurrentDatasetName","KeywordCrumb","drawer","loader","list","getFilters","dataset_list","getDatasets","Breadcrumbs","separator","Typography","align","Tooltip","Link","setYear","getDatasetTotal","getColor","Drawer","anchor","open","onClose","List","ListItem","button","setCurrentDataset","ListItemIcon","ListItemText","primary","CategoryPie","pieDepth","selectedSlices","delete","lastFilter","dataKey","nameKey","clickSlice","label","renderCustomizedLabel","getTotal","labelLine","fill","formatter","contentStyle","padding","margin","borderRadius","totalValue","y","textAnchor","cx","dominantBaseline","has","AmountSlider","updateState","getAmountBins","paddingLeft","paddingRight","getYAxisWidth","barCategoryGap","bottom","left","right","strokeDasharray","hide","orientation","tickFormatter","round","angle","position","stroke","opacity","getOpacity","Slider","onRangeChange","onChangeCommitted","onRangeChangeCommitted","valueLabelDisplay","valueLabelFormat","marks","getMarks","aria-labelledby","newValues","nVal","min_diff","getViewportWidth","getMarkPoint","step_size","document","documentElement","clientWidth","innerWidth","DateSlider","getMonthBins","names","x1","y1","x2","y2","offset","stopColor","stopOpacity","getLeftPoint","getRightPoint","display","fillOpacity","step","years","Set","d","add","ExplanationText","withStyles","theme","root","minWidth","typography","fontWeightRegular","selected","Tab","DatasetView","generateQuery","selBox","createElement","top","body","appendChild","focus","execCommand","removeChild","alert","onTabChange","zIndex","Button","copyURL","aria-label","App","getDataLoader","yearSelected","CssBaseline","Container","maxWidth","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","zoom","navigator","serviceWorker","registration","unregister","catch","error","message"],"mappings":"+UAQO,SAASA,EAASC,GACrB,GAAIC,OAAOC,MAAMF,GAAI,MAAO,GAC5B,IAAIG,EAAS,GAWb,OAVIC,KAAKC,IAAIL,IAAM,KACfG,EAAS,IACTH,GAAK,KACEI,KAAKC,IAAIL,IAAM,KACtBG,EAAS,IACTH,GAAK,KACEI,KAAKC,IAAIL,IAAM,MACtBG,EAAS,IACTH,GAAK,KAEFA,EAAEM,YAAY,GAAKH,EAGvB,SAASI,EAASC,GACrB,IAAIC,EAAO,EAaX,OAZID,EAAIE,SAAS,OACbD,EAAO,IACPD,EAAMA,EAAIG,QAAQ,IAAK,KAEvBH,EAAIE,SAAS,OACbD,EAAO,IACPD,EAAMA,EAAIG,QAAQ,IAAK,KAEvBH,EAAIE,SAAS,OACbF,EAAMA,EAAIG,QAAQ,IAAK,IACvBF,EAAO,KAEJR,OAAOW,WAAWJ,GAAOC,E,ICxBfI,E,kDAuBjB,WAAYC,GAAyB,IAAD,8BAChC,cAAMA,IAvBFC,UAAuB,CAC3BC,eAAgB,SAACC,GAAD,yCAA4CA,EAAKC,KAAjD,oBAAiEnB,EAASkB,EAAKE,SAC/FC,YAAa,EAAKC,YAAY,eAAeC,KAAhC,gBACbC,eAAgB,EAAKF,YAAY,kBAAkBC,KAAnC,gBAChBE,gBAAiB,EAAKH,YAAY,mBAAmBC,KAApC,iBAkBe,EAf5BG,QAAuB,CAC3BC,WAAY,SACZC,UAAW,CAAC,GAAI,IAChBC,UAAW,SACXC,WAAY,SACZC,MAAO,MAEPC,eAAe,EAEfC,UAAW,EACXC,eAAgB,EAAE,GAAI,IAEtBC,mBAAoB,KAMpB,EAAKC,MAAQ,CACTC,MAAO,CAAC,CAAClB,KAAM,aAAcC,MAAO,OAJR,E,gEAShCkB,KAAKvB,MAAMwB,WAAWC,kBAAkBF,KAAKG,SAASlB,KAAKe,S,+BAI3D,OACI,yBAAKI,MAAO,CAACC,OAAQ,QAASC,OAAQN,KAAKvB,MAAM6B,QAC3CN,KAAKvB,MAAM6B,OAAmB,KAC5B,kBAAC,IAAD,CAAgB5B,UAAWsB,KAAKtB,UAAWqB,MAAOC,KAAKvB,MAAMwB,WAAWM,cAAcC,MAAM,EAAG,IAC/EpB,QAASY,KAAKZ,a,kCAMlCqB,GAAmB,IAAD,OAC1B,OAAO,SAAC7B,EAAY8B,GAChB,IAAMC,EAAwB,mBAAbF,EAEJG,YAAOF,EAAMG,QAErBC,GAAG,SAAU,WACNH,GACA,EAAKlC,MAAMwB,WAAWc,iBAAiBnC,EAAKC,SAGnDmC,aACAC,KAAK,aAAc,SACnBA,KAAK,kBAAmBN,EAAW,YAAc,W,iCAK1DX,KAAKkB,kB,GAhE0BC,a,0DCdlBC,E,WAYjB,aAAuB,yBATfC,iBASc,OARdC,WAAwC,IAAIC,IAShDvB,KAAKqB,YAAcG,OAAOC,SAASC,OAAOpD,QAAQ,IAAK,I,+DALvD,OADsB,OAAlB0B,KAAK2B,WAAmB3B,KAAK2B,SAAW,IAAIP,GACzCpB,KAAK2B,a,gDASZ,OAAO3B,KAAKqB,c,mCAGHZ,EAAwBmB,GACjC5B,KAAKsB,WAAWO,IAAID,EAAOnB,K,+BAI3B,IACMqB,EADkB,YAAI9B,KAAKsB,WAAWS,UAAUC,KAAI,SAACC,GAAD,OAAOA,OAC3CC,KAAK,KAEvBC,EAAOX,OAAOC,SAASW,KACvBD,EAAK9D,SAAS,OAAM8D,EAAOA,EAAKE,OAAO,EAAGF,EAAKG,QAAQ,OAC3Dd,OAAOe,QAAQC,UAAU,CAACL,KAAMA,EAAO,IAAML,GAAQ,GAAIK,EAAO,IAAML,O,KA9BzDV,EAEFO,SAAgC,K,qBCuB5C,SAASc,EAAkBC,GAC9B,MAAO,CAAC,OAAQ,WAAY,aAAc,KAAM,SAASrE,SAASqE,G,IAoBjDC,E,WAWjB,WAAYC,GAAyB,yBAT7BC,KAAoB,GASQ,KAR5BC,QAAoB,GAQQ,KAP5BC,oBAAsC,GAOV,KAN5BC,aAAuB,EAMK,KAL5BJ,QAA0B,KAKE,KAJ5BK,WAAsB,EAIM,KAH5BC,cAA2B,OAGC,KAF5BC,WAAsB,EAG1BnD,KAAK4C,QAAUA,EACf5C,KAAKoD,WAAWR,G,uDAGTA,GACP5C,KAAKqD,YAAY,GACjBrD,KAAKsD,YAAYV,K,mCAIjB,OAAO5C,KAAK4C,U,kCAGIA,GAAyB,IAAD,OACxB,OAAZA,GACJW,QAAW/B,OAAOC,SAAS+B,SAAW,oBAAsBZ,EAAU,OAClE,CACIa,UAAU,EACVC,QAAQ,EACRC,SAAU,SAACC,GACP,EAAKf,KAAOe,EAAQf,KAAKb,KAAI,SAAC6B,GAI1B,OAHAA,EAAEC,KAAO,IAAIC,KAAiC,IAA5BnG,OAAOW,WAAWsF,EAAEC,OACtCD,EAAEG,OAASpG,OAAOW,WAAWsF,EAAEG,QAC/BH,EAAE9D,MAAQ8D,EAAEI,gBAAkB,GACvBJ,KACRK,QAAO,SAAAL,GAAC,OAAKjG,OAAOC,MAAMgG,EAAEG,WAE/B,EAAKG,c,+BAMjBnE,KAAKgD,aAAehD,KAAK6C,KAAKuB,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,EAAKN,SAAQ,GACzEhE,KAAKuE,WAAWnD,EAAaoD,cAAcC,YAC3CrD,EAAaoD,cAAcE,aAAa1E,KAAK2E,oBAAoB1F,KAAKe,MAAO,GAC7EA,KAAK4E,uB,iCAGU9C,GAAgB,IAAD,OACb,MAAbA,EAAM,KAAYA,EAAQA,EAAMtB,MAAM,IAC1C,IAAM9B,EAAYsB,KAAK+C,oBACvB/C,KAAK+C,oBAAsB,GAC3B,IACIjB,EAAM+C,MAAM,KAAKC,SAAQ,SAAAC,GACrB,GAAKA,EAAM1G,SAAS,KAApB,CACA,IAAM2G,EAAgBD,EAAMzC,QAAQ,KAC9B2C,EAAIF,EAAM1C,OAAO,EAAG2C,GACpBE,EAAIH,EAAM1C,OAAO2C,EAAgB,GACvC,OAAQC,GACJ,IAAK,UACD,EAAKlE,iBAAiBmE,GACtB,MACJ,IAAK,OACL,IAAK,WACL,IAAK,aACL,IAAK,KACL,IAAK,QACD,EAAKC,kBAAkBF,EAAGG,KAAKF,IAC/B,MACJ,IAAK,SACD,IAAKA,EAAE7G,SAAS,MAAO,OACvB,IAAMgH,EAAUH,EAAEL,MAAM,MAAM7C,KAAI,SAAA6B,GAAC,OAAI3F,EAAS2F,MAChD,EAAKyB,gBAAgBD,EAAQ,GAAIA,EAAQ,IACzC,MACJ,IAAK,OACD,IAAKH,EAAE7G,SAAS,MAAO,OACvB,IAAMkH,EAAUL,EAAEL,MAAM,MACxB,EAAKW,eAAeD,EAAQ,GAAIA,EAAQ,SAItD,MAAO1B,GACL4B,QAAQC,IAAI7B,GAEhB7D,KAAK+C,oBAAsBrE,I,4CAgB3B,OAZgBsB,KAAK8C,QAAQd,KAAI,SAACsC,GAC9B,OAAQA,EAAKqB,UACT,IAAK,UACD,MAAO,WAAarB,EAAKsB,KAC7B,IAAK,SACD,MAAO,UAAYtB,EAAKsB,KAAKtH,QAAQ,IAAK,MAC9C,IAAK,OACD,MAAO,QAAUgG,EAAKsB,KAAKtH,QAAQ,IAAK,MAC5C,QACI,OAAOgG,EAAKqB,SAAW,IAAME,KAAKvB,EAAKsB,UAGpC1D,KAAK,O,2CAIpBlC,KAAK+C,oBAAoB+B,SAAQ,SAAA7C,GAAC,OAAIA,OACtCb,EAAaoD,cAAcsB,W,wCAGbrF,GACdT,KAAK+C,oBAAoBgD,KAAKtF,K,sCAI9B,OAAOT,KAAKiD,a,oCAGF+C,GACVhG,KAAKiD,WAAa+C,EAClBhG,KAAK4E,uB,yCAIL,OAAO5E,KAAKkD,gB,uCAGCyC,GACb3F,KAAKkD,cAAgByC,EACrB3F,KAAK4E,uB,mCAGIqB,GACTjG,KAAKmD,UAAY8C,EACjBjG,KAAK4E,uB,qCAIL,OAAO5E,KAAKmD,Y,mCAIZ,OAAyB,IAArBnD,KAAK6C,KAAKqD,OACH,GAGiB,IAAxBlG,KAAK8C,QAAQoD,OACNlG,KAAK6C,KAGT7C,KAAK8C,QAAQ9C,KAAK8C,QAAQoD,OAAS,GAAGtE,Q,oCAI7C,GAAyB,IAArB5B,KAAK6C,KAAKqD,OACV,MAAO,GAGX,IAAIC,EAAY,IAAI5E,IACpBvB,KAAKoG,aAAatB,SAAQ,SAAAuB,GACtBA,EAAItG,MAAM+E,SAAQ,SAAAwB,GACdH,EAAUtE,IAAIyE,GAAIH,EAAUI,IAAID,IAAM,GAAKD,EAAIrC,cAIvD,IAZuB,EAYjBwC,EAAexG,KAAK8C,QAAQoB,QAAO,SAAAL,GAAC,MAAmB,YAAfA,EAAE8B,YAAwB3D,KAAI,SAAA6B,GAAC,OAAIA,EAAE+B,QAE/Ea,EAA0B,GAdP,cAeCN,EAAUO,WAfX,IAevB,2BAA6C,CAAC,IAAD,yBAAnC9H,EAAmC,KAA7B+H,EAA6B,KACpCH,EAAanI,SAASO,IACvB6H,EAAWV,KAAK,CAAClH,KAAMD,EAAME,MAAO6H,KAjBrB,8BAsBvB,OAFAF,EAAWG,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEhI,MAAQ+H,EAAE/H,SAE/B2H,I,oCAGGd,GAAkC,IAAD,EAKvCoB,EAJJ,GAAyB,IAArB/G,KAAK6C,KAAKqD,OACV,MAAO,GAKPa,GADA,UAAA/G,KAAKgH,uBAAL,eAAsBrB,YAAaA,EACzB3F,KAAK8C,QAAQoD,QAAU,EAAIlG,KAAK8C,QAAQ9C,KAAK8C,QAAQoD,OAAS,GAAGtE,MAAQ5B,KAAK6C,KAE9E7C,KAAKoG,aAGnB,IAAIa,EAAe,IAAI1F,IACvBwF,EAAQjC,SAAQ,SAAAuB,GACZ,IAAMa,EAAYb,EAAIV,GACtBsB,EAAapF,IAAIqF,GAAYD,EAAaV,IAAIW,IAAc,GAAKb,EAAIrC,WAGzE,IAlB2C,EAkBvCmD,EAA6B,GAlBU,cAmBnBF,EAAaP,WAnBM,IAmB3C,2BAAgD,CAAC,IAAD,yBAAtC9H,EAAsC,KAAhC+H,EAAgC,KAC5CQ,EAAcpB,KAAK,CAAClH,KAAMD,EAAME,MAAO6H,KApBA,8BAyB3C,OAFAQ,EAAcP,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE/H,MAAQgI,EAAEhI,SAElCqI,I,oCAGGC,GACV,GAAyB,IAArBpH,KAAK6C,KAAKqD,OACV,MAAO,CAACrD,KAAM,GAAIwE,OAAQ,CAAC,EAAG,IAGlC,IAAIN,EACAM,EAAkC,KACV,IAAxBrH,KAAK8C,QAAQoD,QAAmE,WAAnDlG,KAAK8C,QAAQ9C,KAAK8C,QAAQoD,OAAS,GAAGP,UACnEoB,EAAU/G,KAAK8C,QAAQoD,QAAU,EAAIlG,KAAK8C,QAAQ9C,KAAK8C,QAAQoD,OAAS,GAAGtE,MAAQ5B,KAAK6C,KAExFwE,EADerH,KAAK8C,QAAQ9C,KAAK8C,QAAQoD,OAAS,GAAGN,KAAKf,MAAM,KAAK7C,KAAI,SAAA6B,GAAC,OAAI3F,EAAS2F,OAGvFkD,EAAU/G,KAAKoG,aAZwD,MAcpDW,EAAQ3C,QAAQ,SAACkD,EAAeC,GAAhB,MACnC,CAACxJ,KAAKyJ,IAAIF,EAAc,GAAIC,EAAavD,QACrCjG,KAAK0J,IAAIH,EAAc,GAAIC,EAAavD,WAAW,CAACpG,OAAO8J,UAAW9J,OAAO+J,YAhBV,mBActEC,EAdsE,KAc9DC,EAd8D,KAkB5D,OAAXR,IAAiBA,EAAS,CAACO,EAAQC,IAKvC,IAFA,IAAIC,EAAoB,GACpBC,IAHJF,GAAU,MAGeD,GAAUR,EAC1BY,EAAI,EAAGA,EAAIZ,EAAQY,IACxBF,EAAK/B,KAAK,CACNkC,IAAKL,EAASI,EAAID,EAAUG,KAAMN,GAAUI,EAAI,GAAKD,EACrDjJ,MAAO,EAAG8G,KAAMlI,EAASkK,GAAUI,EAAI,IAAOD,KAWtD,OAPAhB,EAAQjC,SAAQ,SAACjB,GACbiE,EAAKhD,SAAQ,SAACgC,GACNA,EAAEmB,KAAOpE,EAAEG,QAAUH,EAAEG,OAAS8C,EAAEoB,OAClCpB,EAAEhI,OAAS+E,EAAEG,cAIlB,CAACnB,KAAMiF,EAAMT,OAAQA,K,qCAI5B,GAAyB,IAArBrH,KAAK6C,KAAKqD,OACV,MAAO,CAACrD,KAAM,CAAC,CAAChE,KAAM,UAAWC,MAAO,IAAKuI,OAAQ,CAAC,UAAW,YAGrE,IAAIN,EACAM,EAAkC,KACV,IAAxBrH,KAAK8C,QAAQoD,QAAmE,SAAnDlG,KAAK8C,QAAQ9C,KAAK8C,QAAQoD,OAAS,GAAGP,UACnEoB,EAAU/G,KAAK8C,QAAQoD,QAAU,EAAIlG,KAAK8C,QAAQ9C,KAAK8C,QAAQoD,OAAS,GAAGtE,MAAQ5B,KAAK6C,KAExFwE,EADerH,KAAK8C,QAAQ9C,KAAK8C,QAAQoD,OAAS,GAAGN,KAAKf,MAAM,MAGhEkC,EAAU/G,KAAKoG,aAZyC,MAcrCW,EAAQ3C,QAAO,SAACkD,EAAeC,GAClD,IAAMY,GAAgBZ,EAAazD,KAAKsE,cAAgB,IAAIC,SAAS,EAAG,KAAO,KAAQd,EAAazD,KAAKwE,WAAa,EAAK,IAAID,SAAS,EAAG,KAC3I,MAAO,CAACf,EAAc,GAAGiB,cAAcJ,GAAgB,EAAIb,EAAc,GAAKa,EAC1Eb,EAAc,GAAGiB,cAAcJ,GAAgB,EAAIb,EAAc,GAAKa,KAC3E,CAAC,UAAW,YAlB6C,mBAcvDP,EAduD,KAc/CC,EAd+C,KAoB7C,OAAXR,IAAiBA,EAAS,CAACO,EAAQC,IAEvC,IAAIC,EAA4B,IAAIvG,IACpCwF,EAAQjC,SAAQ,SAACjB,GACb,IAAMsE,GAAgBtE,EAAEC,KAAKsE,cAAgB,IAAIC,SAAS,EAAG,KAAO,KAAQxE,EAAEC,KAAKwE,WAAa,EAAK,IAAID,SAAS,EAAG,KACrHP,EAAKjG,IAAIsG,GAAeL,EAAKvB,IAAI4B,IAAiB,GAAKtE,EAAEG,WAM7D,IAHA,IAAInB,EAAoB,YAAIiF,EAAKpB,WAAW1E,KAAI,SAAC6B,GAAD,MAAQ,CAAChF,KAAMgF,EAAE,GAAI/E,MAAO+E,EAAE,OACzE+C,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEhI,KAAK0J,cAAczB,EAAEjI,SAErB,IAAhBgE,EAAKqD,QAAgBrD,EAAKqD,OAAS,IAAI,CAC1C,IAAIsC,EAAY3F,EAAKA,EAAKqD,OAAS,GAAGrH,KAAKgG,MAAM,KAAK7C,KAAI,SAACyG,GAAD,OAAO7K,OAAO8K,SAASD,MAC5D,KAAjBD,EAAU,GAAWA,EAAU,KAC9BA,EAAY,CAACA,EAAU,GAAK,EAAG,GACpC,IAAIG,GAAcH,EAAU,GAAK,IAAIH,SAAS,EAAG,KAAO,KAAOG,EAAU,GAAK,IAAIH,SAAS,EAAG,KAC9FxF,EAAKkD,KAAK,CAAClH,KAAM8J,EAAY7J,MAAO,IAGxC,MAAO,CAAC+D,KAAMA,EAAMwE,OAAQA,K,iCAI5B,OAA4B,IAAxBrH,KAAK8C,QAAQoD,OACNlG,KAAKgD,aAEThD,KAAK8C,QAAQ9C,KAAK8C,QAAQoD,OAAS,GAAGlC,S,wCAI7C,OAAOhE,KAAKgD,e,mCAIZ,OAAOhD,KAAK8C,U,sCAIZ,OAA4B,IAAxB9C,KAAK8C,QAAQoD,OACN,KACClG,KAAK8C,QAAQ9C,KAAK8C,QAAQoD,OAAS,K,kCAGvC0C,GACR5I,KAAKiD,WAAa,EAClBjD,KAAK8C,QAAU9C,KAAK8C,QAAQtC,MAAM,EAAGoI,GACrC5I,KAAK4E,uB,uCAGQhG,GACb,GAAyB,IAArBoB,KAAK6C,KAAKqD,SACVlG,KAAK8C,QAAQsB,QAAO,SAACC,EAAMC,GAAP,OAAgBD,GAA2B,YAAlBC,EAAKqB,UAA0BrB,EAAKsB,OAAShH,KAAO,GAArG,CAGA,IAAIiK,EACJ,GAA4B,IAAxB7I,KAAK8C,QAAQoD,OAEb2C,EADmB7I,KAAK8C,QAAQ9C,KAAK8C,QAAQoD,OAAS,GAAGtE,MACjCsC,QAAO,SAACL,GAAD,OAAOA,EAAE9D,MAAM1B,SAASO,WAEvDiK,EAAa7I,KAAK6C,KAAKqB,QAAO,SAAAL,GAAC,OAAIA,EAAE9D,MAAM1B,SAASO,MAGxDoB,KAAK8C,QAAQiD,KAAK,CACdJ,SAAU,UACVC,KAAMhH,EACNgD,MAAOiH,EACP7E,OAAQ6E,EACHzE,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,EAAKN,SAAQ,KAGpDhE,KAAK4E,wB,wCAGSe,EAAoB7G,GAAgB,IAAD,EACjD,GAAyB,IAArBkB,KAAK6C,KAAKqD,SACVlG,KAAK8C,QAAQsB,QAAO,SAACC,EAAMC,GAAP,OAAgBD,GAASC,EAAKqB,WAAaA,GAAYrB,EAAKsB,OAAS9G,KAAQ,GAArG,CAOA,IAAIgK,EACJ,IALI,UAAA9I,KAAKgH,uBAAL,eAAsBrB,YAAaA,IACnC3F,KAAK8C,QAAU9C,KAAK8C,QAAQtC,MAAM,GAAI,IAId,IAAxBR,KAAK8C,QAAQoD,OAGb4C,EAFmB9I,KAAK8C,QAAQ9C,KAAK8C,QAAQoD,OAAS,GAAGtE,MAElCsC,QAAO,SAACL,GAAD,OAAQA,EAAE8B,KAAc7G,UAGtDgK,EAAY9I,KAAK6C,KAAKqB,QAAO,SAAAL,GAAC,OAAKA,EAAE8B,KAAc7G,KAGvDkB,KAAK8C,QAAQiD,KAAK,CACdJ,SAAUA,EACVC,KAAM9G,EACN8C,MAAOkH,EACP9E,OAAQ8E,EAAU1E,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,EAAKN,SAAQ,KAGjEhE,KAAK4E,wB,2CAIYe,EAAoB7G,GAAgB,IAAD,EACpD,GAAyB,IAArBkB,KAAK6C,KAAKqD,SACVlG,KAAK8C,QAAQsB,QAAO,SAACC,EAAMC,GAAP,OAAgBD,GAASC,EAAKqB,WAAaA,GAAYrB,EAAKsB,OAAS9G,KAAQ,GAArG,CAOA,IAAIgK,EACJ,IALI,UAAA9I,KAAKgH,uBAAL,eAAsBrB,YAAaA,IACnC3F,KAAK8C,QAAU9C,KAAK8C,QAAQtC,MAAM,GAAI,IAId,IAAxBR,KAAK8C,QAAQoD,OAGb4C,EAFmB9I,KAAK8C,QAAQ9C,KAAK8C,QAAQoD,OAAS,GAAGtE,MAElCsC,QAAO,SAACL,GAAD,OAAQA,EAAE8B,KAAc7G,UAGtDgK,EAAY9I,KAAK6C,KAAKqB,QAAO,SAAAL,GAAC,OAAKA,EAAE8B,KAAc7G,KAGvDkB,KAAK8C,QAAQiD,KAAK,CACdJ,SAAUA,EACVC,KAAM9G,EACN8C,MAAOkH,EACP9E,OAAQ8E,EAAU1E,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,EAAKN,SAAQ,KAGjEhE,KAAK4E,wB,sCAIOqD,EAAaC,GACzB,GAAyB,IAArBlI,KAAK6C,KAAKqD,OAAd,CAEIlG,KAAK8C,QAAQoD,OAAS,GAAwD,WAAnDlG,KAAK8C,QAAQ9C,KAAK8C,QAAQoD,OAAS,GAAGP,WACjE3F,KAAK8C,QAAU9C,KAAK8C,QAAQtC,MAAM,GAAI,IAE1C,IACMsI,GADa9I,KAAK8C,QAAQoD,OAAS,EAAIlG,KAAK8C,QAAQ9C,KAAK8C,QAAQoD,OAAS,GAAGtE,MAAQ5B,KAAK6C,MAE3FqB,QAAO,SAACL,GAAD,OAAQoE,GAAOpE,EAAEG,QAAUH,EAAEG,QAAUkE,KAEnDlI,KAAK8C,QAAQiD,KAAK,CACdJ,SAAU,SACVC,KAAMlI,EAASuK,GAAO,IAAMvK,EAASwK,GACrCtG,MAAOkH,EACP9E,OAAQ8E,EACH1E,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,EAAKN,SAAQ,KAGpDhE,KAAK4E,wB,qCAGMqD,EAAaC,GACxB,GAAyB,IAArBlI,KAAK6C,KAAKqD,OAAd,CAEIlG,KAAK8C,QAAQoD,OAAS,GAAwD,SAAnDlG,KAAK8C,QAAQ9C,KAAK8C,QAAQoD,OAAS,GAAGP,WACjE3F,KAAK8C,QAAU9C,KAAK8C,QAAQtC,MAAM,GAAI,IAE1C,IACMsI,GADa9I,KAAK8C,QAAQoD,OAAS,EAAIlG,KAAK8C,QAAQ9C,KAAK8C,QAAQoD,OAAS,GAAGtE,MAAQ5B,KAAK6C,MAE3FqB,QAAO,SAACL,GACL,IAAMsE,GAAgBtE,EAAEC,KAAKsE,cAAgB,IAAIC,SAAS,EAAG,KAAO,KAAQxE,EAAEC,KAAKwE,WAAa,EAAK,IAAID,SAAS,EAAG,KACrH,OAAOJ,EAAIM,cAAcJ,IAAiB,GAAKA,EAAaI,cAAcL,IAAS,KAG3FlI,KAAK8C,QAAQiD,KAAK,CACdJ,SAAU,OACVC,KAAMqC,EAAM,IAAMC,EAClBtG,MAAOkH,EACP9E,OAAQ8E,EACH1E,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAOC,EAAKN,SAAQ,KAGpDhE,KAAK4E,0B,KCreQmE,E,WAejB,aAAuB,IAAD,gCAZdC,SAAqB,GAYP,KAXdC,eAAgC,KAWlB,KAVdvK,UAA4B,GAUd,KATdwK,gBASc,OARdC,OAAiB,EASrBnJ,KAAKoJ,aAAahI,EAAaoD,cAAcC,YAC7CzE,KAAKkJ,WAAa,IAAIvG,EAAW3C,KAAKiJ,gBACtC7H,EAAaoD,cAAcE,aAAa1E,KAAKqJ,eAAepK,KAAKe,MAAO,GACxEsJ,MAAM9H,OAAOC,SAAS+B,SAAW,kBAC5B+F,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACC,GACH,EAAKR,SAAWQ,EAChB,EAAKL,OAAQ,EACe,OAAxB,EAAKF,iBAAyB,EAAKA,eAAiB,EAAKD,SAAS,IACtE,EAAKE,WAAW9F,WAAW,EAAK6F,gBAChC,EAAKvK,UAAUoG,SAAQ,SAAA7C,GAAC,OAAIA,U,+DAfpC,OADsB,OAAlBjC,KAAK2B,WAAmB3B,KAAK2B,SAAW,IAAIoH,GACzC/I,KAAK2B,a,uDAmBElB,GACdT,KAAKtB,UAAUqH,KAAKtF,K,0CAIpB,GAA2B,MAAvBT,KAAKiJ,eAAwB,OAAOjJ,KAAKiJ,iB,8CAK7C,GAA2B,MAAvBjJ,KAAKiJ,eAAwB,OAAOF,EAASW,gBAAgB1J,KAAKiJ,kB,oCAKtE,GAAIjJ,KAAKmJ,MAAO,OAAOnJ,KAAKgJ,W,wCAK5B,GAAIhJ,KAAKmJ,MAAO,OAAOnJ,KAAKgJ,SAAShH,IAAI+G,EAASW,mB,sCAKlD,OAAO1J,KAAKkJ,a,wCAGEtD,GACd5F,KAAKiJ,eAAiBrD,EACtBxE,EAAaoD,cAAcsB,SAC3B9F,KAAKkJ,WAAW9F,WAAWwC,GAC3B5F,KAAKtB,UAAUoG,SAAQ,SAAA7C,GAAC,OAAIA,S,mCAGXH,GACA,MAAbA,EAAM,KAAYA,EAAQA,EAAMtB,MAAM,IAC1C,IAAMgJ,EAAM1H,EAAM+C,MAAM,KAAKX,QAAO,SAACL,GAAD,OAAOA,EAAE8F,WAAW,SACrC,IAAfH,EAAItD,SACJlG,KAAKiJ,eAAiBO,EAAI,GAAGnH,OAAO,M,uCAIxC,OAA4B,OAAxBrC,KAAKiJ,eAAgC,GAClC,KAAOjJ,KAAKiJ,kB,uCAGArD,GACnB,OAAIA,EAAKgE,MAAM,SAEJhE,EAAO,KADDhI,OAAO8K,SAAS9C,GACD,GAAGiE,WACrBjE,M,KAjFDmD,EAEFpH,SAA4B,KCwB/C,IAAMmI,EAAa,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAChE,OAAQ,SAAU,YAAa,UAAW,WAAY,YAEpDC,EAAoB,SAAC,GAAD,IAAGjL,EAAH,EAAGA,MAAH,OACtB,0BAAMsB,MAAO,CAAE4J,MAAO,SACjBlL,EAAMmL,eAAe,QAAS,CAAE7J,MAAO,WAAY8J,SAAU,UAIhEC,EAAgB,SAAC,GAAD,IAAGrL,EAAH,EAAGA,MAAH,OAClB,8BAAOA,EAAMsL,iBAGXC,EAAqB,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,OAAQjE,EAA0C,EAA1CA,IAClC,GAAoB,SAAhBiE,EAAO1E,KAAiB,CACxBS,EAAIkE,IAAIV,WADgB,MAEFxD,EAAIkE,IAAIV,WAAWhF,MAAM,KAFvB,mBAEjB2F,EAFiB,KAEXC,EAFW,KAGxB,OAAO,8BAAM,yCAAN,IAA8BX,EAAWlM,OAAO8K,SAAS+B,GAAS,GAAlE,IAAuED,GAC3E,OACH,8BAAM,gCAASF,EAAOI,MAAhB,KAAN,IAAwCrE,EAAIvH,QAsB/B6L,E,kDA4HjB,WAAYlM,GAA0B,IAAD,8BACjC,cAAMA,IA3HFmM,gBAAkB,SAACnM,GAAD,OACtB,kBAAC,IAAeoM,KAAhB,iBACQpM,EADR,CAEIqM,QAAS,kBAAM,EAAKC,aAAatM,EAAM6L,SACvClK,MAAO3B,EAAM6L,OAAO1E,OAAS,EAAK9F,MAAMkL,eACpC,CAACxL,WAAY,OAAQyL,gBAAiB,EAAKC,2BAA2BzM,EAAM6L,OAAO1E,MAAOoE,MAAO,SACjG,CAACxK,WAAY,OAAQyL,gBAAiB,EAAKE,mBAAmB1M,EAAM6L,OAAO1E,MAAOoE,MAAO,aAoHhE,EA9EpBoB,aAA8B,CAC3C,CAAEC,WAAY,OAAQC,KAAM,SAC5B,CAAED,WAAY,SAAUC,KAAM,QA4EG,EAzEpBC,QAAoB,CACjC,CAAEb,MAAO,MAAO9E,KAAM,MACtB,CAAE8E,MAAO,cAAe9E,KAAM,QAC9B,CAAE8E,MAAO,cAAe9E,KAAM,eAC9B,CAAE8E,MAAO,SAAU9E,KAAM,UACzB,CAAE8E,MAAO,OAAQ9E,KAAM,QACvB,CAAE8E,MAAO,WAAY9E,KAAM,YAC3B,CAAE8E,MAAO,aAAc9E,KAAM,cAC7B,CAAE8E,MAAO,QAAS9E,KAAM,SACxB,CAAE8E,MAAO,KAAM9E,KAAM,OAgEY,EA7DpB4F,qBAAuD,CACpE,CAAEH,WAAY,KAAMI,iBAAiB,GACrC,CAAEJ,WAAY,OAAQI,iBAAiB,GACvC,CAAEJ,WAAY,aAAcI,iBAAiB,GAC7C,CAAEJ,WAAY,OAAQI,iBAAiB,GACvC,CAAEJ,WAAY,WAAYI,iBAAiB,GAC3C,CAAEJ,WAAY,QAASI,iBAAiB,GACxC,CAAEJ,WAAY,KAAMI,iBAAiB,GACrC,CAAEJ,WAAY,cAAeI,iBAAiB,GAC9C,CAAEJ,WAAY,SAAUI,iBAAiB,IAoDR,EAjDpBC,kBAAwC,CACrD,CAAEL,WAAY,SAAUC,KAAM,MAAOK,mBAAmB,EAAOC,eAAe,GAC9E,CAAEP,WAAY,SAAUC,KAAM,MAAOK,mBAAmB,GACxD,CAAEN,WAAY,OAAQC,KAAM,QAASK,mBAAmB,IA8CvB,EA3CpBE,eAAkD,CAC/D,CAAER,WAAY,KAAMS,iBAAiB,GACrC,CAAET,WAAY,OAAQS,iBAAiB,GACvC,CAAET,WAAY,aAAcS,iBAAiB,GAC7C,CAAET,WAAY,OAAQS,iBAAiB,GACvC,CAAET,WAAY,WAAYS,iBAAiB,GAC3C,CAAET,WAAY,QAASS,iBAAiB,GACxC,CAAET,WAAY,KAAMS,iBAAiB,GACrC,CAAET,WAAY,cAAeS,iBAAiB,GAC9C,CAAET,WAAY,SAAUS,iBAAiB,IAkCR,EA/B7BC,yBAAiE,CACrE,CACIV,WAAY,OAAQW,SAAU,SAAClN,GAC3B,OAAIA,aAAiBiF,KAEV,CAAEwG,IApHL,SAACzL,GAAD,OACpBA,EAAMsJ,cAAcyB,WAAWxB,SAAS,EAAG,KAAO,KAAOvJ,EAAMwJ,WAAa,GAAGuB,WAAWxB,SAAS,EAAG,KAkH1E4D,CAAgBnN,IAElB,CAAEyL,IAAK,OAyBI,EApB7B2B,YAAsC,CAC1C,CAAEb,WAAY,KAAMc,MAAO,IAC3B,CAAEd,WAAY,OAAQc,MAAO,KAC7B,CAAEd,WAAY,OAAQc,MAAO,KAC7B,CAAEd,WAAY,WAAYc,MAAO,KACjC,CAAEd,WAAY,aAAcc,MAAO,KACnC,CAAEd,WAAY,QAASc,MAAO,KAC9B,CAAEd,WAAY,KAAMc,MAAO,KAC3B,CAAEd,WAAY,cAAec,MAAO,KACpC,CAAEd,WAAY,SAAUc,MAAO,MAWE,EARpBC,cAQoB,IAN7BC,iBAM6B,IAJ7BC,YAAsB,GAIO,EAF7BC,kCAAyE,GAI7E,EAAKH,SAAWI,IAAMC,YAEtB,EAAK3M,MAAQ,CACT4M,aAAc,CAAC,CAAErB,WAAY,KAAMsB,UAAW,QAC9CC,aAASC,EACTC,WAAY,IACZ9B,eAAgB,GAChB+B,WAAW,EACXC,WAAW,EACXV,YAAa,IAGjB,EAAKD,YAAc,IAAI9K,SACIsL,IAAvB,EAAK/M,MAAM8M,SAAgD,SAAvB,EAAK9M,MAAM8M,SAC/C,EAAKK,wBAhBwB,E,+DAhHVtH,GACvB,OAAQA,GACJ,IAAK,OACD,MAAO,UACX,IAAK,WACD,MAAO,UACX,IAAK,aACD,MAAO,UACX,IAAK,QACD,MAAO,UACX,IAAK,KACD,MAAO,UACX,QACI,MAAO,a,iDAIgBA,GAC/B,OAAQA,GACJ,IAAK,OACD,MAAO,UACX,IAAK,WACD,MAAO,UACX,IAAK,aACD,MAAO,UACX,IAAK,QACD,MAAO,UACX,IAAK,KACD,MAAO,UACX,QACI,MAAO,e,yDAsGE,IAAD,OAChB3F,KAAKvB,MAAMwB,WAAWC,mBAAkB,WACpC,EAAK+M,wBACL,EAAK/L,mB,8CAIoB,IAAD,YACD2L,IAAvB7M,KAAKF,MAAM8M,SAAgD,SAAvB5M,KAAKF,MAAM8M,UAC/C5M,KAAKqM,YAAYa,QACjBlN,KAAKvB,MAAMwB,WAAWkN,cAAcnN,KAAKF,MAAM8M,SAAS9H,SAAQ,SAAAC,GAC5D,EAAKsH,YAAYxK,IAAIkD,EAAMlG,KAAMkG,EAAMjG,UAG3CkB,KAAKuM,kCAAoC,CACrC,CACIlB,WAAYrL,KAAKF,MAAM8M,QACvBQ,QAAS,SAACvG,EAAGC,GAAJ,gBAAW,YAAKuF,mBAAL,eAAkB9F,IAAIM,KAAM,KAAM,YAAKwF,mBAAL,eAAkB9F,IAAIO,KAAM,S,iCAM/EhI,GACfkB,KAAKsM,YAAcxN,EACfA,GACAkB,KAAKqN,SAAS,CAACL,WAAW,IAC1BhN,KAAKsN,YAAYtN,OAEjBA,KAAKuN,cAAcvN,Q,yCAIRwN,EAAuCC,EAAuCC,GACzF1N,KAAKF,MAAM8M,SAAWa,EAAUb,UAChC5M,KAAKiN,wBACLjN,KAAKqN,SAAS,CACVX,aAAc1M,KAAK2N,4B,+BAMrB,IAAD,OACD3N,KAAKvB,MAAMwB,WAAW2N,iBACtB5N,KAAKvB,MAAMwB,WAAW4N,cAAa,GACnC7N,KAAKmD,UAAUnD,OAGnB,IAAM8N,EAAO9N,KAAKvB,MAAMwB,WAAWmG,aAAapE,KAAI,SAAC6B,EAAGmE,GAAkB,OAAVnE,EAAEkK,GAAK/F,EAAUnE,KACjF,OAA0B,IAAtB7D,KAAKvB,MAAM6B,OACJ,kBAAC0N,EAAA,EAAD,MAEP,kBAACA,EAAA,EAAD,CACIC,UAAW,EACXC,aAAc,kBAAM,EAAKZ,YAAY,IACrCa,aAAc,kBAAM,EAAKZ,cAAc,KAEvC,kBAAC,IAAD,CAAMO,KAAMA,EAAMvC,QAASvL,KAAKuL,SAC5B,kBAAC,IAAD,CACI6C,QAASpO,KAAKF,MAAM4M,eAExB,kBAAC,IAAD,CACI2B,cAAiCxB,IAAvB7M,KAAKF,MAAM8M,QAAwB,CAAC,CAAEvB,WAAYrL,KAAKF,MAAM8M,UAAa,KAExF,kBAAC,IAAD,CAAa0B,cAAe,SAACxP,GAAD,OAAW,EAAKyP,WAAWzP,MACvD,kBAAC,IAAD,CAAc0P,WAAYxO,KAAKoL,aAAcqD,WAAYzO,KAAK0L,oBAE9D,kBAAC,IAAD,CAAoBgD,iBAAkB1O,KAAK+L,2BAC3C,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAmB2C,iBAAkB1O,KAAKuM,oCAC1C,kBAAC,IAAD,MAEA,kBAAC,IAAD,CAAkBoC,IAAK,CAAC,UAAWC,mBAAoB7E,IACvD,kBAAC,IAAD,CAAkB4E,IAAK,CAAC,QAASC,mBAAoBzE,IAErD,kBAAC,IAAD,CAAcuE,iBAAkB1O,KAAKwL,qBAAsBnL,OAAQL,KAAKF,MAAMgN,aAI9E,kBAAC,IAAD,CACI+B,yBAA0B,CAAC,QAE/B,kBAAC,IAAD,CAAgBC,cAAe9O,KAAK4K,kBACpC,kBAAC,IAAD,CACImE,iBAAkB1E,EAClBqE,iBAAkB1O,KAAK6L,iBAE3B,kBAAC,IAAD,MAEA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAemD,qBAAmB,EAACC,sBAAuB,kBAAM,kCAChE,kBAAC,IAAD,CAAaC,YAAa,SAAC9P,GAAD,uBAAa,EAAKgN,SAAS+C,eAA3B,aAAa,EAAuBC,WAAWhQ,MACzE,kBAAC,IAAD,OAEJ,kBAAC,IAAD,CACIiQ,IAAKrP,KAAKoM,SACVb,QAASvL,KAAKuL,QACduC,KAAMA,EACNwB,OAAQ,SAACC,GAAD,OAAc,EAAKD,OAAOC,S,gCAMxCC,GACN,GAAIA,EAAM1P,MAAMgN,WAAa,MAAQ0C,EAAM1P,MAAMkN,YAAcwC,EAAM1P,MAAMiN,WAAiC,IAApB/M,KAAKsM,YAAmB,CAC5GkD,EAAMnC,SAAS,CAACN,WAAW,EAAMC,WAAW,IAC5C,IAAIyC,EAAYC,aAAY,WACxB,IAAIC,EAAYH,EAAM1P,MAAMgN,WAAa,GAEzC,GADA0C,EAAMnC,SAAS,CAACP,WAAY6C,IACxBH,EAAM1P,MAAMgN,YAAc,IAAK,CAC/B8C,cAAcH,GACd,IAAII,EAAaH,aAAY,WACzBF,EAAMnC,SAAS,CAAEN,WAAW,EAAOC,WAAW,EAAOF,WAAY,MACjE0C,EAAMjC,cAAciC,GACpBI,cAAcC,KACf,QAER,O,kCAICL,GACR,IAAKA,EAAM1P,MAAMiN,UAAW,CACxByC,EAAMnC,SAAS,CAAEN,WAAW,IAC5B,IAAI+C,EAAcJ,aAAY,WAC1B,IAAIC,EAAYH,EAAM1P,MAAMgN,WAAa,GACzC0C,EAAMnC,SAAS,CAACP,WAAY6C,IACxBH,EAAM1P,MAAMgN,YAAc,KAC1B0C,EAAMnC,SAAS,CACXP,WAAY,IACZC,WAAW,IAEf6C,cAAcE,IACPN,EAAM1P,MAAMkN,YACnBwC,EAAMnC,SAAS,CAAEN,WAAW,IAC5B6C,cAAcE,MAEnB,O,oCAIGN,GAA6B,IAAD,OACtC,IAAKA,EAAM1P,MAAMkN,WAAiC,IAApBhN,KAAKsM,YAAmB,CAClDkD,EAAMnC,SAAS,CAAEL,WAAW,IAC5B,IAAI+C,EAAgBL,aAAY,WAC5B,IAAIM,EAAYR,EAAM1P,MAAMgN,WAAa,GACzC0C,EAAMnC,SAAS,CAACP,WAAYkD,KACxBR,EAAM1P,MAAMgN,YAAc,MAAQ,EAAKhN,MAAMkN,aAC7CwC,EAAMnC,SAAS,CACXP,WAAY,IACZE,WAAW,IAEf4C,cAAcG,MAEnB,O,mCAIUE,GACjBjQ,KAAKqN,SAAS,CACVrC,eAAgBiF,EAAMrK,OAE1B5F,KAAKkQ,WAAWD,K,iCAGDA,GACXE,GAAaF,EAAMrK,MACnB5F,KAAKvB,MAAM2R,SAASH,EAAMrK,MACL,eAAdqK,EAAMrK,MACb5F,KAAKvB,MAAM2R,SAAS,a,6BAIbb,GACXA,EAASc,KAAKC,cAAc/G,MAAK,SAACgH,GAC9BC,iBAAO,IAAIC,KAAK,CAACF,GAAS,CAAEjF,KAAM,6BAA5B,uBACcvC,EAASvE,cAAckM,wBADrC,e,6CAK8E,IAA/D/K,EAA8D,uDAA/B3F,KAAKF,MAAM8M,QACnE,MAAiB,SAAbjH,EACO,CAAC,CAAE0F,WAAY,OAAQsB,UAAW,aACvBE,IAAblH,GAAuC,gBAAbA,EACxB,CAAC,CAAE0F,WAAY,KAAMsB,UAAW,QAC/B,CAAC,CAAEtB,WAAY1F,EAAUgH,UAAW,a,GA3UfxL,a,kGCnDpBwP,E,kDAEjB,WAAYlS,GAA0B,IAAD,8BACjC,cAAMA,IACDqB,MAAQ,CACT8Q,QAAQ,GAHqB,E,sDAQjC5Q,KAAKvB,MAAMwB,WAAWoD,YAAY,GAClCrD,KAAKqN,SAAS,CAACuD,QAAQ,M,+BAGVjL,GACb,OAAQA,GACJ,IAAK,OACD,MAAO,UACX,IAAK,WACD,MAAO,UACX,IAAK,aACD,MAAO,UACX,IAAK,KACD,MAAO,UACX,IAAK,QACD,MAAO,UACX,QACI,MAAO,a,0CAIE,IAAD,OAChB3F,KAAKvB,MAAMwB,WAAWC,mBAAkB,kBAAM,EAAKgB,mB,+BAG7C,IAAD,OACC2P,EAAS7Q,KAAKvB,MAAMwB,WACtB6Q,EAAOD,EAAOE,aACZC,EAAyBjI,EAASvE,cAAcyM,eAAiB,GAEvE,OACI,oCASI,kBAACC,EAAA,EAAD,CAAaC,UAAU,IAAI/Q,MAAOJ,KAAKvB,MAAM2B,OACzC,kBAACgR,EAAA,EAAD,CAAYC,MAAM,UACd,kBAACC,EAAA,EAAD,CAAS5G,MAAM,mBACX,kBAAC6G,EAAA,EAAD,CAAMhH,KAAM,EAAGP,MAAM,cACjBc,QAAS,kBAAM,EAAK0G,YADxB,wBAEyB,6BAFzB,6BASR,yBAAKpR,MAAO,CAAE6K,gBAAiB,YAC3B,kBAACmG,EAAA,EAAD,CAAYC,MAAM,UACd,kBAACC,EAAA,EAAD,CAAS5G,MAAM,sBACX,kBAAC6G,EAAA,EAAD,CAAMhH,KAAM,EAAGP,MAAM,cACjBc,QAAS,kBAAM+F,EAAOxN,YAAY,KADtC,SAEO0F,EAASvE,cAAckM,wBAC1B,6BAHJ,IAIEhT,EAASmT,EAAOY,uBAO7BX,EAAKtQ,MAAM,GAAI,GAAGwB,KAAI,SAACkC,EAAQtC,GAAT,OACnB,yBAAKxB,MAAO,CAAE6K,gBAAiB,EAAKyG,SAASxN,EAAOyB,YAChD,kBAACyL,EAAA,EAAD,CAAYC,MAAM,UACd,kBAACC,EAAA,EAAD,CAAS5G,MAAM,0BACX,kBAAC6G,EAAA,EAAD,CAAMhH,IAAK3I,EAAOoI,MAAM,gBAAgBqH,MAAM,SAC1CvG,QAAS,kBAAM+F,EAAOxN,YAAYzB,EAAQ,KACzCsC,EAAOyB,SAFZ,KAEwBzB,EAAO0B,KAC3B,6BAHJ,IAIMlI,EAASwG,EAAOF,eAQrC8M,EAAK5K,OAAS,EAAK,yBAAK9F,MAAO,CAAE6K,gBAAiBjL,KAAK0R,SAASZ,EAAKA,EAAK5K,OAAS,GAAGP,YACnF,kBAACyL,EAAA,EAAD,CAAYpH,MAAM,cAAcqH,MAAM,SAAS9G,IAAKuG,EAAK5K,OAAS,GAC7D4K,EAAKA,EAAK5K,OAAS,GAAGP,SAD3B,KACuCmL,EAAKA,EAAK5K,OAAS,GAAGN,KAAK,6BADlE,IAC0ElI,EAASoT,EAAKA,EAAK5K,OAAS,GAAGlC,UAEnG,MAEd,kBAAC2N,EAAA,EAAD,CAAQC,OAAQ,OAAQC,KAAM7R,KAAKF,MAAM8Q,OAAQkB,QAAS,kBAAM,EAAKzE,SAAS,CAACuD,QAAQ,MACnF,yBAAK9F,QAAS,kBAAM,EAAKuC,SAAS,CAACuD,QAAQ,MAC3C,kBAACmB,EAAA,EAAD,KACKf,EAAahP,KAAI,SAAAnD,GAAI,OAClB,kBAACmT,EAAA,EAAD,CAAUC,QAAM,EAAC1H,IAAK1L,EAAMiM,QAAS,WACjC,EAAKuC,SAAS,CAACuD,QAAQ,IACvB7H,EAASvE,cAAc0N,kBAAkBrT,KAEzC,kBAACsT,EAAA,EAAD,KAAc,kBAAC,IAAD,OACd,kBAACC,EAAA,EAAD,CAAcC,QAAS,UAAYtJ,EAASW,gBAAgB7K,iB,GA3GlDsC,a,QCErBmR,E,kDAEjB,WAAY7T,GAA0B,IAAD,8BACjC,cAAMA,IACDqB,MAAQ,CACTyS,SAAU,EACV5M,SAAU,EAAKlH,MAAMkH,SACrB6M,eAAgB,IAAIjR,KALS,E,gEASV,IAAD,OACtBvB,KAAKvB,MAAMwB,WAAWC,mBAAkB,kBAAM,EAAKgB,mB,+BAG5B,IAAD,OAClB4B,EAAU9C,KAAKvB,MAAMwB,WAAW8Q,aACpC/Q,KAAKF,MAAM0S,eAAe1N,SAAQ,SAAChG,EAAOyL,GACtC,IAAK,IAAIvC,EAAI,EAAGA,EAAIlF,EAAQoD,OAAQ8B,IAChC,GAAIlF,EAAQkF,GAAGrC,UAAY4E,EACvB,OAGR,EAAKzK,MAAM0S,eAAeC,OAAOlI,MAGrC,IAAM1H,EAAO7C,KAAKvB,MAAMwB,WAAWkN,cAAcnN,KAAKvB,MAAMkH,UACtD+M,EAAa1S,KAAKvB,MAAMwB,WAAW+G,gBACV,MAAd0L,GACZA,EAAW/M,WAAa3F,KAAKvB,MAAMkH,UAAW+M,EAAW9M,KAE9D,OACI,yBAAKxF,MAAO,CAACC,OAAQ,QAASC,OAAQN,KAAKvB,MAAM6B,SAAU,GACrDN,KAAKvB,MAAM6B,OAAmB,KAC5B,kBAAC,IAAD,CAAqBD,OAAO,OAAO8L,MAAM,QACrC,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKtJ,KAAMA,EAAM8P,QAAQ,QAAQC,QAAQ,OACpC9H,QAAS,SAACjH,GAAD,OAAO,EAAKgP,WAAWhP,IAChCiP,MAAO,SAACjP,GAAD,OAAO,EAAKkP,sBAAsBlP,EAAG,EAAKpF,MAAMwB,WAAW+S,aAAaC,WAAW,GAEvFpQ,EAAKb,KAAI,SAAC+C,EAAOnD,GAAR,OACL,kBAAC,IAAD,CAAM2I,IAAG,eAAU3I,GAASsR,KAAM,EAAKxB,SAAS3M,SAI5D,kBAAC,IAAD,CAASoO,UAAW,SAACrU,GAAD,MAAW,IAAMpB,EAASoB,IACrCsU,aAAc,CAACC,QAAS,QAASC,OAAQ,EAAGC,aAAc,U,4CAQ7DxO,EAAYyO,GACtC,OAAIzO,EAAMjG,MAAqB,IAAb0U,EACP,KAEX,0BAAM7V,EAAGoH,EAAMpH,EAAG8V,EAAG1O,EAAM0O,EAAGP,KAAK,QAAQQ,WAAY3O,EAAMpH,EAAIoH,EAAM4O,GAAK,QAAU,MAAOC,iBAAiB,WACzG7O,EAAMa,Q,iCAKI/B,GACf7D,KAAKF,MAAM0S,eAAe3Q,IAAI7B,KAAKvB,MAAMkH,SAAU9B,EAAEhF,MACrDmB,KAAKvB,MAAMwB,WAAWkF,kBAAkBnF,KAAKvB,MAAMkH,SAAU9B,EAAEhF,MAC/DmB,KAAKvB,MAAMwB,WAAW4N,cAAa,K,+BAG9B9I,GACL,GAAG/E,KAAKF,MAAM0S,eAAeqB,IAAI7T,KAAKvB,MAAMkH,UACxC,GAAG3F,KAAKF,MAAM0S,eAAejM,IAAIvG,KAAKvB,MAAMkH,WAAaZ,EAAMlG,KAC3D,OAAQmB,KAAKvB,MAAMkH,UACf,IAAK,OACD,MAAO,UACX,IAAK,WACD,MAAO,UACX,IAAK,aACD,MAAO,UACX,IAAK,QACD,MAAO,UACX,IAAK,KACD,MAAO,UACX,QACI,MAAO,eAGf,OAAQ3F,KAAKvB,MAAMkH,UACf,IAAK,OACD,MAAO,UACX,IAAK,WACD,MAAO,UACX,IAAK,aACD,MAAO,UACX,IAAK,KACD,MAAO,UACX,IAAK,QACD,MAAO,eAInB,OAAQ3F,KAAKvB,MAAMkH,UACf,IAAK,OACD,MAAO,MACX,IAAK,WACD,MAAO,SACX,IAAK,aACD,MAAO,QACX,IAAK,QACD,MAAO,OACX,IAAK,KACD,MAAO,SACX,QACI,MAAO,Y,GAlHcxE,a,kCCNpB2S,E,kDAEjB,WAAYrV,GAAqB,IAAD,8BAC5B,cAAMA,IACDqB,MAAQ,CACThB,MAAO,CAAC,EAAG,KACX+D,KAAM,IAJkB,E,gEASL,IAAD,OACtB7C,KAAKvB,MAAMwB,WAAWC,mBAAkB,kBACpC,EAAK6T,iBAET/T,KAAK+T,gB,oCAGM,IAAD,EACa/T,KAAKvB,MAAMwB,WAAW+T,cAAc,IAApDnR,EADG,EACHA,KAAMwE,EADH,EACGA,OACbrH,KAAKqN,SAAS,CACVxK,KAAMA,EACN/D,MAAOuI,M,+BAIY,IAAD,OAChBxE,EAAO7C,KAAKF,MAAM+C,KAClBwE,EAA2C,IAAhBxE,EAAKqD,OAAe,CAAC,EAAG,GAAK,CAACrD,EAAK,GAAGoF,IAAKpF,EAAKA,EAAKqD,OAAS,GAAGgC,MAClG,OACI,yBAAK9H,MAAO,CACR6T,YAAa,KAAMC,aAAa,aAAD,OAAeJ,EAAaK,gBAA5B,OAC/B9T,OAAQ,OAAQiT,OAAQ,QACzBhT,OAAQN,KAAKvB,MAAM6B,SAAU,GAC1BN,KAAKvB,MAAM6B,OAAmB,KAC5B,kBAAC,IAAD,CAAqBD,OAAO,MAAM8L,MAAM,QACpC,kBAAC,IAAD,CAAUtJ,KAAMA,EAAMuR,eAAgB,EAAGd,OAAQ,CAACe,OAAQ,EAAGC,KAAM,EAAGC,MAAO,IACzE,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,CAAO7B,QAAQ,OAAOtL,OAAQA,EAAQoN,MAAI,EAACC,YAAY,QACvD,kBAAC,IAAD,CAAOrN,OAAQ,CAAC,EAAG,WAAYsN,cAAe,SAACzP,GAAD,OAAOnH,KAAK6W,MAAM1P,EAAI,EAAKzG,MAAMwB,WAAW+S,WAAa,KAAO,KACvG7G,MAAO2H,EAAaK,iBACvB,kBAAC,IAAD,CAAOU,MAAO,IAAKC,SAAS,aAAa1U,MAAO,CAACsT,WAAY,WAA7D,2BAIJ,kBAAC,IAAD,CAAeD,EAAG,EAAGX,MAAM,GAAGiC,OAAO,UACrC,kBAAC,IAAD,CAAKpC,QAAS,QAASO,KAAMlT,KAAK0R,YAC7B7O,EAAKb,KAAI,SAAClD,EAAO8C,GAAR,OACN,kBAAC,IAAD,CAAM2I,IAAG,eAAU3I,GAASsR,KAAM,EAAKxB,WACjCsD,QAAS,EAAKC,WAAWnW,EAAMmJ,IAAKnJ,EAAMoJ,cAMpE,yBAAK9H,MAAO,CAAC6T,YAAaH,EAAaK,kBACnC,kBAACe,EAAA,EAAD,CAAQpW,MAAOkB,KAAKF,MAAMhB,MAClB0I,IAAKH,EAAO,GAAII,IAAKJ,EAAO,GAC5B+I,SAAUpQ,KAAKmV,cAAclW,KAAKe,MAClCoV,kBAAmBpV,KAAKqV,uBAAuBpW,KAAKe,MACpDsV,kBAAkB,OAClBC,iBAAkB,SAACrQ,GAAD,MAAO,IAAMxH,EAASwH,IACxCsQ,MAAOxV,KAAKyV,SAASpO,GACrBqO,kBAAgB,sB,oCA0D1BhV,EAAYiV,GACtB3V,KAAKqN,SAAS,CAACvO,MAAO6W,M,6CAGHjV,EAAYiV,GAC/B,IAAMC,EAAOD,EACb3V,KAAKvB,MAAMwB,WAAWqF,gBAAgBsQ,EAAK,GAAIA,EAAK,M,iCAIpD,MAAO,S,iCAGA3N,EAAaC,GAEpB,MAAO,GAAM,IADMnK,KAAK0J,IAAI,EAAG1J,KAAKyJ,IAAIxH,KAAKF,MAAMhB,MAAM,GAAIoJ,GAAQnK,KAAK0J,IAAIzH,KAAKF,MAAMhB,MAAM,GAAImJ,KAASC,EAAOD,M,mCAI1GtK,GACT,MAAO,CAACmB,MAAOnB,EAAGmV,MAAO,IAAMpV,EAASC,M,+BAGnC0J,GAAmC,IAAD,OAEjCwO,EAAW,IADqC,GAAlC/B,EAAagC,mBAA2BhC,EAAaK,kBACpC9M,EAAO,GAAKA,EAAO,IACpDmO,EAAgBnO,EAAOrF,KAAI,SAAA6B,GAAC,OAAI,EAAKkS,aAAalS,MAClDwD,EAAO,GAAK,GAAKA,EAAO,GAAK,IAC7BmO,EAAQA,EAAMtR,QAAO,SAAAL,GAAC,OAAI9F,KAAKC,IAAI6F,EAAE/E,QAAU+W,MACzC9P,KAAK/F,KAAK+V,aAAa,IAIjC,IADA,IAAMC,EAAYjY,KAAK0J,KAAKJ,EAAO,GAAKA,EAAO,IAAM,GAAIwO,GAChD7N,EAAI,EAAGX,EAAO,GAAKW,EAAIgO,GAAa3O,EAAO,GAAKwO,EAAU7N,IAAK,CACpE,IAAMrB,EAAM/I,OAAOW,YAAY8I,EAAO,GAAKW,EAAIgO,GAAW/X,YAAY,IAClEF,KAAKC,IAAI2I,GAAO,GAAMqP,GAC1BR,EAAMzP,KAAK/F,KAAK+V,aAAapP,IAGjC,OAAO6O,K,0CA7CP,OAAOzX,KAAK0J,IAAIwO,SAASC,gBAAgBC,YAAa3U,OAAO4U,YAAc,K,sCAI3E,OAAOtC,EAAagC,mBAAqB,IAAM,EAAI,O,GAtHjB3U,aCWpC2I,GAAa,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAE5EuM,G,kDAEjB,WAAY5X,GAAqB,IAAD,8BAC5B,cAAMA,IACDqB,MAAQ,CACThB,MAAO,CAAC,EAAG,GACXuI,OAAQ,CAAC,UAAW,WACpBxE,KAAM,IALkB,E,gEAUL,IAAD,OACtB7C,KAAKvB,MAAMwB,WAAWC,mBAAkB,kBACpC,EAAK6T,iBAET/T,KAAK+T,gB,oCAGM,IAAD,EACa/T,KAAKvB,MAAMwB,WAAWqW,eAAtCzT,EADG,EACHA,KAAMwE,EADH,EACGA,OACPkP,EAAQ1T,EAAKb,KAAI,SAAA6B,GAAC,OAAIA,EAAEhF,QAC9BmB,KAAKqN,SAAS,CACVxK,KAAMA,EACN/D,MAAO,CAACyX,EAAMjU,QAAQ+E,EAAO,IAAM,GAAKkP,EAAMjU,QAAQ+E,EAAO,IAAM,Q,+BAKvE,IAAMxE,EAAO7C,KAAKF,MAAM+C,KACxB,OACI,yBAAKzC,MAAO,CACR6T,YAAa,KAAMC,aAAa,aAAD,OAAemC,EAAWlC,gBAA1B,OAC/B9T,OAAQ,OAAQiT,OAAQ,QACzBhT,OAAQN,KAAKvB,MAAM6B,SAAU,GAC1BN,KAAKvB,MAAM6B,OAAmB,KAC5B,kBAAC,IAAD,CAAqBD,OAAO,MAAM8L,MAAM,QACpC,kBAAC,IAAD,CAAWtJ,KAAMA,EAAMuR,eAAgB,EAAGd,OAAQ,CAACe,OAAQ,EAAGC,KAAM,EAAGC,MAAO,IAC1E,8BACI,oCAAgBxG,GAAG,WAAWyI,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KAClD,0BAAMC,OAAO,KAAKC,UAAW7W,KAAK0R,WAAYoF,YAAa,KAC3D,0BAAMF,OAAO,MAAMC,UAAW7W,KAAK0R,WAAYoF,YAAa,MAEhE,oCAAgB/I,GAAG,YAAYyI,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KACnD,0BAAMC,OAAQ5W,KAAK+W,eAAiB,IAAMF,UAAW7W,KAAK0R,WACpDoF,YAAa,KACnB,0BAAMF,OAAQ5W,KAAK+W,eAAiB,IAAMF,UAAW7W,KAAK0R,WACpDoF,YAAa,KACnB,0BAAMF,OAAQ5W,KAAKgX,gBAAkB,IAAMH,UAAW7W,KAAK0R,WACrDoF,YAAa,KACnB,0BAAMF,OAAQ5W,KAAKgX,gBAAkB,IAAMH,UAAW7W,KAAK0R,WACrDoF,YAAa,OAG3B,kBAAC,IAAD,CAAetC,gBAAgB,QAC/B,kBAAC,IAAD,CAAO7B,QAAQ,OAAO8B,MAAI,EAACC,YAAY,MAAMjV,MAAM,SACnD,kBAAC,IAAD,CAAOkV,cAAe,SAACzP,GAAD,MAAO,IAAMxH,EAASwH,IAAIiH,MAAOkK,EAAWlC,iBAC9D,kBAAC,IAAD,CAAOU,MAAO,IAAKC,SAAS,aAAa1U,MAAO,CAACsT,WAAY,WAA7D,uBAIJ,kBAAC,IAAD,CAASP,UAAW,SAACrU,GAAD,MAAW,IAAMpB,EAASoB,IACrCsU,aAAc,CAAC6D,QAAS,UACjC,kBAAC,IAAD,CAAexD,EAAG,EAAGX,MAAM,GAAGiC,OAAO,UACrC,kBAAC,IAAD,CAAMzJ,KAAK,WAAWqH,QAAQ,QAAQoC,OAAQ/U,KAAK0R,WAAYwF,YAAa,EACtEhE,KAAK,sBAIvB,yBAAK9S,MAAO,CAAC6T,YAAaoC,EAAWlC,kBACjC,kBAACe,EAAA,EAAD,CAAQpW,MAAOkB,KAAKF,MAAMhB,MAClB0I,IAAK,EAAGC,IAAKzH,KAAKF,MAAM+C,KAAKqD,OAC7BkK,SAAUpQ,KAAKmV,cAAclW,KAAKe,MAClCoV,kBAAmBpV,KAAKqV,uBAAuBpW,KAAKe,MACpDsV,kBAAkB,MAClBE,MAAOxV,KAAKyV,SAASzV,KAAKF,MAAM+C,MAChCsU,KAAM,KACNzB,kBAAgB,oB,oCAe1BhV,EAAYiV,GACtB3V,KAAKqN,SAAS,CAACvO,MAAO6W,M,6CAGHjV,EAAYiV,GAC/B,IAAMC,EAAQD,EAA+B3T,KAAI,SAAA6B,GAAC,OAAI9F,KAAK6W,MAAM/Q,EAAI,OAC/DhB,EAAO7C,KAAKF,MAAM+C,KACxB7C,KAAKvB,MAAMwB,WAAWuF,eAAe3C,EAAK+S,EAAK,IAAI/W,KAAMgE,EAAK+S,EAAK,IAAI/W,Q,iCAIvE,MAAO,S,iCAGA+C,GAEP,OADAA,GAAS,GACF5B,KAAKF,MAAMhB,MAAM,IAAM8C,GAASA,GAAS5B,KAAKF,MAAMhB,MAAM,GAAK,EAAI,K,qCAI1E,OAAQkB,KAAKF,MAAMhB,MAAM,GAAK,IAAMkB,KAAKF,MAAM+C,KAAKqD,OAAS,K,sCAI7D,OAAQlG,KAAKF,MAAMhB,MAAM,IAAOkB,KAAKF,MAAM+C,KAAKqD,OAAS,K,+BAGpDrD,GACL,IAAI2S,EAAQ3S,EAAKb,KAAI,SAAC6B,EAAGmE,GAAJ,MAAW,CAAClJ,MAAOkJ,EAAI,GAAK8K,MAAOjP,EAAEhF,SACtDuY,EAAqB,IAAIC,IAS7B,OARA7B,EAAM1Q,SAAQ,SAACjB,EAAGmE,GACd,IAAMsP,EAAIzT,EAAEiP,MAAMjO,MAAM,KACpBuS,EAAMvD,IAAIyD,EAAE,IAAK9B,EAAMxN,GAAG8K,MAAQhJ,GAAWlM,OAAO8K,SAAS4O,EAAE,IAAM,IAErEF,EAAMG,IAAID,EAAE,IACZ9B,EAAMxN,GAAG8K,MAAQhJ,GAAWlM,OAAO8K,SAAS4O,EAAE,IAAM,GAAnC,WAA4CA,EAAE,QAGhE9B,K,0CA7CP,OAAOzX,KAAK0J,IAAIwO,SAASC,gBAAgBC,YAAa3U,OAAO4U,YAAc,K,sCAI3E,OAAOpW,KAAK8V,mBAAqB,IAAM,EAAI,O,GAzFX3U,aCpBzB,SAASqW,GAAgB/Y,GAEpC,OAAQA,EAAMkH,UACV,IAAK,OACD,OACI,kBAACyL,EAAA,EAAD,CAAYpH,MAAM,iBAAlB,0DAIR,IAAK,OACD,OACI,kBAACoH,EAAA,EAAD,CAAYpH,MAAM,iBAAlB,4DAIR,IAAK,WACD,OACI,kBAACoH,EAAA,EAAD,CAAYpH,MAAM,iBAAlB,mCAIR,IAAK,aACD,OACI,kBAACoH,EAAA,EAAD,CAAYpH,MAAM,iBAAlB,0CAIR,IAAK,KACD,OACI,kBAACoH,EAAA,EAAD,CAAYpH,MAAM,iBAAlB,sCAIR,IAAK,QACD,OACI,kBAACoH,EAAA,EAAD,CAAYpH,MAAM,iBAAlB,4FAIR,IAAK,UACD,OACI,kBAACoH,EAAA,EAAD,CAAYpH,MAAM,iBAAlB,uKAMR,IAAK,SACD,OACI,kBAACoH,EAAA,EAAD,CAAYpH,MAAM,iBAAlB,6DAIR,IAAK,QACD,OACI,kBAACoH,EAAA,EAAD,CAAYpH,MAAM,iBAAlB,kHAGI,6BAHJ,8FAOR,IAAK,SACD,OACI,kBAACoH,EAAA,EAAD,CAAYpH,MAAM,iBAAlB,iIAGI,6BAHJ,mLAQR,QACI,OAAO,+B,8CCtDZ,SAASmG,GAAczN,GAC1B,OAAOD,EAAiBC,IAAU,CAAC,QAAU,UAAY,SAAW,QAAQrE,SAASqE,GAQvE+U,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,SAAU,GACVpY,WAAYkY,EAAMG,WAAWC,mBAEjCC,SAAU,MALIN,EAMd,SAAChZ,GAAD,OAA0B,kBAACuZ,EAAA,EAAQvZ,MANvC,IAQqBwZ,G,kDAGjB,WAAYxZ,GAAsB,IAAD,8BAC7B,cAAMA,IAHFK,MAAkB,UAKtB,EAAKA,MAAQ,UAGb,EAAKgB,MAAQ,CACThB,MAAO,EAAKA,OAGhBsC,EAAaoD,cAAcE,aAAa,EAAKwT,cAAcjZ,KAAnB,gBAA+B,GAV1C,E,gEAaN,IAAD,OACtBe,KAAKvB,MAAMoS,OAAO3Q,mBAAkB,kBAAM,EAAKgB,mB,iCAGxCY,GACU,MAAbA,EAAM,KAAYA,EAAQA,EAAMtB,MAAM,IAC1C,IAAMgJ,EAAM1H,EAAM+C,MAAM,KAAKX,QAAO,SAACL,GAAD,OAAOA,EAAE8F,WAAW,WACxD,GAAmB,IAAfH,EAAItD,OAAc,MAAO,QAC7B,IAAIuC,EAAIe,EAAI,GAAGnH,OAAO,GACtB,OAAI8N,GAAa1H,GACNA,EACG,U,sCAId,MAAO,OAASzI,KAAKlB,Q,kCAGbA,GACRkB,KAAKlB,MAAQqR,GAAarR,GAASA,EAAQ,QAC3CkB,KAAKqN,SAAS,CAACvO,MAAOkB,KAAKlB,QAC3BsC,EAAaoD,cAAcsB,W,gCAI3B,IAAMqS,EAASlC,SAASmC,cAAc,YACtCD,EAAO/X,MAAM0U,SAAW,QACxBqD,EAAO/X,MAAMkU,KAAO,IACpB6D,EAAO/X,MAAMiY,IAAM,IACnBF,EAAO/X,MAAM4U,QAAU,IACvBmD,EAAOrZ,MAAQ0C,OAAOC,SAASW,KAC/B6T,SAASqC,KAAKC,YAAYJ,GAC1BA,EAAOK,QACPL,EAAOvX,SACPqV,SAASwC,YAAY,QACrBxC,SAASqC,KAAKI,YAAYP,GAC1BQ,MAAM,+C,+BAIN,IAAM9H,EAAS7Q,KAAKvB,MAAMoS,OAC1B,OACI,oCACI,kBAAC,EAAD,CAAc5Q,WAAY4Q,IAC1B,kBAAC,EAAD,CAAa5Q,WAAY4Q,EAAQT,SAAUpQ,KAAK4Y,YAAY3Z,KAAKe,MAAOI,MAAO,CAC3EyY,OAAQ,EACR5N,gBAAiB,eAErB,kBAAC+C,EAAA,EAAD,CAAOC,UAAW,EAAG7N,MAAO,CACxB0U,SAAU,WACV+D,QAAS,EACTxE,OAAQ,EACRlI,MAAO,OAEP,kBAACqL,GAAD,CAAiB7R,SAAU3F,KAAKF,MAAMhB,QACtC,kBAAC,EAAD,CAAWwB,OAA6B,YAArBN,KAAKF,MAAMhB,MAAqBmB,WAAY4Q,IAC/D,kBAAC,EAAD,CAAavQ,QAASmC,EAAiBzC,KAAKF,MAAMhB,OACtC6G,SAAUlD,EAAiBzC,KAAKF,MAAMhB,OAASkB,KAAKF,MAAMhB,MAAQ,OAAQmB,WAAY4Q,IAClG,kBAAC,EAAD,CAAcvQ,OAA6B,WAArBN,KAAKF,MAAMhB,MAAoBmB,WAAY4Q,IACjE,kBAAC,GAAD,CAAYvQ,OAA6B,SAArBN,KAAKF,MAAMhB,MAAkBmB,WAAY4Q,IAC7D,kBAACU,EAAA,EAAD,CAAMvH,MAAM,gBAAgB5H,KAAK,2BAA2BhC,MAAO,CAACiT,QAAS,KACzE,kBAAC,KAAD,MADJ,aAGA,kBAAC9B,EAAA,EAAD,CAAMvH,MAAM,gBAAgB5H,KAAK,+BAA+BhC,MAAO,CAACiT,QAAS,KAC7E,kBAAC,KAAD,MADJ,4BAGA,kBAAC9B,EAAA,EAAD,CAAMvH,MAAM,gBAAgB5H,KAAK,oCAAoChC,MAAO,CAACiT,QAAS,KAClF,kBAAC,KAAD,MADJ,iBAGA,kBAACyF,EAAA,EAAD,CAAQ9O,MAAM,UAAUc,QAAS9K,KAAK+Y,QAASC,aAAW,SAA1D,e,GArFqBxM,IAAMrL,W,oBCGhC8X,G,kDA5BX,WAAYxa,GAAY,IAAD,8BACnB,cAAMA,IACDqB,MAAQ,CACT+Q,OAAQ9H,EAASvE,cAAc0U,gBAC/BC,cAAc,GAJC,E,gEAQI,IAAD,OACtBpQ,EAASvE,cAActE,mBAAkB,WACrC,EAAKmN,SAAS,CACVwD,OAAQ9H,EAASvE,cAAc0U,uB,+BAMvC,OACI,oCACI,kBAACE,GAAA,EAAD,MACA,kBAACC,GAAA,EAAD,CAAWC,SAAS,MAChB,kBAAC,GAAD,CAAazI,OAAQ7Q,KAAKF,MAAM+Q,e,GAvBlCrE,IAAMrL,WCLJoY,QACW,cAA7B/X,OAAOC,SAAS+X,UAEe,UAA7BhY,OAAOC,SAAS+X,UAEhBhY,OAAOC,SAAS+X,SAAS5P,MACvB,2DCXN6P,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,GAAD,OAEJ1D,SAAS2D,eAAe,SAG5B3D,SAASqC,KAAKlY,MAAMyZ,KAAO,MD6HrB,kBAAmBC,WACrBA,UAAUC,cAAc5Q,MACrBI,MAAK,SAAAyQ,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1U,QAAQ0U,MAAMA,EAAMC,c","file":"static/js/main.5ed3e6d3.chunk.js","sourcesContent":["export function commaFormat(x: number): string {\r\n    if (Number.isNaN(x)) return \"\"\r\n    let x_str: string = x.toFixed(2)\r\n    let parts: string[] = x_str.split(\".\")\r\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n    return parts.join(\".\");\r\n}\r\n\r\nexport function KMFormat(x: number): string {\r\n    if (Number.isNaN(x)) return \"\"\r\n    let suffix = \"\";\r\n    if (Math.abs(x) >= 1000000000) {\r\n        suffix = \"B\"\r\n        x /= 1000000000;\r\n    } else if (Math.abs(x) >= 1000000) {\r\n        suffix = \"M\"\r\n        x /= 1000000;\r\n    } else if (Math.abs(x) >= 1000) {\r\n        suffix = \"K\"\r\n        x /= 1000;\r\n    }\r\n    return x.toPrecision(3) + suffix;\r\n}\r\n\r\nexport function KMFToNum(str: string): number {\r\n    let unit = 1\r\n    if (str.includes('K')) {\r\n        unit = 1000\r\n        str = str.replace('K', '')\r\n    }\r\n    if (str.includes('M')) {\r\n        unit = 1000000\r\n        str = str.replace('M', '')\r\n    }\r\n    if (str.includes('B')) {\r\n        str = str.replace('B', '')\r\n        unit = 1000000000\r\n    }\r\n    return Number.parseFloat(str) * unit\r\n}\r\n","/**\r\n * Created by TylerLiu on 2020/04/23.\r\n */\r\nimport 'd3-transition';\r\nimport {select} from 'd3-selection';\r\nimport React, {Component} from 'react';\r\nimport ReactWordcloud, {Callbacks, OptionsProp, Word} from \"react-wordcloud\";\r\nimport {KMFormat} from \"../util\";\r\nimport {DataLoaderProps} from \"../models/DataLoader\";\r\n\r\ninterface WordCloudProps extends DataLoaderProps {\r\n    hidden?: boolean\r\n}\r\n\r\nexport default class WordCloud extends Component<WordCloudProps> {\r\n    private callbacks: Callbacks = {\r\n        getWordTooltip: (word: Word) => `Descriptions containing \"${word.text}\" total $${KMFormat(word.value)}`,\r\n        onWordClick: this.getCallback('onWordClick').bind(this),\r\n        onWordMouseOut: this.getCallback('onWordMouseOut').bind(this),\r\n        onWordMouseOver: this.getCallback('onWordMouseOver').bind(this),\r\n    };\r\n\r\n    private options: OptionsProp = {\r\n        fontFamily: 'impact',\r\n        fontSizes: [12, 60],\r\n        fontStyle: 'normal',\r\n        fontWeight: 'normal',\r\n        scale: 'log',\r\n        //spiral: 'archimedean',\r\n        deterministic: true,\r\n\r\n        rotations: 4,\r\n        rotationAngles: [-45, 90],\r\n\r\n        transitionDuration: 200,\r\n    }\r\n\r\n    constructor(props: DataLoaderProps) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            words: [{text: 'Loading...', value: 100}]\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.dataloader.addChangeCallback(this.setWords.bind(this))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{height: '80vh'}} hidden={this.props.hidden}>\r\n                {(this.props.hidden || false) ? null : (\r\n                    <ReactWordcloud callbacks={this.callbacks} words={this.props.dataloader.getWordList().slice(0, 80)}\r\n                                    options={this.options}/>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    getCallback(callback: string) {\r\n        return (word: Word, event: MouseEvent | undefined) => {\r\n            const isActive = callback !== 'onWordMouseOut';\r\n            // @ts-ignore\r\n            const text = select(event.target);\r\n            text\r\n                .on('click', (() => {\r\n                    if (isActive) {\r\n                        this.props.dataloader.addKeywordFilter(word.text);\r\n                    }\r\n                }))\r\n                .transition()\r\n                .attr('background', 'white')\r\n                .attr('text-decoration', isActive ? 'underline' : 'none');\r\n        };\r\n    }\r\n\r\n    setWords() {\r\n        this.forceUpdate()\r\n    }\r\n}\r\n","export default class QueryBuilder {\r\n\r\n    private static instance: QueryBuilder | null = null\r\n    private queryString: string\r\n    private generators: Map<number, () => string> = new Map()\r\n\r\n    static getInstance() {\r\n        if (this.instance === null) this.instance = new QueryBuilder()\r\n        return this.instance\r\n    }\r\n\r\n\r\n    private constructor() {\r\n        this.queryString = window.location.search.replace('?', '')\r\n    }\r\n\r\n    getQuery() {\r\n        return this.queryString\r\n    }\r\n\r\n    addGenerator(callback: () => string, index: number) {\r\n        this.generators.set(index, callback)\r\n    }\r\n\r\n    update() {\r\n        let strings: string[] = [...this.generators.values()].map((c) => c())\r\n        const query = strings.join('&')\r\n\r\n        let path = window.location.href\r\n        if (path.includes('?')) path = path.substr(0, path.indexOf('?'))\r\n        window.history.pushState({path: path + '?' + query}, '', path + '?' + query);\r\n    }\r\n}\r\n","import {KMFormat, KMFToNum} from \"../util\";\r\nimport * as Papa from 'papaparse';\r\nimport QueryBuilder from \"./QueryBuilder\";\r\n\r\ninterface DataEntry {\r\n    date: Date,\r\n    fund: string,\r\n    division: string,\r\n    department: string,\r\n    gl: string,\r\n    event: string,\r\n    description: string,\r\n    amount: number,\r\n    words: string[],\r\n    id?: number\r\n}\r\n\r\nexport interface AmountBin {\r\n    low: number\r\n    high: number\r\n    value: number\r\n    name: string\r\n}\r\n\r\nexport type Category = 'fund' | 'division' | 'department' | 'gl' | 'event'\r\nexport function isOfTypeCategory (input: string): input is Category {\r\n    return ['fund', 'division', 'department', 'gl', 'event'].includes(input);\r\n}\r\n\r\nexport interface WordEntry {\r\n    text: string,\r\n    value: number\r\n}\r\n\r\ninterface Filter {\r\n    category: string,\r\n    name: string,\r\n    index: DataEntry[],\r\n    amount: number,\r\n}\r\n\r\nexport interface DataLoaderProps {\r\n    dataloader: DataLoader,\r\n    style?: Object,\r\n}\r\n\r\nexport default class DataLoader {\r\n\r\n    private data: DataEntry[] = []\r\n    private filters: Filter[] = []\r\n    private dataChangeCallbacks: (() => void)[] = []\r\n    private total_amount: number = 0\r\n    private dataset : string | null = null\r\n    private otherDepth : number = 0\r\n    private otherCategory : Category = \"fund\"\r\n    private peekTable : boolean = false\r\n\r\n    constructor(dataset: string | null) {\r\n        this.dataset = dataset\r\n        this.setDataset(dataset)\r\n    }\r\n\r\n    setDataset(dataset: string | null) {\r\n        this.sliceFilter(0)\r\n        this.loadDataset(dataset)\r\n    }\r\n\r\n    getDataset(): string | null {\r\n        return this.dataset\r\n    }\r\n\r\n    private loadDataset(dataset: string | null) {\r\n        if (dataset === null) return\r\n        Papa.parse(window.location.pathname + \"/expense_summary_\" + dataset + \".csv\",\r\n            {\r\n                download: true,\r\n                header: true,\r\n                complete: (results) => {\r\n                    this.data = results.data.map((e) => {\r\n                        e.date = new Date(Number.parseFloat(e.date) * 1000)\r\n                        e.amount = Number.parseFloat(e.amount)\r\n                        e.words = e.__parsed_extra || []\r\n                        return e\r\n                    }).filter(e => !Number.isNaN(e.amount))\r\n\r\n                    this.onLoad()\r\n                }\r\n            })\r\n    }\r\n\r\n    private onLoad() {\r\n        this.total_amount = this.data.reduce((prev, curr) => prev + curr.amount, 0)\r\n        this.parseQuery(QueryBuilder.getInstance().getQuery())\r\n        QueryBuilder.getInstance().addGenerator(this.generateQueryString.bind(this), 2)\r\n        this.listChangeCallback()\r\n    }\r\n\r\n    private parseQuery(query: string) {\r\n        if (query[0] === '?') query = query.slice(1)\r\n        const callbacks = this.dataChangeCallbacks\r\n        this.dataChangeCallbacks = []\r\n        try {\r\n            query.split('&').forEach(entry => {\r\n                if (!entry.includes('=')) return\r\n                const sign_location = entry.indexOf('=')\r\n                const q = entry.substr(0, sign_location)\r\n                const v = entry.substr(sign_location + 1)\r\n                switch (q) {\r\n                    case 'keyword':\r\n                        this.addKeywordFilter(v)\r\n                        break\r\n                    case 'fund':\r\n                    case 'division':\r\n                    case 'department':\r\n                    case 'gl':\r\n                    case 'event':\r\n                        this.addCategoryFilter(q, atob(v))\r\n                        break\r\n                    case 'amount':\r\n                        if (!v.includes('..')) return\r\n                        const valuesa = v.split('..').map(e => KMFToNum(e))\r\n                        this.addAmountFilter(valuesa[0], valuesa[1])\r\n                        break\r\n                    case 'date':\r\n                        if (!v.includes('..')) return\r\n                        const valuesd = v.split('..')\r\n                        this.addMonthFilter(valuesd[0], valuesd[1])\r\n                        break\r\n                }\r\n            })\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n        this.dataChangeCallbacks = callbacks\r\n    }\r\n\r\n    private generateQueryString() {\r\n        const strings = this.filters.map((curr) => {\r\n            switch (curr.category) {\r\n                case 'keyword':\r\n                    return 'keyword=' + curr.name\r\n                case 'amount':\r\n                    return 'amount=' + curr.name.replace('~', '..')\r\n                case 'date':\r\n                    return 'date=' + curr.name.replace('~', '..')\r\n                default:\r\n                    return curr.category + '=' + btoa(curr.name)\r\n            }\r\n        })\r\n        return strings.join('&')\r\n    }\r\n\r\n    private listChangeCallback() {\r\n        this.dataChangeCallbacks.forEach(c => c())\r\n        QueryBuilder.getInstance().update()\r\n    }\r\n\r\n    addChangeCallback(callback: () => void) {\r\n        this.dataChangeCallbacks.push(callback)\r\n    }\r\n\r\n    getOtherDepth(): number {\r\n        return this.otherDepth\r\n    }\r\n\r\n    setOtherDepth(depth: number) {\r\n        this.otherDepth = depth\r\n        this.listChangeCallback()\r\n    }\r\n\r\n    getOtherCategory(): Category {\r\n        return this.otherCategory\r\n    }\r\n\r\n    setOtherCategory(category : Category) {\r\n        this.otherCategory = category\r\n        this.listChangeCallback()\r\n    }\r\n\r\n    setPeekTable(active : boolean) {\r\n        this.peekTable = active\r\n        this.listChangeCallback()\r\n    }\r\n\r\n    getPeekTable() : boolean {\r\n        return this.peekTable\r\n    }\r\n\r\n    getRecords(): DataEntry[] {\r\n        if (this.data.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        if (this.filters.length === 0) {\r\n            return this.data\r\n        }\r\n\r\n        return this.filters[this.filters.length - 1].index\r\n    }\r\n\r\n    getWordList(): WordEntry[] {\r\n        if (this.data.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        let words_set = new Map<string, number>()\r\n        this.getRecords().forEach(row => {\r\n            row.words.forEach(w => {\r\n                words_set.set(w, (words_set.get(w) || 0) + row.amount);\r\n            })\r\n        })\r\n\r\n        const chosen_words = this.filters.filter(e => e.category === 'keyword').map(e => e.name)\r\n\r\n        let words_list: WordEntry[] = []\r\n        for (let [word, val] of words_set.entries()) {\r\n            if (!chosen_words.includes(word))\r\n                words_list.push({text: word, value: val})\r\n        }\r\n\r\n        words_list.sort((a, b) => b.value - a.value)\r\n\r\n        return words_list\r\n    }\r\n\r\n    getCategories(category: Category): WordEntry[] {\r\n        if (this.data.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        let records: DataEntry[];\r\n        if (this.getLastFilter()?.category === category) {\r\n            records = this.filters.length >= 2 ? this.filters[this.filters.length - 2].index : this.data\r\n        } else {\r\n            records = this.getRecords()\r\n        }\r\n\r\n        let category_set = new Map<string, number>()\r\n        records.forEach(row => {\r\n            const cate_name = row[category]\r\n            category_set.set(cate_name, (category_set.get(cate_name) || 0) + row.amount);\r\n        })\r\n\r\n        let category_list: WordEntry[] = []\r\n        for (let [word, val] of category_set.entries()) {\r\n            category_list.push({text: word, value: val})\r\n        }\r\n\r\n        category_list.sort((a, b) => a.value - b.value)\r\n\r\n        return category_list\r\n    }\r\n\r\n    getAmountBins(numBin: number): { data: AmountBin[], domain: [number, number] } {\r\n        if (this.data.length === 0) {\r\n            return {data: [], domain: [0, 1]}\r\n        }\r\n\r\n        let records: DataEntry[];\r\n        let domain: [number, number] | null = null;\r\n        if (this.filters.length !== 0 && this.filters[this.filters.length - 1].category === 'amount') {\r\n            records = this.filters.length >= 2 ? this.filters[this.filters.length - 2].index : this.data\r\n            const values = this.filters[this.filters.length - 1].name.split('~').map(e => KMFToNum(e))\r\n            domain = values as [number, number]\r\n        } else {\r\n            records = this.getRecords()\r\n        }\r\n        let [allMin, allMax] = records.reduce(((previousValue, currentValue) =>\r\n            [Math.min(previousValue[0], currentValue.amount),\r\n                Math.max(previousValue[1], currentValue.amount)]), [Number.MAX_VALUE, Number.MIN_VALUE])\r\n\r\n        if (domain === null) domain = [allMin, allMax]\r\n        allMax += 0.001\r\n\r\n        let bins: AmountBin[] = []\r\n        let bin_size = (allMax - allMin) / numBin\r\n        for (let i = 0; i < numBin; i++) {\r\n            bins.push({\r\n                low: allMin + i * bin_size, high: allMin + (i + 1) * bin_size,\r\n                value: 0, name: KMFormat(allMin + (i + 0.5) * bin_size)\r\n            })\r\n        }\r\n\r\n        records.forEach((e) => {\r\n            bins.forEach((b) => {\r\n                if (b.low <= e.amount && e.amount < b.high)\r\n                    b.value += e.amount\r\n            })\r\n        })\r\n\r\n        return {data: bins, domain: domain}\r\n    }\r\n\r\n    getMonthBins(): { data: WordEntry[], domain: [string, string] } {\r\n        if (this.data.length === 0) {\r\n            return {data: [{text: '0000-01', value: 0}], domain: ['0000-01', '0000-01']}\r\n        }\r\n\r\n        let records: DataEntry[];\r\n        let domain: [string, string] | null = null;\r\n        if (this.filters.length !== 0 && this.filters[this.filters.length - 1].category === 'date') {\r\n            records = this.filters.length >= 2 ? this.filters[this.filters.length - 2].index : this.data\r\n            const values = this.filters[this.filters.length - 1].name.split('~')\r\n            domain = values as [string, string]\r\n        } else {\r\n            records = this.getRecords()\r\n        }\r\n        let [allMin, allMax] = records.reduce((previousValue, currentValue) => {\r\n            const month_string = (currentValue.date.getFullYear() + \"\").padStart(4, '0') + '-' + ((currentValue.date.getMonth() + 1) + \"\").padStart(2, \"0\")\r\n            return [previousValue[0].localeCompare(month_string) < 0 ? previousValue[0] : month_string,\r\n                previousValue[1].localeCompare(month_string) > 0 ? previousValue[1] : month_string]\r\n        }, ['9999-99', '0000-00'])\r\n\r\n        if (domain === null) domain = [allMin, allMax]\r\n\r\n        let bins: Map<string, number> = new Map()\r\n        records.forEach((e) => {\r\n            const month_string = (e.date.getFullYear() + \"\").padStart(4, \"0\") + '-' + ((e.date.getMonth() + 1) + \"\").padStart(2, \"0\")\r\n            bins.set(month_string, (bins.get(month_string) || 0) + e.amount)\r\n        })\r\n\r\n        let data: WordEntry[] = [...bins.entries()].map((e) => ({text: e[0], value: e[1]}))\r\n            .sort((a, b) => (a.text.localeCompare(b.text)))\r\n\r\n        while (data.length !== 0 && data.length < 12) {\r\n            let month_num = data[data.length - 1].text.split('-').map((s) => Number.parseInt(s))\r\n            if (month_num[1] !== 12) month_num[1]++\r\n            else month_num = [month_num[0] + 1, 1]\r\n            let next_month = (month_num[0] + \"\").padStart(4, \"0\") + '-' + (month_num[1] + \"\").padStart(2, \"0\")\r\n            data.push({text: next_month, value: 0})\r\n        }\r\n\r\n        return {data: data, domain: domain}\r\n    }\r\n\r\n    getTotal(): number {\r\n        if (this.filters.length === 0) {\r\n            return this.total_amount\r\n        }\r\n        return this.filters[this.filters.length - 1].amount\r\n    }\r\n\r\n    getDatasetTotal(): number {\r\n        return this.total_amount\r\n    }\r\n\r\n    getFilters() {\r\n        return this.filters\r\n    }\r\n\r\n    getLastFilter() {\r\n        if (this.filters.length === 0)\r\n            return null;\r\n        else return this.filters[this.filters.length - 1]\r\n    }\r\n\r\n    sliceFilter(remaining_length: number) {\r\n        this.otherDepth = 0\r\n        this.filters = this.filters.slice(0, remaining_length)\r\n        this.listChangeCallback()\r\n    }\r\n\r\n    addKeywordFilter(word: string) {\r\n        if (this.data.length === 0) return\r\n        if (this.filters.reduce((prev, curr) => prev || (curr.category === 'keyword' && curr.name === word), false))\r\n            return\r\n\r\n        let word_index: DataEntry[]\r\n        if (this.filters.length !== 0) {\r\n            const last_index = this.filters[this.filters.length - 1].index\r\n            word_index = last_index.filter((e) => e.words.includes(word))\r\n        } else {\r\n            word_index = this.data.filter(e => e.words.includes(word))\r\n        }\r\n\r\n        this.filters.push({\r\n            category: 'keyword',\r\n            name: word,\r\n            index: word_index,\r\n            amount: word_index\r\n                .reduce((prev, curr) => prev + curr.amount, 0)\r\n        })\r\n\r\n        this.listChangeCallback()\r\n    }\r\n    \r\n    addCategoryFilter(category: Category, value: string) {\r\n        if (this.data.length === 0) return\r\n        if (this.filters.reduce((prev, curr) => prev || (curr.category === category && curr.name === value), false))\r\n            return\r\n\r\n        if (this.getLastFilter()?.category === category) {\r\n            this.filters = this.filters.slice(0, -1)\r\n        }\r\n\r\n        let new_index: DataEntry[]\r\n        if (this.filters.length !== 0) {\r\n            const last_index = this.filters[this.filters.length - 1].index\r\n            // @ts-ignore\r\n            new_index = last_index.filter((e) => (e[category] === value))\r\n        } else {\r\n            // @ts-ignore\r\n            new_index = this.data.filter(e => (e[category] === value))\r\n        }\r\n\r\n        this.filters.push({\r\n            category: category,\r\n            name: value,\r\n            index: new_index,\r\n            amount: new_index.reduce((prev, curr) => prev + curr.amount, 0)\r\n        })\r\n\r\n        this.listChangeCallback()\r\n    }\r\n\r\n    \r\n    removeCategoryFilter(category: Category, value: string) {\r\n        if (this.data.length === 0) return\r\n        if (this.filters.reduce((prev, curr) => prev || (curr.category === category && curr.name === value), false))\r\n            return\r\n\r\n        if (this.getLastFilter()?.category === category) {\r\n            this.filters = this.filters.slice(0, -1)\r\n        }\r\n\r\n        let new_index: DataEntry[]\r\n        if (this.filters.length !== 0) {\r\n            const last_index = this.filters[this.filters.length - 1].index\r\n            // @ts-ignore\r\n            new_index = last_index.filter((e) => (e[category] === value))\r\n        } else {\r\n            // @ts-ignore\r\n            new_index = this.data.filter(e => (e[category] === value))\r\n        }\r\n\r\n        this.filters.push({\r\n            category: category,\r\n            name: value,\r\n            index: new_index,\r\n            amount: new_index.reduce((prev, curr) => prev + curr.amount, 0)\r\n        })\r\n\r\n        this.listChangeCallback()\r\n    }\r\n\r\n\r\n    addAmountFilter(low: number, high: number) {\r\n        if (this.data.length === 0) return\r\n\r\n        if (this.filters.length > 0 && this.filters[this.filters.length - 1].category === 'amount') {\r\n            this.filters = this.filters.slice(0, -1)\r\n        }\r\n        const last_index = this.filters.length > 0 ? this.filters[this.filters.length - 1].index : this.data\r\n        const new_index = last_index\r\n            .filter((e) => (low <= e.amount && e.amount <= high))\r\n\r\n        this.filters.push({\r\n            category: 'amount',\r\n            name: KMFormat(low) + \"~\" + KMFormat(high),\r\n            index: new_index,\r\n            amount: new_index\r\n                .reduce((prev, curr) => prev + curr.amount, 0)\r\n        })\r\n\r\n        this.listChangeCallback()\r\n    }\r\n\r\n    addMonthFilter(low: string, high: string) {\r\n        if (this.data.length === 0) return\r\n\r\n        if (this.filters.length > 0 && this.filters[this.filters.length - 1].category === 'date') {\r\n            this.filters = this.filters.slice(0, -1)\r\n        }\r\n        const last_index = this.filters.length > 0 ? this.filters[this.filters.length - 1].index : this.data\r\n        const new_index = last_index\r\n            .filter((e) => {\r\n                const month_string = (e.date.getFullYear() + \"\").padStart(4, '0') + '-' + ((e.date.getMonth() + 1) + \"\").padStart(2, '0')\r\n                return low.localeCompare(month_string) <= 0 && month_string.localeCompare(high) <= 0\r\n            })\r\n\r\n        this.filters.push({\r\n            category: 'date',\r\n            name: low + \"~\" + high,\r\n            index: new_index,\r\n            amount: new_index\r\n                .reduce((prev, curr) => prev + curr.amount, 0)\r\n        })\r\n\r\n        this.listChangeCallback()\r\n    }\r\n}\r\n","import QueryBuilder from \"./QueryBuilder\";\r\nimport DataLoader from \"./DataLoader\";\r\n\r\nexport default class Datasets {\r\n\r\n    private static instance: Datasets | null = null\r\n    private datasets: string[] = []\r\n    private currentDataset: string | null = null\r\n    private callbacks: (() => void)[] = []\r\n    private dataLoader: DataLoader\r\n    private ready: boolean = false\r\n\r\n    static getInstance() {\r\n        if (this.instance === null) this.instance = new Datasets()\r\n        return this.instance\r\n    }\r\n\r\n\r\n    private constructor() {\r\n        this.parseDataset(QueryBuilder.getInstance().getQuery())\r\n        this.dataLoader = new DataLoader(this.currentDataset)\r\n        QueryBuilder.getInstance().addGenerator(this.getQueryString.bind(this), 0)\r\n        fetch(window.location.pathname + \"/datasets.json\")\r\n            .then(res => res.json())\r\n            .then((res) => {\r\n                this.datasets = res\r\n                this.ready = true\r\n                if (this.currentDataset === null) this.currentDataset = this.datasets[0]\r\n                this.dataLoader.setDataset(this.currentDataset)\r\n                this.callbacks.forEach(c => c())\r\n            })\r\n    }\r\n\r\n    addChangeCallback(callback: () => void) {\r\n        this.callbacks.push(callback)\r\n    }\r\n\r\n    getCurrentDataset() {\r\n        if (this.currentDataset != null) return this.currentDataset\r\n        return undefined\r\n    }\r\n\r\n    getCurrentDatasetName() {\r\n        if (this.currentDataset != null) return Datasets.getDatasetTitle(this.currentDataset)\r\n        return undefined\r\n    }\r\n\r\n    getDatasets() {\r\n        if (this.ready) return this.datasets\r\n        return undefined\r\n    }\r\n\r\n    getDatasetNames() {\r\n        if (this.ready) return this.datasets.map(Datasets.getDatasetTitle)\r\n        return undefined\r\n    }\r\n\r\n    getDataLoader() {\r\n        return this.dataLoader\r\n    }\r\n\r\n    setCurrentDataset(name: string) {\r\n        this.currentDataset = name\r\n        QueryBuilder.getInstance().update()\r\n        this.dataLoader.setDataset(name)\r\n        this.callbacks.forEach(c => c())\r\n    }\r\n\r\n    private parseDataset(query: string) {\r\n        if (query[0] === '?') query = query.slice(1)\r\n        const res = query.split('&').filter((e) => e.startsWith('d='))\r\n        if (res.length !== 0)\r\n            this.currentDataset = res[0].substr(2)\r\n    }\r\n\r\n    private getQueryString(): string {\r\n        if (this.currentDataset === null) return \"\"\r\n        return 'd=' + this.currentDataset\r\n    }\r\n\r\n    static getDatasetTitle(name: string): string {\r\n        if (name.match(/^\\d*$/)) {\r\n            const year = Number.parseInt(name)\r\n            return name + '-' + (year + 1).toString()\r\n        } else return name\r\n    }\r\n}\r\n","/**\r\n * Created by TylerLiu on 2018/12/23.\r\n */\r\nimport React, { Component } from 'react';\r\nimport {\r\n    Grid,\r\n    VirtualTable,\r\n    TableHeaderRow,\r\n    TableSummaryRow,\r\n    ExportPanel,\r\n    TableColumnVisibility, Toolbar, TableGroupRow, GroupingPanel, SearchPanel, TableColumnResizing\r\n} from \"@devexpress/dx-react-grid-material-ui\";\r\nimport { Category, DataLoaderProps, isOfTypeCategory } from \"../models/DataLoader\";\r\nimport {\r\n    Column, GroupingState, GroupSummaryItem, IntegratedFiltering, IntegratedGrouping,\r\n    IntegratedSorting,\r\n    IntegratedSummary, SearchState,\r\n    Sorting,\r\n    SortingState, SummaryItem,\r\n    SummaryState, TableColumnWidthInfo, TableGroupRow as TableGroupRowBase\r\n} from \"@devexpress/dx-react-grid\";\r\nimport { Paper, Link, Button } from \"@material-ui/core\";\r\nimport { DataTypeProvider } from \"@devexpress/dx-react-grid\";\r\nimport { GridExporter } from \"@devexpress/dx-react-grid-export\";\r\nimport { saveAs } from \"file-saver\";\r\nimport Datasets from \"../models/Datasets\";\r\nimport { Workbook } from \"exceljs\";\r\nimport { isOfTypeTabs, TabTypes } from \"./DatasetView\";\r\n\r\nconst month_name = ['January', 'February', 'March', 'April', 'May', 'June',\r\n    'July', 'August', 'September', 'October', 'November', 'December']\r\n\r\nconst CurrencyFormatter = ({ value }: { value: number }) => (\r\n    <span style={{ color: 'blue' }}>\r\n        {value.toLocaleString('en-US', { style: 'currency', currency: 'USD' })}\r\n    </span>\r\n);\r\n\r\nconst DateFormatter = ({ value }: { value: Date }) => (\r\n    <span>{value.toDateString()}</span>\r\n);\r\n\r\nconst DateGroupFormatter = ({ column, row }: TableGroupRowBase.ContentProps) => {\r\n    if (column.name === 'date') {\r\n        row.key.toString()\r\n        const [year, month] = row.key.toString().split('-');\r\n        return <span><strong>Date:</strong> {month_name[Number.parseInt(month) - 1]} {year}</span>\r\n    } else return (\r\n        <span><strong>{column.title}:</strong> {row.value}</span>\r\n    )\r\n};\r\n\r\nconst dateToYearMonth = (value: Date) =>\r\n    value.getFullYear().toString().padStart(4, '0') + '-' + (value.getMonth() + 1).toString().padStart(2, '0')\r\n\r\ninterface RecordTableState {\r\n    sortingState: Sorting[]\r\n    groupBy: Category | \"date\" | undefined\r\n    dataHeight: number\r\n    selectedColumn: string\r\n    isOpening: Boolean\r\n    isClosing: Boolean\r\n    searchValue: string\r\n}\r\n\r\ninterface RecordTableProps extends DataLoaderProps {\r\n    hidden?: boolean | undefined;\r\n    onChange: (a: TabTypes) => void;\r\n}\r\n\r\nexport default class RecordTable extends Component<RecordTableProps, RecordTableState> {\r\n\r\n    private TableHeaderCell = (props: TableHeaderRow.CellProps) => (\r\n        <TableHeaderRow.Cell\r\n            {...props}\r\n            onClick={() => this.setHighlight(props.column)}\r\n            style={props.column.name === this.state.selectedColumn ? \r\n                {fontWeight: \"bold\", backgroundColor: this.getSelectedBackgroundColor(props.column.name), color: \"White\"} : \r\n                {fontWeight: \"bold\", backgroundColor: this.getBackgroundColor(props.column.name), color: \"Black\"}}\r\n        />\r\n    );\r\n\r\n    private getBackgroundColor(category: string): string {\r\n        switch (category) {\r\n            case \"fund\":\r\n                return \"#FFF5F5\" // Red\r\n            case \"division\":\r\n                return \"#FFF9F0\" // Orange\r\n            case \"department\":\r\n                return \"#F9FFF6\" // Green\r\n            case \"event\":\r\n                return \"#FBFAFF\" // Blue\r\n            case \"gl\":\r\n                return \"#FFF9FF\" // Purple\r\n            default:\r\n                return \"#F6F6F6\" // Gray\r\n        }\r\n    }\r\n\r\n    private getSelectedBackgroundColor(category: string): string {\r\n        switch (category) {\r\n            case \"fund\":\r\n                return \"#620000\" // Red\r\n            case \"division\":\r\n                return \"#8E4200\" // Orange\r\n            case \"department\":\r\n                return \"#0C5700\" // Green\r\n            case \"event\":\r\n                return \"#001457\" // Blue\r\n            case \"gl\":\r\n                return \"#48005A\" // Purple\r\n            default:\r\n                return \"#2F2F2F\" // Gray\r\n        }\r\n    }\r\n\r\n    private readonly summaryItems: SummaryItem[] = [\r\n        { columnName: 'date', type: 'count' },\r\n        { columnName: 'amount', type: 'sum' },\r\n    ]\r\n\r\n    private readonly columns: Column[] = [\r\n        { title: 'Row', name: 'id' },\r\n        { title: 'Posted Date', name: 'date' },\r\n        { title: 'Description', name: 'description' },\r\n        { title: 'Amount', name: 'amount' },\r\n        { title: 'Fund', name: 'fund' },\r\n        { title: 'Division', name: 'division' },\r\n        { title: 'Department', name: 'department' },\r\n        { title: 'Event', name: 'event' },\r\n        { title: 'GL', name: 'gl' },\r\n    ]\r\n\r\n    private readonly tableColumnExtension: VirtualTable.ColumnExtension[] = [\r\n        { columnName: 'id', wordWrapEnabled: true },\r\n        { columnName: 'date', wordWrapEnabled: true },\r\n        { columnName: 'department', wordWrapEnabled: true },\r\n        { columnName: 'fund', wordWrapEnabled: true },\r\n        { columnName: 'division', wordWrapEnabled: true },\r\n        { columnName: 'event', wordWrapEnabled: true },\r\n        { columnName: 'gl', wordWrapEnabled: true },\r\n        { columnName: 'description', wordWrapEnabled: true },\r\n        { columnName: 'amount', wordWrapEnabled: true },\r\n    ]\r\n\r\n    private readonly groupSummaryItems: GroupSummaryItem[] = [\r\n        { columnName: 'amount', type: 'sum', showInGroupFooter: false, alignByColumn: true },\r\n        { columnName: 'amount', type: 'sum', showInGroupFooter: true },\r\n        { columnName: 'date', type: 'count', showInGroupFooter: true },\r\n    ]\r\n\r\n    private readonly groupExtension: TableGroupRow.ColumnExtension[] = [\r\n        { columnName: 'id', showWhenGrouped: true },\r\n        { columnName: 'date', showWhenGrouped: true },\r\n        { columnName: 'department', showWhenGrouped: true },\r\n        { columnName: 'fund', showWhenGrouped: true },\r\n        { columnName: 'division', showWhenGrouped: true },\r\n        { columnName: 'event', showWhenGrouped: true },\r\n        { columnName: 'gl', showWhenGrouped: true },\r\n        { columnName: 'description', showWhenGrouped: true },\r\n        { columnName: 'amount', showWhenGrouped: true },\r\n    ]\r\n\r\n    private groupingColumnExtensions: IntegratedGrouping.ColumnExtension[] = [\r\n        {\r\n            columnName: 'date', criteria: (value) => {\r\n                if (value instanceof Date) {\r\n                    const key = dateToYearMonth(value)\r\n                    return { key: key }\r\n                } else return { key: \"\" };\r\n            }\r\n        }\r\n    ]\r\n\r\n    private columnWidth: TableColumnWidthInfo[] = [\r\n        { columnName: 'id', width: 70 },\r\n        { columnName: 'date', width: 150 },\r\n        { columnName: 'fund', width: 150 },\r\n        { columnName: 'division', width: 150 },\r\n        { columnName: 'department', width: 150 },\r\n        { columnName: 'event', width: 150 },\r\n        { columnName: 'gl', width: 150 },\r\n        { columnName: 'description', width: 350 },\r\n        { columnName: 'amount', width: 150 },\r\n    ]\r\n\r\n    private readonly exporter: React.RefObject<{ exportGrid: (options?: object) => void }>\r\n\r\n    private groupWeight: Map<string, number>\r\n\r\n    private searchValue: string = ''\r\n\r\n    private integratedSortingColumnExtensions: IntegratedSorting.ColumnExtension[] = []\r\n\r\n    constructor(props: RecordTableProps) {\r\n        super(props);\r\n        this.exporter = React.createRef()\r\n\r\n        this.state = {\r\n            sortingState: [{ columnName: 'id', direction: 'asc' }],\r\n            groupBy: undefined,\r\n            dataHeight: 110,\r\n            selectedColumn: '',\r\n            isOpening: false,\r\n            isClosing: false,\r\n            searchValue: ''\r\n        }\r\n\r\n        this.groupWeight = new Map<string, number>()\r\n        if (this.state.groupBy !== undefined && this.state.groupBy !== 'date') {\r\n            this.buildGroupWeightTable()\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.dataloader.addChangeCallback(() => {\r\n            this.buildGroupWeightTable();\r\n            this.forceUpdate()\r\n        })\r\n    }\r\n\r\n    private buildGroupWeightTable() {\r\n        if (this.state.groupBy !== undefined && this.state.groupBy !== 'date') {\r\n            this.groupWeight.clear()\r\n            this.props.dataloader.getCategories(this.state.groupBy).forEach(entry => {\r\n                this.groupWeight.set(entry.text, entry.value)\r\n            })\r\n\r\n            this.integratedSortingColumnExtensions = [\r\n                {\r\n                    columnName: this.state.groupBy,\r\n                    compare: (a, b) => (this.groupWeight?.get(a) || 0) - (this.groupWeight?.get(b) || 0)\r\n                },\r\n            ]\r\n        }\r\n    }\r\n\r\n    private searchLock(value : string) {\r\n        this.searchValue = value\r\n        if (value) {\r\n            this.setState({isClosing: false})\r\n            this.expandTable(this)\r\n        } else {\r\n            this.collapseTable(this)\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<RecordTableProps>, prevState: Readonly<RecordTableState>, snapshot?: any): void {\r\n        if (this.state.groupBy != prevState.groupBy) {\r\n            this.buildGroupWeightTable()\r\n            this.setState({\r\n                sortingState: this.getGroupSortingState(),\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        if (this.props.dataloader.getPeekTable()) {\r\n            this.props.dataloader.setPeekTable(false)\r\n            this.peekTable(this)\r\n        }\r\n\r\n        const rows = this.props.dataloader.getRecords().map((e, i) => { e.id = i; return e })\r\n        if (this.props.hidden === true)\r\n            return <Paper />\r\n        else return (\r\n            <Paper\r\n                elevation={0}\r\n                onMouseEnter={() => this.expandTable(this)}\r\n                onMouseLeave={() => this.collapseTable(this)}\r\n            >\r\n                <Grid rows={rows} columns={this.columns}>\r\n                    <SortingState\r\n                        sorting={this.state.sortingState}\r\n                    />\r\n                    <GroupingState\r\n                        grouping={this.state.groupBy !== undefined ? [{ columnName: this.state.groupBy }] : []}\r\n                    />\r\n                    <SearchState onValueChange={(value) => this.searchLock(value)}/>\r\n                    <SummaryState totalItems={this.summaryItems} groupItems={this.groupSummaryItems} />\r\n\r\n                    <IntegratedGrouping columnExtensions={this.groupingColumnExtensions} />\r\n                    <IntegratedFiltering />\r\n                    <IntegratedSorting columnExtensions={this.integratedSortingColumnExtensions} />\r\n                    <IntegratedSummary />\r\n\r\n                    <DataTypeProvider for={['amount']} formatterComponent={CurrencyFormatter} />\r\n                    <DataTypeProvider for={['date']} formatterComponent={DateFormatter} />\r\n\r\n                    <VirtualTable columnExtensions={this.tableColumnExtension} height={this.state.dataHeight} />\r\n                    {/* <TableColumnResizing\r\n                        defaultColumnWidths={this.columnWidth}\r\n                    /> */}\r\n                    <TableColumnVisibility\r\n                        defaultHiddenColumnNames={['id']}\r\n                    />\r\n                    <TableHeaderRow cellComponent={this.TableHeaderCell} />\r\n                    <TableGroupRow\r\n                        contentComponent={DateGroupFormatter}\r\n                        columnExtensions={this.groupExtension}\r\n                    />\r\n                    <TableSummaryRow />\r\n\r\n                    <Toolbar />\r\n                    <GroupingPanel showSortingControls emptyMessageComponent={() => <span />} />\r\n                    <ExportPanel startExport={(options) => this.exporter.current?.exportGrid(options)} />\r\n                    <SearchPanel />\r\n                </Grid>\r\n                <GridExporter\r\n                    ref={this.exporter}\r\n                    columns={this.columns}\r\n                    rows={rows}\r\n                    onSave={(workbook) => this.onSave(workbook)}\r\n                />\r\n            </Paper>\r\n        )\r\n    }\r\n\r\n    peekTable(table : RecordTable) : void {\r\n        if (table.state.dataHeight < 200 && !table.state.isClosing && !table.state.isOpening && this.searchValue == '') {\r\n            table.setState({isOpening: true, isClosing: true})\r\n            var peekTimer = setInterval(() => {\r\n                var incHeight = table.state.dataHeight + 70\r\n                table.setState({dataHeight: incHeight})\r\n                if (table.state.dataHeight >= 200) {\r\n                    clearInterval(peekTimer)\r\n                    var pauseTimer = setInterval(() => {\r\n                        table.setState({ isOpening: false, isClosing: false, dataHeight: 200 })\r\n                        table.collapseTable(table)\r\n                        clearInterval(pauseTimer)\r\n                    }, 3000)\r\n                }\r\n            }, 10)\r\n        }\r\n    }\r\n\r\n    expandTable(table : RecordTable) : void {\r\n        if (!table.state.isOpening) {\r\n            table.setState({ isOpening: true })\r\n            var expandTimer = setInterval(() => {\r\n                var incHeight = table.state.dataHeight + 70\r\n                table.setState({dataHeight: incHeight})\r\n                if (table.state.dataHeight >= 500) {\r\n                    table.setState({ \r\n                        dataHeight: 500,\r\n                        isOpening: false\r\n                    })\r\n                    clearInterval(expandTimer)\r\n                } else if (table.state.isClosing) {\r\n                    table.setState({ isOpening: false })\r\n                    clearInterval(expandTimer)\r\n                }\r\n            }, 10)\r\n        }\r\n    }\r\n\r\n    collapseTable(table : RecordTable) : void {\r\n        if (!table.state.isClosing && this.searchValue == '') {\r\n            table.setState({ isClosing: true })\r\n            var collapseTimer = setInterval(() => {\r\n                var decHeight = table.state.dataHeight - 70\r\n                table.setState({dataHeight: decHeight})\r\n                if (table.state.dataHeight <= 110 || !this.state.isClosing) {\r\n                    table.setState({ \r\n                        dataHeight: 110,\r\n                        isClosing: false\r\n                    })\r\n                    clearInterval(collapseTimer)\r\n                }\r\n            }, 10)\r\n        }\r\n    }\r\n\r\n    private setHighlight(sorts: Column) {\r\n        this.setState({\r\n            selectedColumn: sorts.name\r\n        })\r\n        this.setSorting(sorts)\r\n    }\r\n\r\n    private setSorting(sorts: Column) {\r\n        if (isOfTypeTabs(sorts.name)) {\r\n            this.props.onChange(sorts.name);\r\n        } else if (sorts.name == 'description') {\r\n            this.props.onChange('keyword');\r\n        }\r\n    }\r\n\r\n    private onSave(workbook: Workbook) {\r\n        workbook.xlsx.writeBuffer().then((buffer) => {\r\n            saveAs(new Blob([buffer], { type: 'application/octet-stream' }),\r\n                `Transactions-${Datasets.getInstance().getCurrentDatasetName()}.xlsx`);\r\n        });\r\n    }\r\n\r\n    private getGroupSortingState(category: string | undefined = this.state.groupBy): Sorting[] {\r\n        if (category === 'date')\r\n            return [{ columnName: 'date', direction: \"asc\" }]\r\n        else if (category === undefined || category === 'description')\r\n            return [{ columnName: 'id', direction: 'asc' }]\r\n        else return [{ columnName: category, direction: 'desc' }]\r\n    }\r\n\r\n}\r\n","/**\r\n * Created by TylerLiu on 2018/12/23.\r\n * \r\n * Breadcrumb made by Made by Glynn Smith on May 30, 2017\r\n */\r\nimport React, { Component } from 'react';\r\nimport { Breadcrumbs, Tooltip, Typography, Container, Drawer, List, ListItem, ListItemIcon, ListItemText } from \"@material-ui/core\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport ListIcon from \"@material-ui/icons/List\";\r\n\r\nimport { KMFormat } from \"../util\";\r\nimport DataLoader, { DataLoaderProps } from \"../models/DataLoader\";\r\nimport Datasets from '../models/Datasets';\r\nimport styles from './mystyle.module.css';\r\n\r\ninterface KeywordCrumbState {\r\n    drawer: boolean\r\n}\r\n\r\nexport default class KeywordCrumb extends Component<DataLoaderProps, KeywordCrumbState> {\r\n\r\n    constructor(props : DataLoaderProps) {\r\n        super(props)\r\n        this.state = {\r\n            drawer: false\r\n        }\r\n    }\r\n\r\n    private setYear() {\r\n        this.props.dataloader.sliceFilter(0)\r\n        this.setState({drawer: true})\r\n    }\r\n\r\n    private getColor(category: string): string {\r\n        switch (category) {\r\n            case \"fund\":\r\n                return \"#FF6F6F\" // Red\r\n            case \"division\":\r\n                return \"#FFBB7F\" // Orange\r\n            case \"department\":\r\n                return \"#A4F997\" // Green\r\n            case \"gl\":\r\n                return \"#F0B6FF\" // Blue\r\n            case \"event\":\r\n                return \"#A2B8FF\" // Purple\r\n            default:\r\n                return \"#D0D0D0\" // Gray\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.dataloader.addChangeCallback(() => this.forceUpdate())\r\n    }\r\n\r\n    render() {\r\n        const loader = this.props.dataloader\r\n        let list = loader.getFilters()\r\n        const dataset_list: string[] = Datasets.getInstance().getDatasets() || []\r\n\r\n        return (\r\n            <>\r\n            {/* <ul className={styles.breadcrumb}>\r\n                <li><a href=\"#\">Home</a></li>\r\n                    <li style={{backgroundColor: \"Blue\"}}><a href=\"#\">Vehicles</a></li>\r\n                    <li><a href=\"#\">Vans</a></li>\r\n                    <li><a href=\"#\">Camper Vans</a></li>\r\n                    <li><a href=\"#\">1989 VW Westfalia Vanagon</a></li>\r\n                </ul> */}\r\n\r\n                <Breadcrumbs separator=\">\" style={this.props.style}>\r\n                    <Typography align=\"center\">\r\n                        <Tooltip title=\"Choose new year\">\r\n                            <Link key={-1} color=\"textPrimary\"\r\n                                onClick={() => this.setYear()}>\r\n                                USAC Budget Filters: <br />\r\n                                Click to remove filters\r\n                            </Link>\r\n                        </Tooltip>\r\n                    </Typography>\r\n\r\n                    {/* Year */}\r\n                    <div style={{ backgroundColor: \"#D0D0D0\" }}>\r\n                        <Typography align=\"center\">\r\n                            <Tooltip title=\"Remove All Filters\">\r\n                                <Link key={-1} color=\"textPrimary\"\r\n                                    onClick={() => loader.sliceFilter(0)}>\r\n                                year: {Datasets.getInstance().getCurrentDatasetName()}\r\n                                    <br />\r\n                                ${KMFormat(loader.getDatasetTotal())}\r\n                                </Link>\r\n                            </Tooltip>\r\n                        </Typography>\r\n                    </div>\r\n\r\n                    {/* Breadcrumbs */}\r\n                    {list.slice(0, -1).map((filter, index) => (\r\n                        <div style={{ backgroundColor: this.getColor(filter.category) }}>\r\n                            <Typography align=\"center\">\r\n                                <Tooltip title=\"Go Back To This Filter\">\r\n                                    <Link key={index} color=\"textSecondary\" align=\"center\"\r\n                                        onClick={() => loader.sliceFilter(index + 1)}>\r\n                                        {filter.category}: {filter.name}\r\n                                        <br />\r\n                                        ${KMFormat(filter.amount)}\r\n                                    </Link>\r\n                                </Tooltip>\r\n                            </Typography>\r\n                        </div>\r\n                    ))}\r\n\r\n                    {/* Last Breadcrumb */}\r\n                    {list.length > 0 ? (<div style={{ backgroundColor: this.getColor(list[list.length - 1].category) }}>\r\n                        <Typography color=\"textPrimary\" align=\"center\" key={list.length - 1}>\r\n                            {list[list.length - 1].category}: {list[list.length - 1].name}<br />${KMFormat(list[list.length - 1].amount)}\r\n                        </Typography>\r\n                    </div>) : null}\r\n                </Breadcrumbs>\r\n                <Drawer anchor={'left'} open={this.state.drawer} onClose={() => this.setState({drawer: false})}>\r\n                    <div onClick={() => this.setState({drawer: false})}>\r\n                    <List>\r\n                        {dataset_list.map(text => (\r\n                            <ListItem button key={text} onClick={() => {\r\n                                this.setState({drawer: true})\r\n                                Datasets.getInstance().setCurrentDataset(text)\r\n                            }}>\r\n                                <ListItemIcon><ListIcon /></ListItemIcon>\r\n                                <ListItemText primary={\"Budget \" + Datasets.getDatasetTitle(text)} />\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                    </div>\r\n                </Drawer>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from \"react\";\r\nimport {Category, DataLoaderProps, WordEntry} from \"../models/DataLoader\";\r\nimport {Cell, Pie, PieChart, ResponsiveContainer, Tooltip} from 'recharts';\r\nimport {KMFormat} from \"../util\";\r\nimport { Word } from \"react-wordcloud\";\r\nimport { Filter } from \"@devexpress/dx-react-grid\";\r\n\r\ninterface CategoryPieProps extends DataLoaderProps {\r\n    category: Category\r\n    hidden?: boolean\r\n}\r\n\r\ninterface CategoryPieState {\r\n    pieDepth: number\r\n    category: Category\r\n    selectedSlices: Map<string, string>\r\n}\r\n\r\n/**\r\n * Component for a single layer pie Chart.\r\n */\r\nexport default class CategoryPie extends Component<CategoryPieProps, CategoryPieState> {\r\n\r\n    constructor(props: CategoryPieProps) {\r\n        super(props)\r\n        this.state = {\r\n            pieDepth: 0,\r\n            category: this.props.category,\r\n            selectedSlices: new Map(),\r\n        }\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.props.dataloader.addChangeCallback(() => this.forceUpdate())\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        var filters = this.props.dataloader.getFilters()\r\n        this.state.selectedSlices.forEach((value, key) => {\r\n            for (var i = 0; i < filters.length; i++) {\r\n                if (filters[i].category == key) {\r\n                    return\r\n                }\r\n            }\r\n            this.state.selectedSlices.delete(key)\r\n        })\r\n\r\n        const data = this.props.dataloader.getCategories(this.props.category)\r\n        const lastFilter = this.props.dataloader.getLastFilter()\r\n        const selected = lastFilter == null ? undefined :\r\n            (lastFilter.category === this.props.category ? lastFilter.name : undefined)\r\n\r\n        return (\r\n            <div style={{height: '80vh'}} hidden={this.props.hidden || false}>\r\n                {(this.props.hidden || false) ? null : (\r\n                    <ResponsiveContainer height=\"100%\" width=\"100%\">\r\n                        <PieChart>\r\n                            <Pie data={data} dataKey=\"value\" nameKey=\"text\"\r\n                                 onClick={(e) => this.clickSlice(e)}\r\n                                 label={(e) => this.renderCustomizedLabel(e, this.props.dataloader.getTotal())} labelLine={false}>\r\n                                {\r\n                                    data.map((entry, index) => (\r\n                                        <Cell key={`cell-${index}`} fill={this.getColor(entry)}/>\r\n                                    ))\r\n                                }\r\n                            </Pie>\r\n                            <Tooltip formatter={(value) => \"$\" + KMFormat(value as number)}\r\n                                     contentStyle={{padding: '0 5px', margin: 0, borderRadius: 5}}/>\r\n                        </PieChart>\r\n                    </ResponsiveContainer>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    private renderCustomizedLabel(entry: any, totalValue : number) {\r\n        if (entry.value < totalValue * 0.01)\r\n            return null\r\n        return(\r\n        <text x={entry.x} y={entry.y} fill=\"Black\" textAnchor={entry.x > entry.cx ? 'start' : 'end'} dominantBaseline=\"central\">\r\n            {entry.name}\r\n        </text>\r\n        )\r\n    }\r\n\r\n    private clickSlice(e : any) {\r\n        this.state.selectedSlices.set(this.props.category, e.text)\r\n        this.props.dataloader.addCategoryFilter(this.props.category, e.text)\r\n        this.props.dataloader.setPeekTable(true)\r\n    }\r\n\r\n    getColor(entry : any): string {\r\n        if(this.state.selectedSlices.has(this.props.category)) {\r\n            if(this.state.selectedSlices.get(this.props.category) == entry.text) {\r\n                switch (this.props.category) {\r\n                    case \"fund\":\r\n                        return \"#620000\" // Red\r\n                    case \"division\":\r\n                        return \"#8E4200\" // Orange\r\n                    case \"department\":\r\n                        return \"#0C5700\" // Green\r\n                    case \"event\":\r\n                        return \"#001457\" // Blue\r\n                    case \"gl\":\r\n                        return \"#48005A\" // Purple\r\n                    default:\r\n                        return \"#2F2F2F\" // Gray\r\n                }\r\n            } else {\r\n                switch (this.props.category) {\r\n                    case \"fund\":\r\n                        return \"#FFC3C3\"\r\n                    case \"division\":\r\n                        return \"#FFD9C3\"\r\n                    case \"department\":\r\n                        return \"#C3FFCD\"\r\n                    case \"gl\":\r\n                        return \"#EBC3FF\"\r\n                    case \"event\":\r\n                        return \"#C3D3FF\"\r\n                } \r\n            }\r\n        } else {\r\n            switch (this.props.category) {\r\n                case \"fund\":\r\n                    return \"Red\"\r\n                case \"division\":\r\n                    return \"Orange\"\r\n                case \"department\":\r\n                    return \"Green\"\r\n                case \"event\":\r\n                    return \"Blue\"\r\n                case \"gl\":\r\n                    return \"Purple\"\r\n                default:\r\n                    return \"Gray\"\r\n            }  \r\n        }\r\n    }\r\n}\r\n","import React, {Component} from \"react\";\r\nimport {AmountBin, DataLoaderProps} from \"../models/DataLoader\";\r\nimport {Bar, BarChart, CartesianGrid, Cell, Label, ReferenceLine, ResponsiveContainer, XAxis, YAxis} from 'recharts';\r\nimport {KMFormat} from \"../util\";\r\nimport {Mark, Slider} from \"@material-ui/core\";\r\n\r\ninterface SliderProps extends DataLoaderProps {\r\n    hidden?: boolean\r\n}\r\n\r\ninterface SliderState {\r\n    value: [number, number]\r\n    data: AmountBin[]\r\n}\r\n\r\nexport default class AmountSlider extends Component<SliderProps, SliderState> {\r\n\r\n    constructor(props: SliderProps) {\r\n        super(props);\r\n        this.state = {\r\n            value: [0, 100],\r\n            data: []\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount(): void {\r\n        this.props.dataloader.addChangeCallback(() =>\r\n            this.updateState()\r\n        )\r\n        this.updateState()\r\n    }\r\n\r\n    updateState() {\r\n        const {data, domain} = this.props.dataloader.getAmountBins(40)\r\n        this.setState({\r\n            data: data,\r\n            value: domain,\r\n        })\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const data = this.state.data\r\n        const domain: [number, number] = data.length === 0 ? [0, 1] : [data[0].low, data[data.length - 1].high]\r\n        return (\r\n            <div style={{\r\n                paddingLeft: '5%', paddingRight: `calc(5% + ${AmountSlider.getYAxisWidth()}px)`,\r\n                height: '80vh', margin: \"auto\"\r\n            }} hidden={this.props.hidden || false}>\r\n                {(this.props.hidden || false) ? null : (\r\n                    <ResponsiveContainer height=\"90%\" width=\"100%\">\r\n                        <BarChart data={data} barCategoryGap={0} margin={{bottom: 0, left: 0, right: 0}}>\r\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                            <XAxis dataKey=\"name\" domain={domain} hide orientation=\"top\"/>\r\n                            <YAxis domain={[0, 'dataMax']} tickFormatter={(v) => Math.round(v / this.props.dataloader.getTotal() * 100) + '%'}\r\n                                   width={AmountSlider.getYAxisWidth()}>\r\n                                <Label angle={270} position=\"insideLeft\" style={{textAnchor: 'middle'}}>\r\n                                    Percent of USAC Budget\r\n                                </Label>\r\n                            </YAxis>\r\n                            <ReferenceLine y={0} label=\"\" stroke=\"black\"/>\r\n                            <Bar dataKey={\"value\"} fill={this.getColor()}>\r\n                                {data.map((value, index) => (\r\n                                    <Cell key={`cell-${index}`} fill={this.getColor()}\r\n                                          opacity={this.getOpacity(value.low, value.high)}/>\r\n                                ))}\r\n                            </Bar>\r\n                        </BarChart>\r\n                    </ResponsiveContainer>\r\n                )}\r\n                <div style={{paddingLeft: AmountSlider.getYAxisWidth()}}>\r\n                    <Slider value={this.state.value}\r\n                            min={domain[0]} max={domain[1]}\r\n                            onChange={this.onRangeChange.bind(this)}\r\n                            onChangeCommitted={this.onRangeChangeCommitted.bind(this)}\r\n                            valueLabelDisplay=\"auto\"\r\n                            valueLabelFormat={(v) => '$' + KMFormat(v)}\r\n                            marks={this.getMarks(domain)}\r\n                            aria-labelledby=\"Amount-slider\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n        \r\n        \r\n        // const data = this.state.data\r\n        // const domain: [number, number] = data.length === 0 ? [0, 1] : [data[0].low, data[data.length - 1].high]\r\n        return (\r\n            <div style={{\r\n                paddingLeft: '5%', paddingRight: `calc(5% + ${AmountSlider.getYAxisWidth()}px)`,\r\n                height: '80vh', margin: \"auto\"\r\n            }} hidden={this.props.hidden || false}>\r\n                {(this.props.hidden || false) ? null : (\r\n                    <ResponsiveContainer height=\"90%\" width=\"100%\">\r\n                        <BarChart data={data} barCategoryGap={0} margin={{bottom: 0, left: 0, right: 0}}>\r\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                            <XAxis dataKey=\"name\" domain={domain} hide orientation=\"top\"/>\r\n                            <YAxis domain={[0, 'dataMax']} tickFormatter={(v) => '$' + KMFormat(v)}\r\n                                   width={AmountSlider.getYAxisWidth()}>\r\n                                <Label angle={270} position=\"insideLeft\" style={{textAnchor: 'middle'}}>\r\n                                    Expense Sum in Transaction Amount Bin($)\r\n                                </Label>\r\n                            </YAxis>\r\n                            <ReferenceLine y={0} label=\"\" stroke=\"black\"/>\r\n                            <Bar dataKey={\"value\"} fill={this.getColor()}>\r\n                                {data.map((value, index) => (\r\n                                    <Cell key={`cell-${index}`} fill={this.getColor()}\r\n                                          opacity={this.getOpacity(value.low, value.high)}/>\r\n                                ))}\r\n                            </Bar>\r\n                        </BarChart>\r\n                    </ResponsiveContainer>\r\n                )}\r\n                <div style={{paddingLeft: AmountSlider.getYAxisWidth()}}>\r\n                    <Slider value={this.state.value}\r\n                            min={domain[0]} max={domain[1]}\r\n                            onChange={this.onRangeChange.bind(this)}\r\n                            onChangeCommitted={this.onRangeChangeCommitted.bind(this)}\r\n                            valueLabelDisplay=\"auto\"\r\n                            valueLabelFormat={(v) => '$' + KMFormat(v)}\r\n                            marks={this.getMarks(domain)}\r\n                            aria-labelledby=\"Amount-slider\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    static getViewportWidth() {\r\n        return Math.max(document.documentElement.clientWidth, window.innerWidth || 0)\r\n    }\r\n\r\n    static getYAxisWidth() {\r\n        return AmountSlider.getViewportWidth() < 480 ? 0 : 72\r\n    }\r\n\r\n    onRangeChange(event: any, newValues: number | number[]) {\r\n        this.setState({value: newValues as [number, number]})\r\n    }\r\n\r\n    onRangeChangeCommitted(event: any, newValues: number | number[]) {\r\n        const nVal = newValues as [number, number]\r\n        this.props.dataloader.addAmountFilter(nVal[0], nVal[1])\r\n    }\r\n\r\n    getColor(): string {\r\n        return \"Gray\"\r\n    }\r\n\r\n    getOpacity(low: number, high: number): number {\r\n        const proportion = Math.max(0, Math.min(this.state.value[1], high) - Math.max(this.state.value[0], low)) / (high - low)\r\n        return 0.3 + 0.7 * proportion\r\n    }\r\n\r\n    getMarkPoint(x: number): Mark {\r\n        return {value: x, label: '$' + KMFormat(x)}\r\n    }\r\n\r\n    getMarks(domain: [number, number]): Mark[] {\r\n        const total_width = AmountSlider.getViewportWidth() * 0.8 - AmountSlider.getYAxisWidth()\r\n        const min_diff = 60 / total_width * (domain[1] - domain[0])\r\n        let marks: Mark[] = domain.map(e => this.getMarkPoint(e))\r\n        if (domain[0] < 0 && domain[1] > 0) {\r\n            marks = marks.filter(e => Math.abs(e.value) >= min_diff)\r\n            marks.push(this.getMarkPoint(0))\r\n        }\r\n\r\n        const step_size = Math.max((domain[1] - domain[0]) / 10, min_diff)\r\n        for (let i = 1; domain[0] + i * step_size <= domain[1] - min_diff; i++) {\r\n            const val = Number.parseFloat((domain[0] + i * step_size).toPrecision(2))\r\n            if (Math.abs(val) < 0.9 * step_size) continue\r\n            marks.push(this.getMarkPoint(val))\r\n        }\r\n\r\n        return marks\r\n    }\r\n}\r\n","import React, {Component} from \"react\";\r\nimport {DataLoaderProps, WordEntry} from \"../models/DataLoader\";\r\nimport {\r\n    Area,\r\n    AreaChart,\r\n    CartesianGrid,\r\n    Label,\r\n    ReferenceLine,\r\n    ResponsiveContainer,\r\n    Tooltip,\r\n    XAxis,\r\n    YAxis\r\n} from 'recharts';\r\nimport {KMFormat} from \"../util\";\r\nimport {Mark, Slider} from \"@material-ui/core\";\r\n\r\ninterface SliderProps extends DataLoaderProps {\r\n    hidden?: boolean\r\n}\r\n\r\ninterface SliderState {\r\n    value: [number, number]\r\n    domain: [string, string]\r\n    data: WordEntry[]\r\n}\r\n\r\nconst month_name = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\n\r\nexport default class DateSlider extends Component<SliderProps, SliderState> {\r\n\r\n    constructor(props: SliderProps) {\r\n        super(props);\r\n        this.state = {\r\n            value: [0, 1],\r\n            domain: ['0000-01', '9999-12'],\r\n            data: []\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount(): void {\r\n        this.props.dataloader.addChangeCallback(() =>\r\n            this.updateState()\r\n        )\r\n        this.updateState()\r\n    }\r\n\r\n    updateState() {\r\n        const {data, domain} = this.props.dataloader.getMonthBins()\r\n        const names = data.map(e => e.text)\r\n        this.setState({\r\n            data: data,\r\n            value: [names.indexOf(domain[0]) + 0.5, names.indexOf(domain[1]) + 0.5],\r\n        })\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const data = this.state.data\r\n        return (\r\n            <div style={{\r\n                paddingLeft: '5%', paddingRight: `calc(5% + ${DateSlider.getYAxisWidth()}px)`,\r\n                height: '80vh', margin: \"auto\"\r\n            }} hidden={this.props.hidden || false}>\r\n                {(this.props.hidden || false) ? null : (\r\n                    <ResponsiveContainer height=\"90%\" width=\"100%\">\r\n                        <AreaChart data={data} barCategoryGap={0} margin={{bottom: 0, left: 0, right: 0}}>\r\n                            <defs>\r\n                                <linearGradient id=\"fillGrad\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                    <stop offset=\"5%\" stopColor={this.getColor()} stopOpacity={0.9}/>\r\n                                    <stop offset=\"95%\" stopColor={this.getColor()} stopOpacity={0.3}/>\r\n                                </linearGradient>\r\n                                <linearGradient id=\"fillGrad2\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\">\r\n                                    <stop offset={this.getLeftPoint() - 0.01} stopColor={this.getColor()}\r\n                                          stopOpacity={0.2}/>\r\n                                    <stop offset={this.getLeftPoint() + 0.01} stopColor={this.getColor()}\r\n                                          stopOpacity={0.6}/>\r\n                                    <stop offset={this.getRightPoint() - 0.01} stopColor={this.getColor()}\r\n                                          stopOpacity={0.6}/>\r\n                                    <stop offset={this.getRightPoint() + 0.01} stopColor={this.getColor()}\r\n                                          stopOpacity={0.2}/>\r\n                                </linearGradient>\r\n                            </defs>\r\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                            <XAxis dataKey=\"text\" hide orientation=\"top\" scale=\"band\"/>\r\n                            <YAxis tickFormatter={(v) => '$' + KMFormat(v)} width={DateSlider.getYAxisWidth()}>\r\n                                <Label angle={270} position=\"insideLeft\" style={{textAnchor: 'middle'}}>\r\n                                    Monthly Expense($)\r\n                                </Label>\r\n                            </YAxis>\r\n                            <Tooltip formatter={(value) => \"$\" + KMFormat(value as number)}\r\n                                     contentStyle={{display: 'none'}}/>\r\n                            <ReferenceLine y={0} label=\"\" stroke=\"black\"/>\r\n                            <Area type=\"monotone\" dataKey=\"value\" stroke={this.getColor()} fillOpacity={1}\r\n                                  fill=\"url(#fillGrad2)\"/>\r\n                        </AreaChart>\r\n                    </ResponsiveContainer>\r\n                )}\r\n                <div style={{paddingLeft: DateSlider.getYAxisWidth()}}>\r\n                    <Slider value={this.state.value}\r\n                            min={0} max={this.state.data.length}\r\n                            onChange={this.onRangeChange.bind(this)}\r\n                            onChangeCommitted={this.onRangeChangeCommitted.bind(this)}\r\n                            valueLabelDisplay=\"off\"\r\n                            marks={this.getMarks(this.state.data)}\r\n                            step={null}\r\n                            aria-labelledby=\"Date-slider\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    static getViewportWidth() {\r\n        return Math.max(document.documentElement.clientWidth, window.innerWidth || 0)\r\n    }\r\n\r\n    static getYAxisWidth() {\r\n        return this.getViewportWidth() < 480 ? 0 : 72\r\n    }\r\n\r\n    onRangeChange(event: any, newValues: number | number[]) {\r\n        this.setState({value: newValues as [number, number]})\r\n    }\r\n\r\n    onRangeChangeCommitted(event: any, newValues: number | number[]) {\r\n        const nVal = (newValues as [number, number]).map(e => Math.round(e - 0.5))\r\n        const data = this.state.data\r\n        this.props.dataloader.addMonthFilter(data[nVal[0]].text, data[nVal[1]].text)\r\n    }\r\n\r\n    getColor(): string {\r\n        return \"Gray\"\r\n    }\r\n\r\n    getOpacity(index: number): number {\r\n        index += 0.5\r\n        return this.state.value[0] <= index && index <= this.state.value[1] ? 1 : 0.3\r\n    }\r\n\r\n    getLeftPoint(): number {\r\n        return (this.state.value[0] - 1) / (this.state.data.length - 1)\r\n    }\r\n\r\n    getRightPoint(): number {\r\n        return (this.state.value[1]) / (this.state.data.length - 1)\r\n    }\r\n\r\n    getMarks(data: WordEntry[]): Mark[] {\r\n        let marks = data.map((e, i) => ({value: i + 0.5, label: e.text}))\r\n        let years: Set<String> = new Set<String>();\r\n        marks.forEach((e, i) => {\r\n            const d = e.label.split('-')\r\n            if (years.has(d[0])) marks[i].label = month_name[Number.parseInt(d[1]) - 1]\r\n            else {\r\n                years.add(d[0])\r\n                marks[i].label = month_name[Number.parseInt(d[1]) - 1] + ` ${d[0]}`;\r\n            }\r\n        })\r\n        return marks\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport {Category} from \"../models/DataLoader\";\r\n\r\nexport interface ExpProps {\r\n    category: Category | 'date' | 'amount' | 'keyword' | 'table' | 'footer';\r\n}\r\n\r\nexport default function ExplanationText(props: ExpProps) {\r\n\r\n    switch (props.category) {\r\n        case 'date':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    Date transaction entered. (purchases occur beforehand)\r\n                </Typography>\r\n            )\r\n        case 'fund':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    Source of money (includes student fees and other income)\r\n                </Typography>\r\n            )\r\n        case 'division':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    Allocates money to departments.\r\n                </Typography>\r\n            )\r\n        case 'department':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    Spends money (includes student groups)\r\n                </Typography>\r\n            )\r\n        case 'gl':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    Rules for how each $ can be spent.\r\n                </Typography>\r\n            )\r\n        case 'event':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    Occasion/reason for transaction. ( generic label is “Commission/Dept related”)\r\n                </Typography>\r\n            )\r\n        case 'keyword':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    Spender documents where money is spent.\r\n                    Accountant abreviates. Wordcloud deabreviates.\r\n                    Font size of word represents total $ for all descriptions that include word.\r\n                </Typography>\r\n            )\r\n        case 'amount':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    Size of each transaction. (may include several purchases)\r\n                </Typography>\r\n            )\r\n        case 'table':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    Above is the raw transaction table of the Undergraduate Student Association.\r\n                    Click on a column to visualize it.\r\n                    <br/>\r\n                    Low on time? Most important is the descriptions column. Everything else is administrative.\r\n                </Typography>\r\n            )\r\n        case 'footer':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    We had to de-abbreviate them, but sometimes did that incorrectly,\r\n                    so please comment at the bottom of the page if you see that.\r\n                    <br/>\r\n                    These abbreviations had to be autocorrected so they can be categorized in the visual.\r\n                    If autocorrect groups transactions incorrectly, please comment at the bottom of the page.\r\n                </Typography>\r\n            )\r\n        default:\r\n            return <div/>\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport WordCloud from \"./WordCloud\";\r\nimport RecordTable from \"./RecordTable\";\r\nimport KeywordCrumb from \"./KeywordCrumb\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport DataLoader, {Category, isOfTypeCategory} from \"../models/DataLoader\";\r\nimport CategoryPie from \"./CategoryPie\";\r\nimport {Container, Tab, Tabs, withStyles, Typography, Button, Link} from \"@material-ui/core\";\r\nimport AmountSlider from \"./AmountSlider\";\r\nimport QueryBuilder from \"../models/QueryBuilder\";\r\nimport DateSlider from \"./DateSlider\";\r\nimport ExplanationText from \"./ExplanationText\";\r\nimport ContactSupportIcon from \"@material-ui/icons/ContactSupport\";\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\n\r\nexport type TabTypes = Category | 'table' | 'keyword' | \"amount\" | \"date\";\r\n\r\ninterface DatasetState {\r\n    value: TabTypes;\r\n}\r\n\r\ninterface DatasetProps {\r\n    loader: DataLoader\r\n}\r\n\r\nexport function isOfTypeTabs (input: string): input is TabTypes {\r\n    return isOfTypeCategory(input) || ['table' , 'keyword' , \"amount\" , \"date\"].includes(input);\r\n}\r\n\r\ninterface StyledTabProps{\r\n    label?: React.ReactNode;\r\n    value?: any;\r\n}\r\n\r\nconst NarrowTab = withStyles((theme) => ({\r\n    root: {\r\n        minWidth: 72,\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n    selected: {},\r\n}))((props:StyledTabProps) => <Tab {...props} />);\r\n\r\nexport default class DatasetView extends React.Component<DatasetProps, DatasetState> {\r\n    private value: TabTypes = 'keyword'\r\n\r\n    constructor(props: DatasetProps) {\r\n        super(props);\r\n\r\n        this.value = 'keyword'\r\n        // this.parseQuery(QueryBuilder.getInstance().getQuery())\r\n\r\n        this.state = {\r\n            value: this.value,\r\n        }\r\n\r\n        QueryBuilder.getInstance().addGenerator(this.generateQuery.bind(this), 1)\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.props.loader.addChangeCallback(() => this.forceUpdate())\r\n    }\r\n\r\n    parseQuery(query: string): TabTypes {\r\n        if (query[0] === '?') query = query.slice(1)\r\n        const res = query.split('&').filter((e) => e.startsWith('tab='))\r\n        if (res.length === 0) return 'table'\r\n        let s = res[0].substr(4)\r\n        if (isOfTypeTabs(s)) {\r\n            return s\r\n        } else return 'table'\r\n    }\r\n\r\n    generateQuery(): string {\r\n        return 'tab=' + this.value\r\n    }\r\n\r\n    onTabChange(value: string) {\r\n        this.value = isOfTypeTabs(value) ? value : 'table'\r\n        this.setState({value: this.value})\r\n        QueryBuilder.getInstance().update()\r\n    }\r\n\r\n    private copyURL() {\r\n        const selBox = document.createElement('textarea');\r\n        selBox.style.position = 'fixed';\r\n        selBox.style.left = '0';\r\n        selBox.style.top = '0';\r\n        selBox.style.opacity = '0';\r\n        selBox.value = window.location.href;\r\n        document.body.appendChild(selBox);\r\n        selBox.focus();\r\n        selBox.select();\r\n        document.execCommand('copy');\r\n        document.body.removeChild(selBox);\r\n        alert('Link Copied to Clipboard! (filters saved)');\r\n    }\r\n\r\n    render() {\r\n        const loader = this.props.loader\r\n        return (\r\n            <>\r\n                <KeywordCrumb dataloader={loader}/>\r\n                <RecordTable dataloader={loader} onChange={this.onTabChange.bind(this)} style={{\r\n                    zIndex: 2,\r\n                    backgroundColor: \"lightblue\",\r\n                }}/>\r\n                <Paper elevation={2} style={{\r\n                    position: \"absolute\",\r\n                    zIndex: -1,\r\n                    bottom: 0,\r\n                    width: 1230\r\n                }}>\r\n                    <ExplanationText category={this.state.value}/>\r\n                    <WordCloud hidden={this.state.value !== 'keyword'} dataloader={loader}/>\r\n                    <CategoryPie hidden={!isOfTypeCategory(this.state.value)}\r\n                                category={isOfTypeCategory(this.state.value) ? this.state.value : \"fund\"} dataloader={loader}/>\r\n                    <AmountSlider hidden={this.state.value !== \"amount\"} dataloader={loader}/>\r\n                    <DateSlider hidden={this.state.value !== 'date'} dataloader={loader}/>\r\n                    <Link color=\"textSecondary\" href=\"https://forms.google.com\" style={{padding: 20}}>\r\n                        <ContactSupportIcon/> Comments\r\n                    </Link>\r\n                    <Link color=\"textSecondary\" href=\"mailto:vtran@asucla.ucla.edu\" style={{padding: 20}}>\r\n                        <EmailIcon/> Professional Accountant\r\n                    </Link>\r\n                    <Link color=\"textSecondary\" href=\"mailto:usacouncil@asucla.ucla.edu\" style={{padding: 20}}>\r\n                        <EmailIcon/> USAC Council\r\n                    </Link>\r\n                    <Button color=\"inherit\" onClick={this.copyURL} aria-label=\"share\">\r\n                        Share\r\n                    </Button>\r\n                </Paper>\r\n            </>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TopBar from \"./components/TopBar\";\r\nimport DatasetView from \"./components/DatasetView\"\r\nimport DataLoader from \"./models/DataLoader\";\r\nimport Datasets from \"./models/Datasets\";\r\nimport {Container, CssBaseline, Link, Paper, Typography, List, ListItem, ListItemText} from \"@material-ui/core\";\r\nimport ContactSupportIcon from '@material-ui/icons/ContactSupport';\r\nimport Footer from \"./components/Footer\";\r\nimport RecordTable from './components/RecordTable';\r\nimport YearSelect from './components/YearSelect';\r\n\r\ninterface AppState {\r\n    loader: DataLoader,\r\n    yearSelected: Boolean\r\n}\r\n\r\nclass App extends React.Component<{}, AppState> {\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = {\r\n            loader: Datasets.getInstance().getDataLoader(),\r\n            yearSelected: false\r\n        }\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        Datasets.getInstance().addChangeCallback(() => {\r\n            this.setState({\r\n                loader: Datasets.getInstance().getDataLoader()\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <CssBaseline />\r\n                <Container maxWidth=\"lg\">\r\n                    <DatasetView loader={this.state.loader} />\r\n                </Container>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport $ from 'jquery';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\ndocument.body.style.zoom = \"78%\"\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
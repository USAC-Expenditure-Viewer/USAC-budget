{"version":3,"sources":["models/QueryBuilder.ts","util.ts","models/DataLoader.ts","models/Datasets.ts","components/Instructions.tsx","components/TopBar.tsx","components/WordCloud.tsx","components/RecordTable.tsx","components/KeywordCrumb.tsx","components/CategoryPie.tsx","components/AmountSlider.tsx","components/DateSlider.tsx","components/ExplanationText.tsx","components/DatasetView.tsx","components/Footer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["QueryBuilder","queryString","generators","Map","this","window","location","search","replace","instance","callback","index","set","query","values","map","c","join","path","href","includes","substr","indexOf","history","pushState","KMFormat","x","Number","isNaN","suffix","Math","abs","toPrecision","KMFToNum","str","unit","parseFloat","isOfTypeCategory","input","DataLoader","dataset","data","filters","dataChangeCallbacks","total_amount","setDataset","sliceFilter","loadDataset","Papa","pathname","download","header","complete","results","e","date","Date","amount","words","__parsed_extra","filter","onLoad","reduce","prev","curr","parseQuery","getInstance","getQuery","addGenerator","generateQueryString","bind","listChangeCallback","slice","callbacks","split","forEach","entry","sign_location","q","v","addKeywordFilter","addCategoryFilter","atob","valuesa","addAmountFilter","valuesd","addMonthFilter","console","log","category","name","btoa","update","push","length","words_set","getRecords","row","w","get","chosen_words","words_list","entries","word","val","text","value","sort","a","b","records","getLastFilter","category_set","cate_name","category_list","numBin","domain","previousValue","currentValue","min","max","MAX_VALUE","MIN_VALUE","allMin","allMax","bins","bin_size","i","low","high","month_string","getFullYear","padStart","getMonth","localeCompare","month_num","s","parseInt","next_month","remaining_length","word_index","new_index","Datasets","datasets","currentDataset","dataLoader","ready","parseDataset","getQueryString","fetch","then","res","json","getDatasetTitle","startsWith","match","toString","InstructionBackProp","props","Backdrop","style","zIndex","color","Paper","backgroundColor","width","height","Typography","variant","alignItems","padding","borderRadius","margin","TopBar","state","drawer","backdropOn","addChangeCallback","forceUpdate","selBox","document","createElement","position","left","top","opacity","body","appendChild","focus","select","execCommand","removeChild","alert","toggleDrawer","setState","toggleBackdrop","dataset_list","getDatasets","AppBar","Toolbar","Tooltip","title","IconButton","edge","aria-label","onClick","flexGrow","getCurrentDatasetName","Button","copyURL","open","Drawer","anchor","onClose","List","ListItem","button","key","setCurrentDataset","ListItemIcon","ListItemText","primary","React","Component","WordCloud","getWordTooltip","onWordClick","getCallback","onWordMouseOut","onWordMouseOver","options","fontFamily","fontSizes","fontStyle","fontWeight","scale","deterministic","rotations","rotationAngles","transitionDuration","dataloader","setWords","hidden","getWordList","event","isActive","target","on","transition","attr","month_name","CurrencyFormatter","toLocaleString","currency","DateFormatter","toDateString","DateGroupFormatter","column","year","month","RecordTable","TableHeaderCell","Cell","setHighlight","selectedColumn","summaryItems","columnName","type","columns","tableColumnExtension","wordWrapEnabled","groupSummaryItems","showInGroupFooter","alignByColumn","groupExtension","showWhenGrouped","groupingColumnExtensions","criteria","dateToYearMonth","columnWidth","exporter","groupWeight","integratedSortingColumnExtensions","createRef","sortingState","direction","groupBy","undefined","dataHeight","buildGroupWeightTable","clear","getCategories","compare","prevProps","prevState","snapshot","getGroupSortingState","rows","id","elevation","onMouseEnter","onMouseLeave","sorting","grouping","totalItems","groupItems","columnExtensions","for","formatterComponent","defaultHiddenColumnNames","cellComponent","contentComponent","showSortingControls","emptyMessageComponent","startExport","current","exportGrid","ref","onSave","workbook","sorts","setSorting","isOfTypeTabs","onChange","xlsx","writeBuffer","buffer","saveAs","Blob","KeywordCrumb","list","getFilters","Breadcrumbs","separator","Link","getDatasetTotal","CategoryPie","lastFilter","selected","dataKey","nameKey","labelLine","fill","getColor","formatter","contentStyle","AmountSlider","updateState","getAmountBins","paddingLeft","paddingRight","getYAxisWidth","barCategoryGap","bottom","right","strokeDasharray","hide","orientation","tickFormatter","angle","textAnchor","y","label","stroke","getOpacity","Slider","onRangeChange","onChangeCommitted","onRangeChangeCommitted","valueLabelDisplay","valueLabelFormat","marks","getMarks","aria-labelledby","newValues","nVal","min_diff","getViewportWidth","getMarkPoint","step_size","documentElement","clientWidth","innerWidth","DateSlider","getMonthBins","names","x1","y1","x2","y2","offset","stopColor","stopOpacity","getLeftPoint","getRightPoint","display","fillOpacity","step","round","years","Set","d","has","add","ExplanationText","withStyles","theme","root","minWidth","typography","fontWeightRegular","Tab","DatasetView","generateQuery","loader","onTabChange","Footer","App","getDataLoader","CssBaseline","Container","maxWidth","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4be6c604.chunk.js","sourcesContent":["export default class QueryBuilder {\r\n\r\n    private static instance: QueryBuilder | null = null\r\n    private queryString: string\r\n    private generators: Map<number, () => string> = new Map()\r\n\r\n    static getInstance() {\r\n        if (this.instance === null) this.instance = new QueryBuilder()\r\n        return this.instance\r\n    }\r\n\r\n\r\n    private constructor() {\r\n        this.queryString = window.location.search.replace('?', '')\r\n    }\r\n\r\n    getQuery() {\r\n        return this.queryString\r\n    }\r\n\r\n    addGenerator(callback: () => string, index: number) {\r\n        this.generators.set(index, callback)\r\n    }\r\n\r\n    update() {\r\n        let strings: string[] = [...this.generators.values()].map((c) => c())\r\n        const query = strings.join('&')\r\n\r\n        let path = window.location.href\r\n        if (path.includes('?')) path = path.substr(0, path.indexOf('?'))\r\n        window.history.pushState({path: path + '?' + query}, '', path + '?' + query);\r\n    }\r\n}\r\n","export function commaFormat(x: number): string {\r\n    if (Number.isNaN(x)) return \"\"\r\n    let x_str: string = x.toFixed(2)\r\n    let parts: string[] = x_str.split(\".\")\r\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n    return parts.join(\".\");\r\n}\r\n\r\nexport function KMFormat(x: number): string {\r\n    if (Number.isNaN(x)) return \"\"\r\n    let suffix = \"\";\r\n    if (Math.abs(x) >= 1000000000) {\r\n        suffix = \"B\"\r\n        x /= 1000000000;\r\n    } else if (Math.abs(x) >= 1000000) {\r\n        suffix = \"M\"\r\n        x /= 1000000;\r\n    } else if (Math.abs(x) >= 1000) {\r\n        suffix = \"K\"\r\n        x /= 1000;\r\n    }\r\n    return x.toPrecision(3) + suffix;\r\n}\r\n\r\nexport function KMFToNum(str: string): number {\r\n    let unit = 1\r\n    if (str.includes('K')) {\r\n        unit = 1000\r\n        str = str.replace('K', '')\r\n    }\r\n    if (str.includes('M')) {\r\n        unit = 1000000\r\n        str = str.replace('M', '')\r\n    }\r\n    if (str.includes('B')) {\r\n        str = str.replace('B', '')\r\n        unit = 1000000000\r\n    }\r\n    return Number.parseFloat(str) * unit\r\n}\r\n","import {KMFormat, KMFToNum} from \"../util\";\r\nimport * as Papa from 'papaparse';\r\nimport QueryBuilder from \"./QueryBuilder\";\r\n\r\ninterface DataEntry {\r\n    date: Date,\r\n    fund: string,\r\n    division: string,\r\n    department: string,\r\n    gl: string,\r\n    event: string,\r\n    description: string,\r\n    amount: number,\r\n    words: string[],\r\n    id?: number\r\n}\r\n\r\nexport interface AmountBin {\r\n    low: number\r\n    high: number\r\n    value: number\r\n    name: string\r\n}\r\n\r\nexport type Category = 'fund' | 'division' | 'department' | 'gl' | 'event'\r\nexport function isOfTypeCategory (input: string): input is Category {\r\n    return ['fund', 'division', 'department', 'gl', 'event'].includes(input);\r\n}\r\n\r\nexport interface WordEntry {\r\n    text: string,\r\n    value: number\r\n}\r\n\r\ninterface Filter {\r\n    category: string,\r\n    name: string,\r\n    index: DataEntry[],\r\n    amount: number,\r\n}\r\n\r\nexport interface DataLoaderProps {\r\n    dataloader: DataLoader,\r\n    style?: Object,\r\n}\r\n\r\nexport default class DataLoader {\r\n\r\n    private data: DataEntry[] = []\r\n    private filters: Filter[] = []\r\n    private dataChangeCallbacks: (() => void)[] = []\r\n    private total_amount: number = 0\r\n\r\n    constructor(dataset: string | null) {\r\n        this.setDataset(dataset)\r\n    }\r\n\r\n    setDataset(dataset: string | null) {\r\n        this.sliceFilter(0)\r\n        this.loadDataset(dataset)\r\n    }\r\n\r\n    private loadDataset(dataset: string | null) {\r\n        if (dataset === null) return\r\n        Papa.parse(window.location.pathname + \"/expense_summary_\" + dataset + \".csv\",\r\n            {\r\n                download: true,\r\n                header: true,\r\n                complete: (results) => {\r\n                    this.data = results.data.map((e) => {\r\n                        e.date = new Date(Number.parseFloat(e.date) * 1000)\r\n                        e.amount = Number.parseFloat(e.amount)\r\n                        e.words = e.__parsed_extra || []\r\n                        return e\r\n                    }).filter(e => !Number.isNaN(e.amount))\r\n\r\n                    this.onLoad()\r\n                }\r\n            })\r\n    }\r\n\r\n    private onLoad() {\r\n        this.total_amount = this.data.reduce((prev, curr) => prev + curr.amount, 0)\r\n        this.parseQuery(QueryBuilder.getInstance().getQuery())\r\n        QueryBuilder.getInstance().addGenerator(this.generateQueryString.bind(this), 2)\r\n        this.listChangeCallback()\r\n    }\r\n\r\n    private parseQuery(query: string) {\r\n        if (query[0] === '?') query = query.slice(1)\r\n        const callbacks = this.dataChangeCallbacks\r\n        this.dataChangeCallbacks = []\r\n        try {\r\n            query.split('&').forEach(entry => {\r\n                if (!entry.includes('=')) return\r\n                const sign_location = entry.indexOf('=')\r\n                const q = entry.substr(0, sign_location)\r\n                const v = entry.substr(sign_location + 1)\r\n                switch (q) {\r\n                    case 'keyword':\r\n                        this.addKeywordFilter(v)\r\n                        break\r\n                    case 'fund':\r\n                    case 'division':\r\n                    case 'department':\r\n                    case 'gl':\r\n                    case 'event':\r\n                        this.addCategoryFilter(q, atob(v))\r\n                        break\r\n                    case 'amount':\r\n                        if (!v.includes('..')) return\r\n                        const valuesa = v.split('..').map(e => KMFToNum(e))\r\n                        this.addAmountFilter(valuesa[0], valuesa[1])\r\n                        break\r\n                    case 'date':\r\n                        if (!v.includes('..')) return\r\n                        const valuesd = v.split('..')\r\n                        this.addMonthFilter(valuesd[0], valuesd[1])\r\n                        break\r\n                }\r\n            })\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n        this.dataChangeCallbacks = callbacks\r\n    }\r\n\r\n    private generateQueryString() {\r\n        const strings = this.filters.map((curr) => {\r\n            switch (curr.category) {\r\n                case 'keyword':\r\n                    return 'keyword=' + curr.name\r\n                case 'amount':\r\n                    return 'amount=' + curr.name.replace('~', '..')\r\n                case 'date':\r\n                    return 'date=' + curr.name.replace('~', '..')\r\n                default:\r\n                    return curr.category + '=' + btoa(curr.name)\r\n            }\r\n        })\r\n        return strings.join('&')\r\n    }\r\n\r\n    private listChangeCallback() {\r\n        this.dataChangeCallbacks.forEach(c => c())\r\n        QueryBuilder.getInstance().update()\r\n    }\r\n\r\n    addChangeCallback(callback: () => void) {\r\n        this.dataChangeCallbacks.push(callback)\r\n    }\r\n\r\n    getRecords(): DataEntry[] {\r\n        if (this.data.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        if (this.filters.length === 0) {\r\n            return this.data\r\n        }\r\n\r\n        return this.filters[this.filters.length - 1].index\r\n    }\r\n\r\n    getWordList(): WordEntry[] {\r\n        if (this.data.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        let words_set = new Map<string, number>()\r\n        this.getRecords().forEach(row => {\r\n            row.words.forEach(w => {\r\n                words_set.set(w, (words_set.get(w) || 0) + row.amount);\r\n            })\r\n        })\r\n\r\n        const chosen_words = this.filters.filter(e => e.category === 'keyword').map(e => e.name)\r\n\r\n        let words_list: WordEntry[] = []\r\n        for (let [word, val] of words_set.entries()) {\r\n            if (!chosen_words.includes(word))\r\n                words_list.push({text: word, value: val})\r\n        }\r\n\r\n        words_list.sort((a, b) => b.value - a.value)\r\n\r\n        return words_list\r\n    }\r\n\r\n    getCategories(category: Category): WordEntry[] {\r\n        if (this.data.length === 0) {\r\n            return [];\r\n        }\r\n\r\n        let records: DataEntry[];\r\n        if (this.getLastFilter()?.category === category) {\r\n            records = this.filters.length >= 2 ? this.filters[this.filters.length - 2].index : this.data\r\n        } else {\r\n            records = this.getRecords()\r\n        }\r\n\r\n        let category_set = new Map<string, number>()\r\n        records.forEach(row => {\r\n            const cate_name = row[category]\r\n            category_set.set(cate_name, (category_set.get(cate_name) || 0) + row.amount);\r\n        })\r\n\r\n        let category_list: WordEntry[] = []\r\n        for (let [word, val] of category_set.entries()) {\r\n            category_list.push({text: word, value: val})\r\n        }\r\n\r\n        category_list.sort((a, b) => a.value - b.value)\r\n\r\n        return category_list\r\n    }\r\n\r\n    getAmountBins(numBin: number): { data: AmountBin[], domain: [number, number] } {\r\n        if (this.data.length === 0) {\r\n            return {data: [], domain: [0, 1]}\r\n        }\r\n\r\n        let records: DataEntry[];\r\n        let domain: [number, number] | null = null;\r\n        if (this.filters.length !== 0 && this.filters[this.filters.length - 1].category === 'amount') {\r\n            records = this.filters.length >= 2 ? this.filters[this.filters.length - 2].index : this.data\r\n            const values = this.filters[this.filters.length - 1].name.split('~').map(e => KMFToNum(e))\r\n            domain = values as [number, number]\r\n        } else {\r\n            records = this.getRecords()\r\n        }\r\n        let [allMin, allMax] = records.reduce(((previousValue, currentValue) =>\r\n            [Math.min(previousValue[0], currentValue.amount),\r\n                Math.max(previousValue[1], currentValue.amount)]), [Number.MAX_VALUE, Number.MIN_VALUE])\r\n\r\n        if (domain === null) domain = [allMin, allMax]\r\n        allMax += 0.001\r\n\r\n        let bins: AmountBin[] = []\r\n        let bin_size = (allMax - allMin) / numBin\r\n        for (let i = 0; i < numBin; i++) {\r\n            bins.push({\r\n                low: allMin + i * bin_size, high: allMin + (i + 1) * bin_size,\r\n                value: 0, name: KMFormat(allMin + (i + 0.5) * bin_size)\r\n            })\r\n        }\r\n\r\n        records.forEach((e) => {\r\n            bins.forEach((b) => {\r\n                if (b.low <= e.amount && e.amount < b.high)\r\n                    b.value += e.amount\r\n            })\r\n        })\r\n\r\n        return {data: bins, domain: domain}\r\n    }\r\n\r\n    getMonthBins(): { data: WordEntry[], domain: [string, string] } {\r\n        if (this.data.length === 0) {\r\n            return {data: [{text: '0000-01', value: 0}], domain: ['0000-01', '0000-01']}\r\n        }\r\n\r\n        let records: DataEntry[];\r\n        let domain: [string, string] | null = null;\r\n        if (this.filters.length !== 0 && this.filters[this.filters.length - 1].category === 'date') {\r\n            records = this.filters.length >= 2 ? this.filters[this.filters.length - 2].index : this.data\r\n            const values = this.filters[this.filters.length - 1].name.split('~')\r\n            domain = values as [string, string]\r\n        } else {\r\n            records = this.getRecords()\r\n        }\r\n        let [allMin, allMax] = records.reduce((previousValue, currentValue) => {\r\n            const month_string = (currentValue.date.getFullYear() + \"\").padStart(4, '0') + '-' + ((currentValue.date.getMonth() + 1) + \"\").padStart(2, \"0\")\r\n            return [previousValue[0].localeCompare(month_string) < 0 ? previousValue[0] : month_string,\r\n                previousValue[1].localeCompare(month_string) > 0 ? previousValue[1] : month_string]\r\n        }, ['9999-99', '0000-00'])\r\n\r\n        if (domain === null) domain = [allMin, allMax]\r\n\r\n        let bins: Map<string, number> = new Map()\r\n        records.forEach((e) => {\r\n            const month_string = (e.date.getFullYear() + \"\").padStart(4, \"0\") + '-' + ((e.date.getMonth() + 1) + \"\").padStart(2, \"0\")\r\n            bins.set(month_string, (bins.get(month_string) || 0) + e.amount)\r\n        })\r\n\r\n        let data: WordEntry[] = [...bins.entries()].map((e) => ({text: e[0], value: e[1]}))\r\n            .sort((a, b) => (a.text.localeCompare(b.text)))\r\n\r\n        while (data.length !== 0 && data.length < 12) {\r\n            let month_num = data[data.length - 1].text.split('-').map((s) => Number.parseInt(s))\r\n            if (month_num[1] !== 12) month_num[1]++\r\n            else month_num = [month_num[0] + 1, 1]\r\n            let next_month = (month_num[0] + \"\").padStart(4, \"0\") + '-' + (month_num[1] + \"\").padStart(2, \"0\")\r\n            data.push({text: next_month, value: 0})\r\n        }\r\n\r\n        return {data: data, domain: domain}\r\n    }\r\n\r\n    getTotal(): number {\r\n        if (this.filters.length === 0) {\r\n            return this.total_amount\r\n        }\r\n        return this.filters[this.filters.length - 1].amount\r\n    }\r\n\r\n    getDatasetTotal(): number {\r\n        return this.total_amount\r\n    }\r\n\r\n    getFilters() {\r\n        return this.filters\r\n    }\r\n\r\n    getLastFilter() {\r\n        if (this.filters.length === 0)\r\n            return null;\r\n        else return this.filters[this.filters.length - 1]\r\n    }\r\n\r\n    sliceFilter(remaining_length: number) {\r\n        this.filters = this.filters.slice(0, remaining_length)\r\n        this.listChangeCallback()\r\n    }\r\n\r\n    addKeywordFilter(word: string) {\r\n        if (this.data.length === 0) return\r\n        if (this.filters.reduce((prev, curr) => prev || (curr.category === 'keyword' && curr.name === word), false))\r\n            return\r\n\r\n        let word_index: DataEntry[]\r\n        if (this.filters.length !== 0) {\r\n            const last_index = this.filters[this.filters.length - 1].index\r\n            word_index = last_index.filter((e) => e.words.includes(word))\r\n        } else {\r\n            word_index = this.data.filter(e => e.words.includes(word))\r\n        }\r\n\r\n        this.filters.push({\r\n            category: 'keyword',\r\n            name: word,\r\n            index: word_index,\r\n            amount: word_index\r\n                .reduce((prev, curr) => prev + curr.amount, 0)\r\n        })\r\n\r\n        this.listChangeCallback()\r\n    }\r\n\r\n    addCategoryFilter(category: Category, value: string) {\r\n        if (this.data.length === 0) return\r\n        if (this.filters.reduce((prev, curr) => prev || (curr.category === category && curr.name === value), false))\r\n            return\r\n\r\n        if (this.getLastFilter()?.category === category) {\r\n            this.filters = this.filters.slice(0, -1)\r\n        }\r\n\r\n        let new_index: DataEntry[]\r\n        if (this.filters.length !== 0) {\r\n            const last_index = this.filters[this.filters.length - 1].index\r\n            // @ts-ignore\r\n            new_index = last_index.filter((e) => (e[category] === value))\r\n        } else {\r\n            // @ts-ignore\r\n            new_index = this.data.filter(e => (e[category] === value))\r\n        }\r\n\r\n        this.filters.push({\r\n            category: category,\r\n            name: value,\r\n            index: new_index,\r\n            amount: new_index.reduce((prev, curr) => prev + curr.amount, 0)\r\n        })\r\n\r\n        this.listChangeCallback()\r\n    }\r\n\r\n    addAmountFilter(low: number, high: number) {\r\n        if (this.data.length === 0) return\r\n\r\n        if (this.filters.length > 0 && this.filters[this.filters.length - 1].category === 'amount') {\r\n            this.filters = this.filters.slice(0, -1)\r\n        }\r\n        const last_index = this.filters.length > 0 ? this.filters[this.filters.length - 1].index : this.data\r\n        const new_index = last_index\r\n            .filter((e) => (low <= e.amount && e.amount <= high))\r\n\r\n        this.filters.push({\r\n            category: 'amount',\r\n            name: KMFormat(low) + \"~\" + KMFormat(high),\r\n            index: new_index,\r\n            amount: new_index\r\n                .reduce((prev, curr) => prev + curr.amount, 0)\r\n        })\r\n\r\n        this.listChangeCallback()\r\n    }\r\n\r\n    addMonthFilter(low: string, high: string) {\r\n        if (this.data.length === 0) return\r\n\r\n        if (this.filters.length > 0 && this.filters[this.filters.length - 1].category === 'date') {\r\n            this.filters = this.filters.slice(0, -1)\r\n        }\r\n        const last_index = this.filters.length > 0 ? this.filters[this.filters.length - 1].index : this.data\r\n        const new_index = last_index\r\n            .filter((e) => {\r\n                const month_string = (e.date.getFullYear() + \"\").padStart(4, '0') + '-' + ((e.date.getMonth() + 1) + \"\").padStart(2, '0')\r\n                return low.localeCompare(month_string) <= 0 && month_string.localeCompare(high) <= 0\r\n            })\r\n\r\n        this.filters.push({\r\n            category: 'date',\r\n            name: low + \"~\" + high,\r\n            index: new_index,\r\n            amount: new_index\r\n                .reduce((prev, curr) => prev + curr.amount, 0)\r\n        })\r\n\r\n        this.listChangeCallback()\r\n    }\r\n}\r\n","import QueryBuilder from \"./QueryBuilder\";\r\nimport DataLoader from \"./DataLoader\";\r\n\r\nexport default class Datasets {\r\n\r\n    private static instance: Datasets | null = null\r\n    private datasets: string[] = []\r\n    private currentDataset: string | null = null\r\n    private callbacks: (() => void)[] = []\r\n    private dataLoader: DataLoader\r\n    private ready: boolean = false\r\n\r\n    static getInstance() {\r\n        if (this.instance === null) this.instance = new Datasets()\r\n        return this.instance\r\n    }\r\n\r\n\r\n    private constructor() {\r\n        this.parseDataset(QueryBuilder.getInstance().getQuery())\r\n        this.dataLoader = new DataLoader(this.currentDataset)\r\n        QueryBuilder.getInstance().addGenerator(this.getQueryString.bind(this), 0)\r\n        fetch(window.location.pathname + \"/datasets.json\")\r\n            .then(res => res.json())\r\n            .then((res) => {\r\n                this.datasets = res\r\n                this.ready = true\r\n                if (this.currentDataset === null) this.currentDataset = this.datasets[0]\r\n                this.dataLoader.setDataset(this.currentDataset)\r\n                this.callbacks.forEach(c => c())\r\n            })\r\n    }\r\n\r\n    addChangeCallback(callback: () => void) {\r\n        this.callbacks.push(callback)\r\n    }\r\n\r\n    getCurrentDataset() {\r\n        if (this.currentDataset != null) return this.currentDataset\r\n        return undefined\r\n    }\r\n\r\n    getCurrentDatasetName() {\r\n        if (this.currentDataset != null) return Datasets.getDatasetTitle(this.currentDataset)\r\n        return undefined\r\n    }\r\n\r\n    getDatasets() {\r\n        if (this.ready) return this.datasets\r\n        return undefined\r\n    }\r\n\r\n    getDatasetNames() {\r\n        if (this.ready) return this.datasets.map(Datasets.getDatasetTitle)\r\n        return undefined\r\n    }\r\n\r\n    getDataLoader() {\r\n        return this.dataLoader\r\n    }\r\n\r\n    setCurrentDataset(name: string) {\r\n        this.currentDataset = name\r\n        QueryBuilder.getInstance().update()\r\n        this.dataLoader.setDataset(name)\r\n        this.callbacks.forEach(c => c())\r\n    }\r\n\r\n    private parseDataset(query: string) {\r\n        if (query[0] === '?') query = query.slice(1)\r\n        const res = query.split('&').filter((e) => e.startsWith('d='))\r\n        if (res.length !== 0)\r\n            this.currentDataset = res[0].substr(2)\r\n    }\r\n\r\n    private getQueryString(): string {\r\n        if (this.currentDataset === null) return \"\"\r\n        return 'd=' + this.currentDataset\r\n    }\r\n\r\n    static getDatasetTitle(name: string): string {\r\n        if (name.match(/^\\d*$/)) {\r\n            const year = Number.parseInt(name)\r\n            return name + '-' + (year + 1).toString()\r\n        } else return name\r\n    }\r\n}\r\n","import {Backdrop, BackdropProps, Paper, Typography} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\"\r\nimport 'fontsource-roboto';\r\n\r\nexport default function InstructionBackProp(props: BackdropProps) {\r\n    return (\r\n        <Backdrop style={{zIndex: 10, color: '#fff'}}{...props}>\r\n            <Paper style={{backgroundColor: \"white\", width: \"80%\", height: \"80%\"}}>\r\n            <Typography variant=\"h3\">Budget Viewer</Typography>\r\n            <hr/>\r\n            <p>This is a viewer/analyzer for Expense of Undergraduate Student Association. </p>\r\n            <Typography variant=\"h4\">Usage</Typography>\r\n            <ul>\r\n                <li style={{alignItems: \"center\"}}>Click on <MenuIcon style={{color: \"#fff\", backgroundColor: \"#3f51b5\", padding: 6, borderRadius: 3, margin: 3}} />\r\n                on top right to select the data year.</li>\r\n            </ul>\r\n            </Paper>\r\n        </Backdrop>\r\n    )\r\n}\r\n","import {\r\n    AppBar, Button,\r\n    Drawer,\r\n    IconButton,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    Toolbar, Tooltip,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ListIcon from \"@material-ui/icons/List\";\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\nimport React from \"react\";\r\nimport Datasets from \"../models/Datasets\";\r\nimport InstructionBackProp from \"./Instructions\";\r\n\r\ninterface BarState {\r\n    drawer: boolean\r\n    backdropOn: boolean\r\n}\r\n\r\nexport default class TopBar extends React.Component<{}, BarState> {\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            drawer: false,\r\n            backdropOn: false\r\n        }\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        Datasets.getInstance().addChangeCallback(() => this.forceUpdate())\r\n    }\r\n\r\n    copyURL() {\r\n        const selBox = document.createElement('textarea');\r\n        selBox.style.position = 'fixed';\r\n        selBox.style.left = '0';\r\n        selBox.style.top = '0';\r\n        selBox.style.opacity = '0';\r\n        selBox.value = window.location.href;\r\n        document.body.appendChild(selBox);\r\n        selBox.focus();\r\n        selBox.select();\r\n        document.execCommand('copy');\r\n        document.body.removeChild(selBox);\r\n        alert('Link copied to clipboard!');\r\n    }\r\n\r\n    render() {\r\n        const toggleDrawer = (state: boolean) => () => this.setState({drawer: state})\r\n        const toggleBackdrop = (state: boolean) => () => this.setState({backdropOn: state})\r\n        const dataset_list: string[] = Datasets.getInstance().getDatasets() || []\r\n        return (\r\n            <AppBar position=\"sticky\">\r\n                <Toolbar>\r\n                    <Tooltip title=\"Select Dataset\">\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"dataset menu\" onClick={toggleDrawer(true)}>\r\n                            <MenuIcon/>\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Typography variant=\"h6\" style={{flexGrow: 1}}>\r\n                        {\"UCLA USA Expense \" + Datasets.getInstance().getCurrentDatasetName()}\r\n                    </Typography>\r\n                    <Button color=\"inherit\" onClick={this.copyURL} aria-label=\"share\">\r\n                        Share\r\n                    </Button>\r\n                    <Button color=\"inherit\" onClick={toggleBackdrop(true)} aria-label=\"help\">\r\n                        <HelpOutlineIcon />\r\n                    </Button>\r\n                    <InstructionBackProp open={this.state.backdropOn} onClick={toggleBackdrop(false)}/>\r\n                </Toolbar>\r\n                <Drawer anchor={'left'} open={this.state.drawer} onClose={toggleDrawer(false)}>\r\n                    <div onClick={toggleDrawer(false)}>\r\n                        <List>\r\n                            {dataset_list.map(text => (\r\n                                <ListItem button key={text} onClick={() => {\r\n                                    toggleDrawer(false)\r\n                                    Datasets.getInstance().setCurrentDataset(text)\r\n                                }}>\r\n                                    <ListItemIcon><ListIcon/></ListItemIcon>\r\n                                    <ListItemText primary={\"Budget \" + Datasets.getDatasetTitle(text)}/>\r\n                                </ListItem>\r\n                            ))}\r\n                        </List>\r\n                    </div>\r\n                </Drawer>\r\n            </AppBar>\r\n        )\r\n    }\r\n}\r\n","/**\r\n * Created by TylerLiu on 2020/04/23.\r\n */\r\nimport 'd3-transition';\r\nimport {select} from 'd3-selection';\r\nimport React, {Component} from 'react';\r\nimport ReactWordcloud, {Callbacks, OptionsProp, Word} from \"react-wordcloud\";\r\nimport {KMFormat} from \"../util\";\r\nimport {DataLoaderProps} from \"../models/DataLoader\";\r\n\r\ninterface WordCloudProps extends DataLoaderProps {\r\n    hidden?: boolean\r\n}\r\n\r\nexport default class WordCloud extends Component<WordCloudProps> {\r\n    private callbacks: Callbacks = {\r\n        getWordTooltip: (word: Word) => `${word.text} has $${KMFormat(word.value)} in the category.`,\r\n        onWordClick: this.getCallback('onWordClick').bind(this),\r\n        onWordMouseOut: this.getCallback('onWordMouseOut').bind(this),\r\n        onWordMouseOver: this.getCallback('onWordMouseOver').bind(this),\r\n    };\r\n\r\n    private options: OptionsProp = {\r\n        fontFamily: 'impact',\r\n        fontSizes: [12, 60],\r\n        fontStyle: 'normal',\r\n        fontWeight: 'normal',\r\n        scale: 'log',\r\n        //spiral: 'archimedean',\r\n        deterministic: true,\r\n\r\n        rotations: 4,\r\n        rotationAngles: [-45, 90],\r\n\r\n        transitionDuration: 200,\r\n    }\r\n\r\n    constructor(props: DataLoaderProps) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            words: [{text: 'Loading...', value: 100}]\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.dataloader.addChangeCallback(this.setWords.bind(this))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{height: '80vh'}} hidden={this.props.hidden}>\r\n                {(this.props.hidden || false) ? null : (\r\n                    <ReactWordcloud callbacks={this.callbacks} words={this.props.dataloader.getWordList().slice(0, 80)}\r\n                                    options={this.options}/>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    getCallback(callback: string) {\r\n        return (word: Word, event: MouseEvent | undefined) => {\r\n            const isActive = callback !== 'onWordMouseOut';\r\n            // @ts-ignore\r\n            const text = select(event.target);\r\n            text\r\n                .on('click', (() => {\r\n                    if (isActive) {\r\n                        this.props.dataloader.addKeywordFilter(word.text);\r\n                    }\r\n                }))\r\n                .transition()\r\n                .attr('background', 'white')\r\n                .attr('text-decoration', isActive ? 'underline' : 'none');\r\n        };\r\n    }\r\n\r\n    setWords() {\r\n        this.forceUpdate()\r\n    }\r\n}\r\n","/**\r\n * Created by TylerLiu on 2018/12/23.\r\n */\r\nimport React, {Component} from 'react';\r\nimport {\r\n    Grid,\r\n    VirtualTable,\r\n    TableHeaderRow,\r\n    TableSummaryRow,\r\n    ExportPanel,\r\n    TableColumnVisibility, Toolbar, TableGroupRow, GroupingPanel, SearchPanel, TableColumnResizing\r\n} from \"@devexpress/dx-react-grid-material-ui\";\r\nimport {Category, DataLoaderProps, isOfTypeCategory} from \"../models/DataLoader\";\r\nimport {\r\n    Column, GroupingState, GroupSummaryItem, IntegratedFiltering, IntegratedGrouping,\r\n    IntegratedSorting,\r\n    IntegratedSummary, SearchState,\r\n    Sorting,\r\n    SortingState, SummaryItem,\r\n    SummaryState, TableColumnWidthInfo, TableGroupRow as TableGroupRowBase\r\n} from \"@devexpress/dx-react-grid\";\r\nimport {Paper} from \"@material-ui/core\";\r\nimport {DataTypeProvider} from \"@devexpress/dx-react-grid\";\r\nimport {GridExporter} from \"@devexpress/dx-react-grid-export\";\r\nimport {saveAs} from \"file-saver\";\r\nimport Datasets from \"../models/Datasets\";\r\nimport {Workbook} from \"exceljs\";\r\nimport {isOfTypeTabs, TabTypes} from \"./DatasetView\";\r\n\r\nconst month_name = ['January', 'February', 'March', 'April', 'May', 'June',\r\n    'July', 'August', 'September', 'October', 'November', 'December']\r\n\r\nconst CurrencyFormatter = ({value}: {value: number}) => (\r\n    <span style={{ color: 'blue'}}>\r\n        {value.toLocaleString('en-US', { style: 'currency', currency: 'USD' })}\r\n    </span>\r\n);\r\n\r\nconst DateFormatter = ({ value }: {value: Date}) => (\r\n    <span>{value.toDateString()}</span>\r\n);\r\n\r\nconst DateGroupFormatter = ({ column, row }: TableGroupRowBase.ContentProps) => {\r\n    if (column.name === 'date') {\r\n        row.key.toString()\r\n        const [year, month] = row.key.toString().split('-');\r\n        return <span><strong>Date:</strong> {month_name[Number.parseInt(month) - 1]} {year}</span>\r\n    } else return (\r\n        <span><strong>{column.title}:</strong> {row.value}</span>\r\n    )\r\n};\r\n\r\nconst dateToYearMonth = (value: Date) =>\r\n    value.getFullYear().toString().padStart(4, '0') + '-' + (value.getMonth() + 1).toString().padStart(2, '0')\r\n\r\ninterface RecordTableState {\r\n    sortingState: Sorting[]\r\n    groupBy: Category | \"date\" | undefined\r\n    dataHeight: number\r\n    selectedColumn: string\r\n}\r\n\r\ninterface RecordTableProps extends DataLoaderProps{\r\n    hidden?: boolean | undefined;\r\n    onChange: (a: TabTypes) => void;\r\n}\r\n\r\nexport default class RecordTable extends Component<RecordTableProps, RecordTableState> {\r\n\r\n    private TableHeaderCell = (props: TableHeaderRow.CellProps) => (\r\n        <TableHeaderRow.Cell\r\n            {...props}\r\n            onClick={() => this.setHighlight(props.column)}\r\n            style={props.column.name === this.state.selectedColumn ? {backgroundColor: \"#376cf2\"} : {backgroundColor: \"#fcfcfc\"}}\r\n        />\r\n    );\r\n\r\n    private readonly summaryItems: SummaryItem[] = [\r\n        { columnName: 'date', type: 'count' },\r\n        { columnName: 'amount', type: 'sum'},\r\n    ]\r\n\r\n    private readonly columns: Column[] = [\r\n        {title: 'Row', name: 'id'},\r\n        {title: 'Posted Date', name: 'date'},\r\n        {title: 'Description', name: 'description'},\r\n        {title: 'Amount', name: 'amount'},\r\n        {title: 'Fund', name: 'fund'},\r\n        {title: 'Division', name: 'division'},\r\n        {title: 'Department', name: 'department'},\r\n        {title: 'Event', name: 'event'},\r\n        {title: 'GL', name: 'gl'},\r\n    ]\r\n\r\n    private readonly tableColumnExtension: VirtualTable.ColumnExtension[] = [\r\n        {columnName: 'id',          wordWrapEnabled:true},\r\n        {columnName: 'date',        wordWrapEnabled:true},\r\n        {columnName: 'department',  wordWrapEnabled:true},\r\n        {columnName: 'fund',        wordWrapEnabled:true},\r\n        {columnName: 'division',    wordWrapEnabled:true},\r\n        {columnName: 'event',       wordWrapEnabled:true},\r\n        {columnName: 'gl',          wordWrapEnabled:true},\r\n        {columnName: 'description', wordWrapEnabled:true},\r\n        {columnName: 'amount',      wordWrapEnabled:true},\r\n    ]\r\n\r\n    private readonly groupSummaryItems: GroupSummaryItem[] = [\r\n        { columnName: 'amount', type: 'sum', showInGroupFooter: false, alignByColumn: true},\r\n        { columnName: 'amount', type: 'sum', showInGroupFooter: true},\r\n        { columnName: 'date', type: 'count', showInGroupFooter: true},\r\n    ]\r\n\r\n    private readonly groupExtension: TableGroupRow.ColumnExtension[] = [\r\n        {columnName: 'id',          showWhenGrouped:true},\r\n        {columnName: 'date',        showWhenGrouped:true},\r\n        {columnName: 'department',  showWhenGrouped:true},\r\n        {columnName: 'fund',        showWhenGrouped:true},\r\n        {columnName: 'division',    showWhenGrouped:true},\r\n        {columnName: 'event',       showWhenGrouped:true},\r\n        {columnName: 'gl',          showWhenGrouped:true},\r\n        {columnName: 'description', showWhenGrouped:true},\r\n        {columnName: 'amount',      showWhenGrouped:true},\r\n    ]\r\n\r\n    private groupingColumnExtensions: IntegratedGrouping.ColumnExtension[] = [\r\n        {columnName: 'date', criteria: (value) => {\r\n            if (value instanceof Date) {\r\n                const key = dateToYearMonth(value)\r\n                return {key: key}\r\n            } else return {key: \"\"};\r\n        }}\r\n    ]\r\n\r\n    private columnWidth: TableColumnWidthInfo[] = [\r\n        {columnName: 'id',          width: 70},\r\n        {columnName: 'date',        width: 150},\r\n        {columnName: 'fund',        width: 150},\r\n        {columnName: 'division',    width: 150},\r\n        {columnName: 'department',  width: 150},\r\n        {columnName: 'event',       width: 150},\r\n        {columnName: 'gl',          width: 150},\r\n        {columnName: 'description', width: 350},\r\n        {columnName: 'amount',      width: 150},\r\n    ]\r\n\r\n    private readonly exporter: React.RefObject<{exportGrid: (options?: object) => void}>\r\n\r\n    private groupWeight: Map<string, number>\r\n\r\n    private integratedSortingColumnExtensions: IntegratedSorting.ColumnExtension[] = []\r\n\r\n    constructor(props: RecordTableProps) {\r\n        super(props);\r\n        this.exporter = React.createRef()\r\n\r\n        this.state = {\r\n            sortingState: [{columnName: 'id', direction: 'asc'}],\r\n            groupBy: undefined,\r\n            dataHeight: 500,\r\n            selectedColumn: ''\r\n        }\r\n\r\n        this.groupWeight = new Map<string, number>()\r\n        if (this.state.groupBy !== undefined && this.state.groupBy !== 'date') {\r\n            this.buildGroupWeightTable()\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.dataloader.addChangeCallback(() => {\r\n            this.buildGroupWeightTable();\r\n            this.forceUpdate()\r\n        })\r\n    }\r\n\r\n    private buildGroupWeightTable() {\r\n        if (this.state.groupBy !== undefined && this.state.groupBy !== 'date') {\r\n            this.groupWeight.clear()\r\n            this.props.dataloader.getCategories(this.state.groupBy).forEach(entry => {\r\n                this.groupWeight.set(entry.text, entry.value)\r\n            })\r\n\r\n            this.integratedSortingColumnExtensions = [\r\n                { columnName: this.state.groupBy,\r\n                    compare: (a, b) => (this.groupWeight?.get(a)||0) - (this.groupWeight?.get(b)||0)\r\n                },\r\n            ]\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<RecordTableProps>, prevState: Readonly<RecordTableState>, snapshot?: any): void {\r\n        if (this.state.groupBy != prevState.groupBy) {\r\n            this.buildGroupWeightTable()\r\n            console.log(this.state.groupBy);\r\n            this.setState({\r\n                sortingState: this.getGroupSortingState(),\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const rows = this.props.dataloader.getRecords().map((e, i) => {e.id = i; return e})\r\n        if (this.props.hidden === true)\r\n            return <Paper/>\r\n        else return (\r\n            <Paper \r\n                elevation={0}\r\n                onMouseEnter={() => this.setState({dataHeight: 500})}\r\n                onMouseLeave={() => this.setState({dataHeight: 110})}\r\n            >\r\n                <Grid rows={rows} columns={this.columns}>\r\n                    <SortingState\r\n                        sorting={this.state.sortingState}\r\n                    />\r\n                    <GroupingState\r\n                        grouping={this.state.groupBy !== undefined ? [{columnName: this.state.groupBy}]:[]}\r\n                    />\r\n                    <SearchState/>\r\n                    <SummaryState totalItems={this.summaryItems} groupItems={this.groupSummaryItems}/>\r\n\r\n                    <IntegratedGrouping columnExtensions={this.groupingColumnExtensions}/>\r\n                    <IntegratedFiltering />\r\n                    <IntegratedSorting columnExtensions={this.integratedSortingColumnExtensions}/>\r\n                    <IntegratedSummary />\r\n\r\n                    <DataTypeProvider for={['amount']} formatterComponent={CurrencyFormatter} />\r\n                    <DataTypeProvider for={['date']} formatterComponent={DateFormatter} />\r\n\r\n                    <VirtualTable columnExtensions={this.tableColumnExtension} height={this.state.dataHeight}/>\r\n                    {/* <TableColumnResizing\r\n                        defaultColumnWidths={this.columnWidth}\r\n                    /> */}\r\n                    <TableColumnVisibility\r\n                        defaultHiddenColumnNames={['id']}\r\n                    />\r\n                    <TableHeaderRow cellComponent={this.TableHeaderCell}/>\r\n                    <TableGroupRow\r\n                        contentComponent={DateGroupFormatter}\r\n                        columnExtensions={this.groupExtension}\r\n                        />\r\n                    <TableSummaryRow />\r\n\r\n                    <Toolbar />\r\n                    <GroupingPanel showSortingControls emptyMessageComponent={() => <span/>}/>\r\n                    <SearchPanel />\r\n                    <ExportPanel startExport={(options) => this.exporter.current?.exportGrid(options)} />\r\n                </Grid>\r\n                <GridExporter\r\n                    ref={this.exporter}\r\n                    columns={this.columns}\r\n                    rows={rows}\r\n                    onSave={(workbook) => this.onSave(workbook)}\r\n                />\r\n            </Paper>\r\n        )\r\n    }\r\n\r\n    private setHighlight(sorts: Column) {\r\n        this.setState({\r\n            selectedColumn: sorts.name\r\n        })\r\n        this.setSorting(sorts)\r\n    }\r\n\r\n    private setSorting(sorts: Column) {\r\n        if (isOfTypeTabs(sorts.name)) {\r\n            this.props.onChange(sorts.name);\r\n        } else if (sorts.name == 'description') {\r\n            this.props.onChange('keyword');\r\n        }\r\n    }\r\n\r\n    private onSave(workbook: Workbook){\r\n        workbook.xlsx.writeBuffer().then((buffer) => {\r\n            saveAs(new Blob([buffer], { type: 'application/octet-stream' }),\r\n                `Transactions-${Datasets.getInstance().getCurrentDatasetName()}.xlsx` );\r\n        });\r\n    }\r\n\r\n    private getGroupSortingState(category: string | undefined = this.state.groupBy): Sorting[] {\r\n        if (category === 'date')\r\n            return [{columnName: 'date', direction: \"asc\"}]\r\n        else if (category === undefined || category === 'description')\r\n            return [{columnName: 'id', direction: 'asc'}]\r\n        else return [{columnName: category, direction: 'desc'}]\r\n    }\r\n\r\n}\r\n","/**\r\n * Created by TylerLiu on 2018/12/23.\r\n */\r\nimport React, {Component} from 'react';\r\nimport {Breadcrumbs, Tooltip, Typography} from \"@material-ui/core\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport {KMFormat} from \"../util\";\r\nimport {DataLoaderProps} from \"../models/DataLoader\";\r\n\r\nexport default class KeywordCrumb extends Component<DataLoaderProps> {\r\n\r\n    componentDidMount() {\r\n        this.props.dataloader.addChangeCallback(() => this.forceUpdate())\r\n    }\r\n\r\n    render() {\r\n        let list = this.props.dataloader.getFilters()\r\n        return (\r\n            <Breadcrumbs separator=\">\" style={this.props.style}>\r\n                <Typography>Fliters Applied:</Typography>\r\n                <Tooltip title=\"Remove All Filters\">\r\n                    <Link key={-1} color=\"textPrimary\"\r\n                        onClick={() => this.props.dataloader.sliceFilter(0)}>Expenses [${KMFormat(this.props.dataloader.getDatasetTotal())}]</Link>\r\n                </Tooltip>\r\n                {list.slice(0, -1).map((filter, index) => (\r\n                    <Tooltip title=\"View This Filter\">\r\n                        <Link key={index} color=\"textSecondary\"\r\n                              onClick={() => this.props.dataloader.sliceFilter(index + 1)}>{filter.category}: {filter.name} [${KMFormat(filter.amount)}]</Link>\r\n                    </Tooltip>\r\n                ))}\r\n                {list.length > 0 ? (<Typography color=\"textPrimary\"\r\n                                                key={list.length}>{list[list.length - 1].category}: {list[list.length - 1].name} [${KMFormat(list[list.length - 1].amount)}]</Typography>) : null}\r\n            </Breadcrumbs>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from \"react\";\r\nimport {Category, DataLoaderProps} from \"../models/DataLoader\";\r\nimport {Cell, Pie, PieChart, ResponsiveContainer, Tooltip} from 'recharts';\r\nimport {KMFormat} from \"../util\";\r\n\r\ninterface CategoryPieProps extends DataLoaderProps {\r\n    category: Category\r\n    hidden?: boolean\r\n}\r\n\r\n/**\r\n * Component for a single layer pie Chart.\r\n */\r\nexport default class CategoryPie extends Component<CategoryPieProps> {\r\n\r\n    componentDidMount(): void {\r\n        this.props.dataloader.addChangeCallback(() => this.forceUpdate())\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const data = this.props.dataloader.getCategories(this.props.category)\r\n        const lastFilter = this.props.dataloader.getLastFilter()\r\n        const selected = lastFilter == null ? undefined :\r\n            (lastFilter.category === this.props.category ? lastFilter.name : undefined)\r\n\r\n        return (\r\n            <div style={{height: '80vh'}} hidden={this.props.hidden || false}>\r\n                {(this.props.hidden || false) ? null : (\r\n                    <ResponsiveContainer height=\"100%\" width=\"100%\">\r\n                        <PieChart>\r\n                            <Pie data={data} dataKey=\"value\" nameKey=\"text\"\r\n                                 labelLine={false}\r\n                                 onClick={(e) => this.props.dataloader.addCategoryFilter(this.props.category, e.text)}>\r\n                                {\r\n                                    data.map((entry, index) => (\r\n                                        <Cell key={`cell-${index}`} fill={this.getColor(selected === entry.text)}/>\r\n                                    ))\r\n                                }\r\n                            </Pie>\r\n                            <Tooltip formatter={(value) => \"$\" + KMFormat(value as number)}\r\n                                     contentStyle={{padding: '0 5px', margin: 0, borderRadius: 5}}/>\r\n                        </PieChart>\r\n                    </ResponsiveContainer>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    getColor(selected: boolean): string {\r\n        if (selected)\r\n            return \"#f44336\"\r\n        switch (this.props.category) {\r\n            case \"fund\":\r\n                return \"#8bc34a\"\r\n            case \"division\":\r\n                return \"#ab47bc\"\r\n            case \"department\":\r\n                return \"#26c6da\"\r\n            case \"gl\":\r\n                return \"#26a69a\"\r\n            case \"event\":\r\n                return \"#ef6c00\"\r\n        }\r\n    }\r\n}\r\n","import React, {Component} from \"react\";\r\nimport {AmountBin, DataLoaderProps} from \"../models/DataLoader\";\r\nimport {Bar, BarChart, CartesianGrid, Cell, Label, ReferenceLine, ResponsiveContainer, XAxis, YAxis} from 'recharts';\r\nimport {KMFormat} from \"../util\";\r\nimport {Mark, Slider} from \"@material-ui/core\";\r\n\r\ninterface SliderProps extends DataLoaderProps {\r\n    hidden?: boolean\r\n}\r\n\r\ninterface SliderState {\r\n    value: [number, number]\r\n    data: AmountBin[]\r\n}\r\n\r\nexport default class AmountSlider extends Component<SliderProps, SliderState> {\r\n\r\n    constructor(props: SliderProps) {\r\n        super(props);\r\n        this.state = {\r\n            value: [0, 100],\r\n            data: []\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount(): void {\r\n        this.props.dataloader.addChangeCallback(() =>\r\n            this.updateState()\r\n        )\r\n        this.updateState()\r\n    }\r\n\r\n    updateState() {\r\n        const {data, domain} = this.props.dataloader.getAmountBins(40)\r\n        this.setState({\r\n            data: data,\r\n            value: domain,\r\n        })\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const data = this.state.data\r\n        const domain: [number, number] = data.length === 0 ? [0, 1] : [data[0].low, data[data.length - 1].high]\r\n        return (\r\n            <div style={{\r\n                paddingLeft: '5%', paddingRight: `calc(5% + ${AmountSlider.getYAxisWidth()}px)`,\r\n                height: '80vh', margin: \"auto\"\r\n            }} hidden={this.props.hidden || false}>\r\n                {(this.props.hidden || false) ? null : (\r\n                    <ResponsiveContainer height=\"90%\" width=\"100%\">\r\n                        <BarChart data={data} barCategoryGap={0} margin={{bottom: 0, left: 0, right: 0}}>\r\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                            <XAxis dataKey=\"name\" domain={domain} hide orientation=\"top\"/>\r\n                            <YAxis domain={[0, 'dataMax']} tickFormatter={(v) => '$' + KMFormat(v)}\r\n                                   width={AmountSlider.getYAxisWidth()}>\r\n                                <Label angle={270} position=\"insideLeft\" style={{textAnchor: 'middle'}}>\r\n                                    Expense Sum in Transaction Amount Bin($)\r\n                                </Label>\r\n                            </YAxis>\r\n                            <ReferenceLine y={0} label=\"\" stroke=\"black\"/>\r\n                            <Bar dataKey={\"value\"} fill={this.getColor()}>\r\n                                {data.map((value, index) => (\r\n                                    <Cell key={`cell-${index}`} fill={this.getColor()}\r\n                                          opacity={this.getOpacity(value.low, value.high)}/>\r\n                                ))}\r\n                            </Bar>\r\n                        </BarChart>\r\n                    </ResponsiveContainer>\r\n                )}\r\n                <div style={{paddingLeft: AmountSlider.getYAxisWidth()}}>\r\n                    <Slider value={this.state.value}\r\n                            min={domain[0]} max={domain[1]}\r\n                            onChange={this.onRangeChange.bind(this)}\r\n                            onChangeCommitted={this.onRangeChangeCommitted.bind(this)}\r\n                            valueLabelDisplay=\"auto\"\r\n                            valueLabelFormat={(v) => '$' + KMFormat(v)}\r\n                            marks={this.getMarks(domain)}\r\n                            aria-labelledby=\"Amount-slider\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    static getViewportWidth() {\r\n        return Math.max(document.documentElement.clientWidth, window.innerWidth || 0)\r\n    }\r\n\r\n    static getYAxisWidth() {\r\n        return AmountSlider.getViewportWidth() < 480 ? 0 : 72\r\n    }\r\n\r\n    onRangeChange(event: any, newValues: number | number[]) {\r\n        this.setState({value: newValues as [number, number]})\r\n    }\r\n\r\n    onRangeChangeCommitted(event: any, newValues: number | number[]) {\r\n        const nVal = newValues as [number, number]\r\n        this.props.dataloader.addAmountFilter(nVal[0], nVal[1])\r\n    }\r\n\r\n    getColor(): string {\r\n        return \"#29b6f6\"\r\n    }\r\n\r\n    getOpacity(low: number, high: number): number {\r\n        const proportion = Math.max(0, Math.min(this.state.value[1], high) - Math.max(this.state.value[0], low)) / (high - low)\r\n        return 0.3 + 0.7 * proportion\r\n    }\r\n\r\n    getMarkPoint(x: number): Mark {\r\n        return {value: x, label: '$' + KMFormat(x)}\r\n    }\r\n\r\n    getMarks(domain: [number, number]): Mark[] {\r\n        const total_width = AmountSlider.getViewportWidth() * 0.8 - AmountSlider.getYAxisWidth()\r\n        const min_diff = 60 / total_width * (domain[1] - domain[0])\r\n        let marks: Mark[] = domain.map(e => this.getMarkPoint(e))\r\n        if (domain[0] < 0 && domain[1] > 0) {\r\n            marks = marks.filter(e => Math.abs(e.value) >= min_diff)\r\n            marks.push(this.getMarkPoint(0))\r\n        }\r\n\r\n        const step_size = Math.max((domain[1] - domain[0]) / 10, min_diff)\r\n        for (let i = 1; domain[0] + i * step_size <= domain[1] - min_diff; i++) {\r\n            const val = Number.parseFloat((domain[0] + i * step_size).toPrecision(2))\r\n            if (Math.abs(val) < 0.9 * step_size) continue\r\n            marks.push(this.getMarkPoint(val))\r\n        }\r\n\r\n        return marks\r\n    }\r\n}\r\n","import React, {Component} from \"react\";\r\nimport {DataLoaderProps, WordEntry} from \"../models/DataLoader\";\r\nimport {\r\n    Area,\r\n    AreaChart,\r\n    CartesianGrid,\r\n    Label,\r\n    ReferenceLine,\r\n    ResponsiveContainer,\r\n    Tooltip,\r\n    XAxis,\r\n    YAxis\r\n} from 'recharts';\r\nimport {KMFormat} from \"../util\";\r\nimport {Mark, Slider} from \"@material-ui/core\";\r\n\r\ninterface SliderProps extends DataLoaderProps {\r\n    hidden?: boolean\r\n}\r\n\r\ninterface SliderState {\r\n    value: [number, number]\r\n    domain: [string, string]\r\n    data: WordEntry[]\r\n}\r\n\r\nconst month_name = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\n\r\nexport default class DateSlider extends Component<SliderProps, SliderState> {\r\n\r\n    constructor(props: SliderProps) {\r\n        super(props);\r\n        this.state = {\r\n            value: [0, 1],\r\n            domain: ['0000-01', '9999-12'],\r\n            data: []\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount(): void {\r\n        this.props.dataloader.addChangeCallback(() =>\r\n            this.updateState()\r\n        )\r\n        this.updateState()\r\n    }\r\n\r\n    updateState() {\r\n        const {data, domain} = this.props.dataloader.getMonthBins()\r\n        const names = data.map(e => e.text)\r\n        this.setState({\r\n            data: data,\r\n            value: [names.indexOf(domain[0]) + 0.5, names.indexOf(domain[1]) + 0.5],\r\n        })\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const data = this.state.data\r\n        return (\r\n            <div style={{\r\n                paddingLeft: '5%', paddingRight: `calc(5% + ${DateSlider.getYAxisWidth()}px)`,\r\n                height: '80vh', margin: \"auto\"\r\n            }} hidden={this.props.hidden || false}>\r\n                {(this.props.hidden || false) ? null : (\r\n                    <ResponsiveContainer height=\"90%\" width=\"100%\">\r\n                        <AreaChart data={data} barCategoryGap={0} margin={{bottom: 0, left: 0, right: 0}}>\r\n                            <defs>\r\n                                <linearGradient id=\"fillGrad\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                    <stop offset=\"5%\" stopColor={this.getColor()} stopOpacity={0.9}/>\r\n                                    <stop offset=\"95%\" stopColor={this.getColor()} stopOpacity={0.3}/>\r\n                                </linearGradient>\r\n                                <linearGradient id=\"fillGrad2\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\">\r\n                                    <stop offset={this.getLeftPoint() - 0.01} stopColor={this.getColor()}\r\n                                          stopOpacity={0.2}/>\r\n                                    <stop offset={this.getLeftPoint() + 0.01} stopColor={this.getColor()}\r\n                                          stopOpacity={0.6}/>\r\n                                    <stop offset={this.getRightPoint() - 0.01} stopColor={this.getColor()}\r\n                                          stopOpacity={0.6}/>\r\n                                    <stop offset={this.getRightPoint() + 0.01} stopColor={this.getColor()}\r\n                                          stopOpacity={0.2}/>\r\n                                </linearGradient>\r\n                            </defs>\r\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                            <XAxis dataKey=\"text\" hide orientation=\"top\" scale=\"band\"/>\r\n                            <YAxis tickFormatter={(v) => '$' + KMFormat(v)} width={DateSlider.getYAxisWidth()}>\r\n                                <Label angle={270} position=\"insideLeft\" style={{textAnchor: 'middle'}}>\r\n                                    Monthly Expense($)\r\n                                </Label>\r\n                            </YAxis>\r\n                            <Tooltip formatter={(value) => \"$\" + KMFormat(value as number)}\r\n                                     contentStyle={{display: 'none'}}/>\r\n                            <ReferenceLine y={0} label=\"\" stroke=\"black\"/>\r\n                            <Area type=\"monotone\" dataKey=\"value\" stroke={this.getColor()} fillOpacity={1}\r\n                                  fill=\"url(#fillGrad2)\"/>\r\n                        </AreaChart>\r\n                    </ResponsiveContainer>\r\n                )}\r\n                <div style={{paddingLeft: DateSlider.getYAxisWidth()}}>\r\n                    <Slider value={this.state.value}\r\n                            min={0} max={this.state.data.length}\r\n                            onChange={this.onRangeChange.bind(this)}\r\n                            onChangeCommitted={this.onRangeChangeCommitted.bind(this)}\r\n                            valueLabelDisplay=\"off\"\r\n                            marks={this.getMarks(this.state.data)}\r\n                            step={null}\r\n                            aria-labelledby=\"Date-slider\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    static getViewportWidth() {\r\n        return Math.max(document.documentElement.clientWidth, window.innerWidth || 0)\r\n    }\r\n\r\n    static getYAxisWidth() {\r\n        return this.getViewportWidth() < 480 ? 0 : 72\r\n    }\r\n\r\n    onRangeChange(event: any, newValues: number | number[]) {\r\n        this.setState({value: newValues as [number, number]})\r\n    }\r\n\r\n    onRangeChangeCommitted(event: any, newValues: number | number[]) {\r\n        const nVal = (newValues as [number, number]).map(e => Math.round(e - 0.5))\r\n        const data = this.state.data\r\n        this.props.dataloader.addMonthFilter(data[nVal[0]].text, data[nVal[1]].text)\r\n    }\r\n\r\n    getColor(): string {\r\n        return \"#009688\"\r\n    }\r\n\r\n    getOpacity(index: number): number {\r\n        index += 0.5\r\n        return this.state.value[0] <= index && index <= this.state.value[1] ? 1 : 0.3\r\n    }\r\n\r\n    getLeftPoint(): number {\r\n        return (this.state.value[0] - 1) / (this.state.data.length - 1)\r\n    }\r\n\r\n    getRightPoint(): number {\r\n        return (this.state.value[1]) / (this.state.data.length - 1)\r\n    }\r\n\r\n    getMarks(data: WordEntry[]): Mark[] {\r\n        let marks = data.map((e, i) => ({value: i + 0.5, label: e.text}))\r\n        let years: Set<String> = new Set<String>();\r\n        marks.forEach((e, i) => {\r\n            const d = e.label.split('-')\r\n            if (years.has(d[0])) marks[i].label = month_name[Number.parseInt(d[1]) - 1]\r\n            else {\r\n                years.add(d[0])\r\n                marks[i].label = month_name[Number.parseInt(d[1]) - 1] + ` ${d[0]}`;\r\n            }\r\n        })\r\n        return marks\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport {Category} from \"../models/DataLoader\";\r\n\r\nexport interface ExpProps {\r\n    category: Category | 'date' | 'amount' | 'keyword' | 'table' | 'footer';\r\n}\r\n\r\nexport default function ExplanationText(props: ExpProps) {\r\n\r\n    switch (props.category) {\r\n        case 'date':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    Date that the transaction was entered into the system,\r\n                    which is dependent on when people complete their paperwork.\r\n                    <br/>\r\n                    Use the slider below to filter the dates of the transactions.\r\n                </Typography>\r\n            )\r\n        case 'fund':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    The source of the money. Not all are from student fees.\r\n                </Typography>\r\n            )\r\n        case 'division':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    Who allocated the money to a department.\r\n                </Typography>\r\n            )\r\n        case 'department':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    Who spends the money. Includes student groups.\r\n                </Typography>\r\n            )\r\n        case 'gl':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    General Ledger are rules on how a particular pile of money can be spent. Operating expenses is the generic label.\r\n                </Typography>\r\n            )\r\n        case 'event':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    The occasion/reason for the transaction. Commission/Dept related is the generic label.\r\n                </Typography>\r\n            )\r\n        case 'keyword':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    The spender writes how they spent $, and the accountant abbreviates it (due to character limit).\r\n                    Wordcloud de-abbreviates, and font size represents the total $ of all descriptions containing the word. (tell us if de-abreviation has bugs)\r\n                </Typography>\r\n            )\r\n        case 'amount':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    Histogram of the individual transaction amounts.\r\n                    <br/>\r\n                    Use the slider below to filter the amount of the transactions.\r\n                </Typography>\r\n            )\r\n        case 'table':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    Above is the raw transaction table of the Undergraduate Student Association.\r\n                    Click on a column to visualize it.\r\n                    <br/>\r\n                    Low on time? Most important is the descriptions column. Everything else is administrative.\r\n                </Typography>\r\n            )\r\n        case 'footer':\r\n            return (\r\n                <Typography color=\"textSecondary\">\r\n                    We had to de-abbreviate them, but sometimes did that incorrectly,\r\n                    so please comment at the bottom of the page if you see that.\r\n                    <br/>\r\n                    These abbreviations had to be autocorrected so they can be categorized in the visual.\r\n                    If autocorrect groups transactions incorrectly, please comment at the bottom of the page.\r\n                </Typography>\r\n            )\r\n        default:\r\n            return <div/>\r\n    }\r\n\r\n}\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport WordCloud from \"./WordCloud\";\r\nimport RecordTable from \"./RecordTable\";\r\nimport KeywordCrumb from \"./KeywordCrumb\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport DataLoader, {Category, isOfTypeCategory} from \"../models/DataLoader\";\r\nimport CategoryPie from \"./CategoryPie\";\r\nimport {Tab, Tabs, withStyles} from \"@material-ui/core\";\r\nimport AmountSlider from \"./AmountSlider\";\r\nimport QueryBuilder from \"../models/QueryBuilder\";\r\nimport DateSlider from \"./DateSlider\";\r\nimport ExplanationText from \"./ExplanationText\";\r\n\r\nexport type TabTypes = Category | 'table' | 'keyword' | \"amount\" | \"date\";\r\n\r\ninterface DatasetState {\r\n    value: TabTypes;\r\n}\r\n\r\ninterface DatasetProps {\r\n    loader: DataLoader\r\n}\r\n\r\nexport function isOfTypeTabs (input: string): input is TabTypes {\r\n    return isOfTypeCategory(input) || ['table' , 'keyword' , \"amount\" , \"date\"].includes(input);\r\n}\r\n\r\ninterface StyledTabProps{\r\n    label?: React.ReactNode;\r\n    value?: any;\r\n}\r\n\r\nconst NarrowTab = withStyles((theme) => ({\r\n    root: {\r\n        minWidth: 72,\r\n        fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n    selected: {},\r\n}))((props:StyledTabProps) => <Tab {...props} />);\r\n\r\nexport default class DatasetView extends React.Component<DatasetProps, DatasetState> {\r\n    private value: TabTypes = 'table'\r\n\r\n    constructor(props: DatasetProps) {\r\n        super(props);\r\n\r\n        this.value = this.parseQuery(QueryBuilder.getInstance().getQuery())\r\n\r\n        this.state = {\r\n            value: this.value,\r\n        }\r\n\r\n        QueryBuilder.getInstance().addGenerator(this.generateQuery.bind(this), 1)\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.props.loader.addChangeCallback(() => this.forceUpdate())\r\n    }\r\n\r\n    parseQuery(query: string): TabTypes {\r\n        if (query[0] === '?') query = query.slice(1)\r\n        const res = query.split('&').filter((e) => e.startsWith('tab='))\r\n        if (res.length === 0) return 'table'\r\n        let s = res[0].substr(4)\r\n        if (isOfTypeTabs(s)) {\r\n            return s\r\n        } else return 'table'\r\n    }\r\n\r\n    generateQuery(): string {\r\n        return 'tab=' + this.value\r\n    }\r\n\r\n    onTabChange(value: string) {\r\n        this.value = isOfTypeTabs(value) ? value : 'table'\r\n        this.setState({value: this.value})\r\n        QueryBuilder.getInstance().update()\r\n    }\r\n\r\n    render() {\r\n        const loader = this.props.loader\r\n\r\n        return (\r\n            <div>\r\n                <KeywordCrumb style={{margin: 10}} dataloader={loader}/>\r\n                {/* <Tabs value={this.state.value}\r\n                      onChange={(e, value) => this.onTabChange(value)}\r\n                      variant=\"fullWidth\"\r\n                      indicatorColor=\"primary\" textColor=\"primary\">\r\n                    <Tab label=\"Table\" value=\"table\"/>\r\n                    <NarrowTab label=\"Keywords\" value=\"keyword\"/>\r\n                    <NarrowTab label=\"Fund\" value=\"fund\"/>\r\n                    <NarrowTab label=\"Division\" value=\"division\"/>\r\n                    <NarrowTab label=\"Department\" value=\"department\"/>\r\n                    <NarrowTab label=\"GL\" value=\"gl\"/>\r\n                    <NarrowTab label=\"Event\" value=\"event\"/>\r\n                    <NarrowTab label=\"Amount\" value=\"amount\"/>\r\n                    <NarrowTab label=\"Date\" value=\"date\"/>\r\n                </Tabs> */}\r\n                <Paper elevation={2} style={{padding: 10}}>\r\n                    <RecordTable hidden={false} dataloader={loader} onChange={this.onTabChange.bind(this)}/>\r\n                    <ExplanationText category={this.state.value}/>\r\n                    <WordCloud hidden={this.state.value !== 'keyword'} dataloader={loader}/>\r\n                    <CategoryPie hidden={!isOfTypeCategory(this.state.value)}\r\n                                 category={isOfTypeCategory(this.state.value) ? this.state.value : \"fund\"} dataloader={loader}/>\r\n                    <AmountSlider hidden={this.state.value !== \"amount\"} dataloader={loader}/>\r\n                    <DateSlider hidden={this.state.value !== 'date'} dataloader={loader}/>\r\n                </Paper>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import {Link} from \"@material-ui/core\";\r\nimport ContactSupportIcon from \"@material-ui/icons/ContactSupport\";\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport React from \"react\";\r\nimport ExplanationText from \"./ExplanationText\";\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <footer>\r\n            <br/>\r\n            <Link color=\"textSecondary\" href=\"https://forms.google.com\" style={{padding: 20}}>\r\n                <ContactSupportIcon/> Comments\r\n            </Link>\r\n            <Link color=\"textSecondary\" href=\"mailto:vtran@asucla.ucla.edu\" style={{padding: 20}}>\r\n                <EmailIcon/> Professional Accountant\r\n            </Link>\r\n            <Link color=\"textSecondary\" href=\"mailto:usacouncil@asucla.ucla.edu\" style={{padding: 20}}>\r\n                <EmailIcon/> USAC Council\r\n            </Link>\r\n        </footer>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TopBar from \"./components/TopBar\";\r\nimport DatasetView from \"./components/DatasetView\"\r\nimport DataLoader from \"./models/DataLoader\";\r\nimport Datasets from \"./models/Datasets\";\r\nimport {Container, CssBaseline, Link} from \"@material-ui/core\";\r\nimport ContactSupportIcon from '@material-ui/icons/ContactSupport';\r\nimport Footer from \"./components/Footer\";\r\n\r\ninterface AppState {\r\n    loader: DataLoader\r\n}\r\n\r\nclass App extends React.Component<{}, AppState> {\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = {\r\n            loader: Datasets.getInstance().getDataLoader()\r\n        }\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        Datasets.getInstance().addChangeCallback(() => {\r\n            this.setState({\r\n                loader: Datasets.getInstance().getDataLoader()\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <CssBaseline />\r\n                <TopBar />\r\n                <Container maxWidth=\"lg\">\r\n                    <DatasetView loader={this.state.loader} />\r\n                    <Footer />\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["models/QueryBuilder.ts","util.ts","models/DataLoader.ts","models/Datasets.ts","components/TopBar.tsx","components/WordCloud.tsx","components/RecordTable.tsx","components/KeywordCrumb.tsx","components/CategoryPie.tsx","components/AmountSlider.tsx","components/DatasetView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["QueryBuilder","queryString","generators","Map","this","window","location","search","replace","instance","callback","index","set","query","values","map","c","join","path","href","includes","substr","indexOf","history","pushState","commaFormat","x","Number","isNaN","parts","toFixed","split","KMFormat","suffix","Math","abs","toPrecision","KMFToNum","str","unit","parseFloat","DataLoader","dataset","data","filters","dataChangeCallbacks","total_amount","setDataset","sliceFilter","loadDataset","Papa","pathname","download","header","complete","results","e","date","Date","amount","words","__parsed_extra","filter","onLoad","reduce","prev","curr","parseQuery","getInstance","getQuery","addGenerator","generateQueryString","bind","listChangeCallback","slice","callbacks","forEach","entry","sign_location","q","v","addKeywordFilter","addCategoryFilter","atob","addAmountFilter","console","log","category","name","btoa","update","push","length","words_set","getRecords","row","w","get","words_list","entries","word","val","text","value","sort","a","b","category_set","cate_name","category_list","numBin","domain","records","previousValue","currentValue","min","max","MAX_VALUE","MIN_VALUE","allMin","allMax","bins","bin_size","i","low","high","remaining_length","word_index","new_index","Datasets","datasets","currentDataset","dataLoader","ready","parseDataset","getQueryString","fetch","then","res","json","getDatasetTitle","startsWith","match","parseInt","toString","TopBar","props","state","drawer","addChangeCallback","forceUpdate","toggleDrawer","setState","dataset_list","getDatasets","AppBar","position","Toolbar","IconButton","edge","color","aria-label","onClick","Typography","variant","getCurrentDatasetName","Drawer","anchor","open","onClose","List","ListItem","button","key","setCurrentDataset","ListItemIcon","ListItemText","primary","React","Component","WordCloud","getWordTooltip","onWordClick","getCallback","onWordMouseOut","onWordMouseOver","options","fontFamily","fontSizes","fontStyle","fontWeight","scale","deterministic","rotations","rotationAngles","transitionDuration","dataloader","setWords","style","height","hidden","getWordList","event","isActive","select","target","on","transition","attr","RecordTable","columns","title","field","type","showTitle","sorting","exportButton","padding","paging","draggable","headerStyle","top","exportAllData","icons","Export","SaveAlt","SortArrow","ArrowDownward","FirstPage","LastPage","NextPage","ChevronRight","PreviousPage","ChevronLeft","getTotal","KeywordCrumb","list","getFilters","Breadcrumbs","separator","Link","getDatasetTotal","CategoryPie","getCategories","width","dataKey","nameKey","fill","getColor","label","percent","labelLine","formatter","contentStyle","margin","borderRadius","AmountSlider","updateState","getAmountBins","strokeDasharray","tick","axisLine","tickFormatter","y","stroke","opacity","getOpacity","Slider","onChange","onRangeChange","onChangeCommitted","onRangeChangeCommitted","valueLabelDisplay","valueLabelFormat","marks","getMarks","newValues","nVal","getMarkPoint","step_size","DatasetView","generateQuery","loader","Paper","Tabs","indicatorColor","textColor","Tab","App","getDataLoader","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cd773e97.chunk.js","sourcesContent":["export default class QueryBuilder {\n\n    private static instance: QueryBuilder | null = null\n    private queryString: string\n    private generators: Map<number, ()=>string> = new Map()\n\n    static getInstance(){\n        if (this.instance === null) this.instance = new QueryBuilder()\n        return this.instance\n    }\n\n\n    private constructor() {\n        this.queryString = window.location.search.replace('?', '')\n    }\n\n    getQuery() {\n        return this.queryString\n    }\n\n    addGenerator(callback: () => string, index: number) {\n        this.generators.set(index, callback)\n    }\n\n    update() {\n        let strings : string[] = [...this.generators.values()].map((c) => c())\n        const query = strings.join('&')\n\n        let path = window.location.href\n        if (path.includes('?')) path = path.substr(0, path.indexOf('?'))\n        window.history.pushState({path: path + '?' + query},'',path + '?' + query);\n    }\n}\n","export function commaFormat(x: number) : string {\n    if (Number.isNaN(x)) return \"\"\n    let x_str: string = x.toFixed(2)\n    let parts: string[] = x_str.split(\".\")\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n    return parts.join(\".\");\n}\n\nexport function KMFormat(x: number) : string {\n    if (Number.isNaN(x)) return \"\"\n    let suffix = \"\";\n    if (Math.abs(x) >= 1000000000) {\n        suffix = \"B\"\n        x /= 1000000000;\n    } else if (Math.abs(x) >= 1000000) {\n        suffix = \"M\"\n        x /= 1000000;\n    } else if (Math.abs(x) >= 1000) {\n        suffix = \"K\"\n        x /= 1000;\n    }\n    return x.toPrecision(3) + suffix;\n}\n\nexport function KMFToNum(str: string) : number {\n    let unit = 1\n    if (str.includes('K')) {\n        unit = 1000\n        str = str.replace('K', '')\n    }\n    if (str.includes('M')) {\n        unit = 1000000\n        str = str.replace('M', '')\n    }\n    if (str.includes('B')) {\n        str = str.replace('B', '')\n        unit = 1000000000\n    }\n    return Number.parseFloat(str) * unit\n}","import {KMFormat, KMFToNum} from \"../util\";\nimport * as Papa from 'papaparse';\nimport QueryBuilder from \"./QueryBuilder\";\n\ninterface DataEntry {\n    date: Date,\n    fund: string,\n    division: string,\n    department: string,\n    gl: string,\n    event: string,\n    description: string,\n    amount: number,\n    words: string[]\n}\n\nexport interface AmountBin {\n    low: number\n    high: number\n    value: number\n    name: string\n}\n\nexport type Category = 'fund'| 'division'| 'department'| 'gl'| 'event'\n\ninterface WordEntry {\n    text: string,\n    value: number\n}\n\ninterface Filter {\n    category: string,\n    name: string,\n    index: DataEntry[],\n    amount: number,\n}\n\nexport interface DataLoaderProps {\n    dataloader: DataLoader,\n    style?: Object,\n}\n\nexport default class DataLoader{\n\n    private data: DataEntry[] = []\n    private filters: Filter[] = []\n    private dataChangeCallbacks: (()=> void)[] = []\n    private total_amount: number = 0\n\n    constructor(dataset: string | null) {\n        this.setDataset(dataset)\n    }\n\n    setDataset(dataset: string | null) {\n        this.sliceFilter(0)\n        this.loadDataset(dataset)\n    }\n\n    private loadDataset(dataset: string | null) {\n        if (dataset == null) return\n        Papa.parse(window.location.pathname + \"/expense_summary_\" + dataset + \".csv\",\n            {\n                download: true,\n                header: true,\n                complete: (results) => {\n                    this.data = results.data.map((e) => {\n                        e.date = new Date(Number.parseFloat(e.date) * 1000)\n                        e.amount = Number.parseFloat(e.amount)\n                        e.words = e.__parsed_extra || []\n                        return e\n                    }).filter(e => !Number.isNaN(e.amount))\n\n                    this.onLoad()\n                }\n            })\n    }\n\n    private onLoad() {\n        this.total_amount = this.data.reduce((prev, curr) => prev + curr.amount, 0)\n        this.parseQuery(QueryBuilder.getInstance().getQuery())\n        QueryBuilder.getInstance().addGenerator(this.generateQueryString.bind(this), 2)\n        this.listChangeCallback()\n    }\n\n    private parseQuery(query: string) {\n        if (query[0] === '?') query = query.slice(1)\n        const callbacks = this.dataChangeCallbacks\n        this.dataChangeCallbacks = []\n        try {\n            query.split('&').forEach(entry => {\n                if (!entry.includes('=')) return\n                const sign_location = entry.indexOf('=')\n                const q = entry.substr(0, sign_location)\n                const v = entry.substr(sign_location + 1)\n                switch (q) {\n                    case 'keyword':\n                        this.addKeywordFilter(v)\n                        break\n                    case 'fund':\n                    case 'division':\n                    case 'department':\n                    case 'gl':\n                    case 'event':\n                        this.addCategoryFilter(q, atob(v))\n                        break\n                    case 'amount':\n                        if (!v.includes('..')) return\n                        const values = v.split('..').map(e => KMFToNum(e))\n                        this.addAmountFilter(values[0], values[1])\n                        break\n                }\n            })\n        } catch (e) {\n            console.log(e)\n        }\n        this.dataChangeCallbacks = callbacks\n    }\n\n    private generateQueryString(){\n        const strings = this.filters.map((curr) => {\n                switch (curr.category) {\n                    case 'keyword':\n                        return 'keyword=' + curr.name\n                    case 'amount':\n                        return 'amount=' + curr.name.replace('~', '..')\n                    default:\n                        return curr.category + '=' + btoa(curr.name)\n                }\n            })\n        return strings.join('&')\n    }\n\n    private listChangeCallback() {\n        this.dataChangeCallbacks.forEach(c => c())\n        QueryBuilder.getInstance().update()\n    }\n\n    addChangeCallback(callback: () => void) {\n        this.dataChangeCallbacks.push(callback)\n    }\n\n    getRecords(): DataEntry[] {\n        if (this.data.length === 0) {\n            return [];\n        }\n\n        if (this.filters.length === 0) {\n            return this.data\n        }\n\n        return this.filters[this.filters.length - 1].index\n    }\n\n    getWordList() : WordEntry[] {\n        if (this.data.length === 0) {\n            return [];\n        }\n\n        let words_set = new Map<string, number>()\n        this.getRecords().forEach(row => {\n            row.words.forEach(w => {\n                words_set.set(w, (words_set.get(w) || 0) + row.amount);\n            })\n        })\n\n        let words_list: WordEntry[] = []\n        for (let [word, val] of words_set.entries()) {\n            words_list.push({text: word, value: val})\n        }\n\n        words_list.sort((a, b) => a.value - b.value)\n\n        return words_list\n    }\n\n    getCategories(category: Category): WordEntry[] {\n        if (this.data.length === 0) {\n            return [];\n        }\n\n        let category_set = new Map<string, number>()\n        this.getRecords().forEach(row => {\n            const cate_name = row[category]\n                category_set.set(cate_name, (category_set.get(cate_name) || 0) + row.amount);\n        })\n\n        let category_list: WordEntry[] = []\n        for (let [word, val] of category_set.entries()) {\n            category_list.push({text: word, value: val})\n        }\n\n        category_list.sort((a, b) => a.value - b.value)\n\n        return category_list\n    }\n\n    getAmountBins(numBin: number): {data: AmountBin[], domain: [number, number]}{\n        if (this.data.length === 0) {\n            return {data: [], domain: [0, 1]}\n        }\n\n        let records : DataEntry[];\n        let domain: [number, number] | null = null;\n        if (this.filters.length !== 0 && this.filters[this.filters.length - 1].category === 'amount') {\n            records = this.filters.length >= 2 ? this.filters[this.filters.length - 2].index : this.data\n            const values = this.filters[this.filters.length - 1].name.split('~').map(e => KMFToNum(e))\n            domain = values as [number, number]\n        } else {\n            records = this.getRecords()\n        }\n        let [allMin, allMax] = records.reduce(((previousValue, currentValue) =>\n                [Math.min(previousValue[0], currentValue.amount),\n                    Math.max(previousValue[1], currentValue.amount)]), [Number.MAX_VALUE, Number.MIN_VALUE])\n\n        if (domain === null) domain = [allMin, allMax]\n\n        let bins : AmountBin[] = []\n        let bin_size = (allMax - allMin) / numBin\n        for (let i = 0; i < numBin; i ++) {\n            bins.push({low: allMin + i * bin_size, high: allMin + (i + 1) * bin_size,\n                        value: 0, name: KMFormat(allMin + (i + 0.5) * bin_size)})\n        }\n\n        records.forEach((e) => {\n            bins.forEach((b) =>{\n                if (b.low <= e.amount && e.amount < b.high)\n                    b.value += e.amount\n            })\n        })\n\n        return {data: bins, domain: domain}\n    }\n\n    getTotal(): number {\n        if (this.filters.length === 0) {\n            return this.total_amount\n        }\n        return this.filters[this.filters.length - 1].amount\n    }\n\n    getDatasetTotal(): number {\n        return this.total_amount\n    }\n\n    getFilters(){\n        return this.filters\n    }\n\n    sliceFilter(remaining_length: number) {\n        this.filters = this.filters.slice(0, remaining_length)\n        this.listChangeCallback()\n    }\n\n    addKeywordFilter(word: string) {\n        if (this.data.length === 0) return\n        if (this.filters.reduce((prev, curr) => prev || (curr.category === 'keyword' && curr.name === word), false))\n            return\n\n        let word_index: DataEntry[]\n        if (this.filters.length !== 0) {\n            const last_index = this.filters[this.filters.length - 1].index\n            word_index = last_index.filter((e) => e.words.includes(word))\n        } else {\n            word_index = this.data.filter(e => e.words.includes(word))\n        }\n\n        this.filters.push({\n            category: 'keyword',\n            name: word,\n            index: word_index,\n            amount: word_index\n                .reduce((prev, curr) => prev + curr.amount, 0)\n        })\n\n        this.listChangeCallback()\n    }\n\n    addCategoryFilter(category: Category, value: string) {\n        if (this.data.length === 0) return\n        if (this.filters.reduce((prev, curr) => prev || (curr.category === category && curr.name === value), false))\n            return\n\n        let new_index: DataEntry[]\n        if (this.filters.length !== 0) {\n            const last_index = this.filters[this.filters.length - 1].index\n            // @ts-ignore\n            new_index = last_index.filter((e) => (e[category] === value))\n        } else {\n            // @ts-ignore\n            new_index = this.data.filter(e => (e[category] === value))\n        }\n\n        this.filters.push({\n            category: category,\n            name: value,\n            index: new_index,\n            amount: new_index.reduce((prev, curr) => prev + curr.amount, 0)\n        })\n\n        this.listChangeCallback()\n    }\n\n    addAmountFilter(low: number, high: number) {\n        if (this.data.length === 0) return\n\n        if (this.filters.length > 0 && this.filters[this.filters.length - 1].category === 'amount') {\n                this.filters = this.filters.slice(0, -1)\n        }\n        const last_index = this.filters.length > 0 ? this.filters[this.filters.length - 1].index : this.data\n        const new_index = last_index\n            .filter((e) => (low <= e.amount && e.amount <= high))\n\n        this.filters.push({\n            category: 'amount',\n            name: KMFormat(low) + \"~\" + KMFormat(high),\n            index: new_index,\n            amount: new_index\n                .reduce((prev, curr) => prev + curr.amount, 0)\n        })\n\n        this.listChangeCallback()\n    }\n}","import QueryBuilder from \"./QueryBuilder\";\nimport DataLoader from \"./DataLoader\";\n\nexport default class Datasets {\n\n    private static instance: Datasets | null = null\n    private datasets: string[] = []\n    private currentDataset: string | null = null\n    private callbacks: (() => void)[] = []\n    private dataLoader: DataLoader\n    private ready: boolean = false\n\n    static getInstance(){\n        if (this.instance === null) this.instance = new Datasets()\n        return this.instance\n    }\n\n\n    private constructor() {\n        this.parseDataset(QueryBuilder.getInstance().getQuery())\n        this.dataLoader = new DataLoader(this.currentDataset)\n        QueryBuilder.getInstance().addGenerator(this.getQueryString.bind(this), 0)\n        fetch(window.location.pathname + \"/datasets.json\")\n            .then(res => res.json())\n            .then((res) => {\n                this.datasets = res\n                this.ready = true\n                if (this.currentDataset === null) this.currentDataset = this.datasets[0]\n                this.dataLoader.setDataset(this.currentDataset)\n                this.callbacks.forEach(c => c())\n            })\n    }\n\n    addChangeCallback(callback: ()=>void) {\n        this.callbacks.push(callback)\n    }\n\n    isReady() {\n        return this.ready\n    }\n\n    getCurrentDataset() {\n        if (this.currentDataset != null) return this.currentDataset\n        return undefined\n    }\n\n    getCurrentDatasetName() {\n        if (this.currentDataset != null) return Datasets.getDatasetTitle(this.currentDataset)\n        return undefined\n    }\n\n    getDatasets() {\n        if (this.ready) return this.datasets\n        return undefined\n    }\n\n    getDatasetNames() {\n        if (this.ready) return this.datasets.map(Datasets.getDatasetTitle)\n        return undefined\n    }\n\n    getDataLoader() {\n        return this.dataLoader\n    }\n\n    setCurrentDataset(name: string) {\n        this.currentDataset = name\n        QueryBuilder.getInstance().update()\n        this.dataLoader.setDataset(name)\n        this.callbacks.forEach(c => c())\n    }\n\n    private parseDataset(query: string) {\n        if (query[0] === '?') query = query.slice(1)\n        const res = query.split('&').filter((e) => e.startsWith('d='))\n        if (res.length !== 0)\n            this.currentDataset = res[0].substr(2)\n    }\n\n    private getQueryString(): string {\n        if (this.currentDataset === null) return \"\"\n        return 'd=' + this.currentDataset\n    }\n\n    static getDatasetTitle(name: string): string {\n            if (name.match(/^\\d*$/)) {\n                const year = Number.parseInt(name)\n                return name + '-' + (year + 1).toString()\n            }\n            else return name\n    }\n}\n","import {\n    AppBar,\n    Drawer,\n    IconButton,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Toolbar,\n    Typography\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ListIcon from \"@material-ui/icons/List\"\nimport React from \"react\";\nimport Datasets from \"../models/Datasets\";\n\ninterface BarState {\n    drawer: boolean\n}\n\nexport default class TopBar extends React.Component<{}, BarState> {\n\n    constructor(props: {}) {\n        super(props);\n\n        this.state = {\n            drawer: false\n        }\n    }\n\n    componentDidMount(): void {\n        Datasets.getInstance().addChangeCallback(() => this.forceUpdate())\n    }\n\n    render() {\n        const toggleDrawer = (state: boolean) => () => this.setState({drawer: state})\n        const dataset_list: string[] = Datasets.getInstance().getDatasets() || []\n        return (\n            <AppBar position=\"sticky\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" onClick={toggleDrawer(true)}>\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        {\"USAC budget spending \"+Datasets.getInstance().getCurrentDatasetName()}\n                    </Typography>\n                </Toolbar>\n                <Drawer anchor={'left'} open={this.state.drawer} onClose={toggleDrawer(false)}>\n                    <div onClick={toggleDrawer(false)}>\n                        <List>\n                            {dataset_list.map(text => (\n                                <ListItem button key={text} onClick={() => {\n                                    toggleDrawer(false)\n                                    Datasets.getInstance().setCurrentDataset(text)\n                                }}>\n                                    <ListItemIcon><ListIcon/></ListItemIcon>\n                                    <ListItemText primary={\"Budget \" + Datasets.getDatasetTitle(text)} />\n                                </ListItem>\n                            ))}\n                        </List>\n                    </div>\n                </Drawer>\n            </AppBar>\n        )\n    }\n}","/**\n * Created by TylerLiu on 2020/04/23.\n */\nimport 'd3-transition';\nimport { select } from 'd3-selection';\nimport React, { Component } from 'react';\nimport ReactWordcloud, {Callbacks, OptionsProp, Word} from \"react-wordcloud\";\nimport {KMFormat} from \"../util\";\nimport {DataLoaderProps} from \"../models/DataLoader\";\n\ninterface WordCloudProps extends DataLoaderProps{\n    hidden?: boolean\n}\n\nexport default class WordCloud extends Component<WordCloudProps>{\n    private callbacks: Callbacks = {\n        getWordTooltip: (word: Word) =>`${word.text} has $${KMFormat(word.value)} in the category.`,\n        onWordClick: this.getCallback('onWordClick').bind(this),\n        onWordMouseOut: this.getCallback('onWordMouseOut').bind(this),\n        onWordMouseOver: this.getCallback('onWordMouseOver').bind(this),\n    };\n\n    private options: OptionsProp = {\n        fontFamily: 'impact',\n        fontSizes: [5, 60],\n        fontStyle: 'normal',\n        fontWeight: 'normal',\n        scale: 'log',\n        //spiral: 'archimedean',\n        deterministic: true,\n\n        rotations: 4,\n        rotationAngles: [-45, 90],\n\n        transitionDuration: 200,\n    }\n\n    constructor(props: DataLoaderProps) {\n        super(props)\n\n        this.state = {\n            words : [{text: 'Loading...', value: 100}]\n        }\n    }\n\n     componentDidMount() {\n         this.props.dataloader.addChangeCallback(this.setWords.bind(this))\n     }\n\n    render() {\n        return(\n            <div style={{height: '80vh'}}  hidden={this.props.hidden}>\n                {(this.props.hidden || false) ? null : (\n                <ReactWordcloud callbacks={this.callbacks} words={this.props.dataloader.getWordList()} options={this.options}/>\n                )}\n            </div>\n        )\n    }\n\n    getCallback(callback: string) {\n        return (word: Word, event: MouseEvent | undefined) => {\n            const isActive = callback !== 'onWordMouseOut';\n            // @ts-ignore\n            const text = select(event.target);\n            text\n                .on('click', (() => {\n                    if (isActive) {\n                        this.props.dataloader.addKeywordFilter(word.text);\n                    }\n                }))\n                .transition()\n                .attr('background', 'white')\n                .attr('text-decoration', isActive ? 'underline' : 'none');\n        };\n    }\n\n    setWords() {\n        this.forceUpdate()\n    }\n}","/**\n * Created by TylerLiu on 2018/12/23.\n */\nimport React, {Component} from 'react';\nimport {commaFormat} from \"../util\";\nimport MaterialTable, {Column, Icons, Options} from \"material-table\";\nimport {DataLoaderProps} from \"../models/DataLoader\";\nimport {SaveAlt, ArrowDownward, FirstPage, LastPage, ChevronRight, ChevronLeft} from \"@material-ui/icons\"\n\n//TODO virtualize\n\nexport default class RecordTable extends Component<DataLoaderProps>{\n\n    private columns: Column<any>[] = [\n        {title: 'Date', field: 'date', type: \"date\"},\n        {title: 'Amount', field: 'amount', type: \"currency\"},\n        {title: 'Description', field: 'description'},\n        {title: 'Department', field: 'department'},\n        {title: 'Fund', field: 'fund'},\n        {title: 'Division', field: 'division'},\n        {title: 'Event', field: 'event'},\n        {title: 'GL', field: 'gl'},\n    ]\n\n    private options: Options = {\n        showTitle: true,\n        sorting: true,\n        exportButton: true,\n        padding: \"dense\",\n        paging: true,\n        search: false,\n        draggable: false,\n        headerStyle: { position: 'sticky', top: 0 },\n        exportAllData: true,\n    }\n\n    private icons: Icons = {\n        // @ts-ignore\n        Export: SaveAlt,\n        // @ts-ignore\n        SortArrow: ArrowDownward,\n        // @ts-ignore\n        FirstPage: FirstPage,\n        // @ts-ignore\n        LastPage: LastPage,\n        // @ts-ignore\n        NextPage: ChevronRight,\n        // @ts-ignore\n        PreviousPage: ChevronLeft,\n    }\n\n     componentDidMount() {\n         this.props.dataloader.addChangeCallback(() => {\n             this.forceUpdate()\n         })\n     }\n\n    render() {\n        return(\n                <MaterialTable options={this.options} columns={this.columns} icons={this.icons}\n                               data={this.props.dataloader.getRecords()}\n                               title={\"Transactions: total $\"+commaFormat(this.props.dataloader.getTotal())}/>\n        )\n    }\n\n}","/**\n * Created by TylerLiu on 2018/12/23.\n */\nimport React, {Component} from 'react';\nimport {Breadcrumbs, Typography} from \"@material-ui/core\";\nimport Link from \"@material-ui/core/Link\";\nimport {KMFormat} from \"../util\";\nimport {DataLoaderProps} from \"../models/DataLoader\";\n\nexport default class KeywordCrumb extends Component<DataLoaderProps>{\n\n    componentDidMount() {\n        this.props.dataloader.addChangeCallback(()=>this.forceUpdate())\n    }\n\n    render() {\n        let list = this.props.dataloader.getFilters()\n        return(\n            <Breadcrumbs separator=\">\" style={this.props.style}>\n                <Link key={-1} color=\"textPrimary\" onClick={()=>this.props.dataloader.sliceFilter(0)}>Transactions(${KMFormat(this.props.dataloader.getDatasetTotal())})</Link>\n                {list.slice(0, -1).map((filter, index)=>(\n                    <Link key={index} color=\"textSecondary\" onClick={()=>this.props.dataloader.sliceFilter(index + 1)}>{filter.category}: {filter.name}(${KMFormat(filter.amount)})</Link>\n                ))}\n                {list.length > 0 ? (<Typography color=\"textPrimary\" key={list.length}>{list[list.length-1].category}: {list[list.length-1].name}(${KMFormat(list[list.length-1].amount)})</Typography>) : null}\n            </Breadcrumbs>\n        )\n    }\n}\n","import React, {Component} from \"react\";\nimport {Category, DataLoaderProps} from \"../models/DataLoader\";\nimport {Pie, PieChart, ResponsiveContainer, Tooltip} from 'recharts';\nimport {KMFormat} from \"../util\";\n\ninterface CategoryPieProps extends DataLoaderProps{\n    category: Category\n    hidden?: boolean\n}\n\nexport default class CategoryPie extends Component<CategoryPieProps>{\n\n    componentDidMount(): void {\n        this.props.dataloader.addChangeCallback(() => this.forceUpdate())\n    }\n\n    render(): React.ReactNode {\n        const data = this.props.dataloader.getCategories(this.props.category)\n        return (\n            <div style={{height: '80vh'}} hidden={this.props.hidden || false}>\n                {(this.props.hidden || false) ? null : (\n                <ResponsiveContainer height=\"100%\" width=\"100%\">\n                    <PieChart>\n                        <Pie data={data} dataKey=\"value\" nameKey=\"text\" fill={this.getColor()}\n                             label={({percent, name}) => ((percent || 0) > 0.005 ? name: \"\")}\n                             labelLine={false}\n                             onClick={(e) => this.props.dataloader.addCategoryFilter(this.props.category, e.text)}/>\n                        <Tooltip formatter={(value) => \"$\"+KMFormat(value as number)}\n                                 contentStyle={{padding: '0 5px', margin: 0, borderRadius: 5}}/>\n                    </PieChart>\n                </ResponsiveContainer>\n                )}\n            </div>\n        )\n    }\n\n    getColor(): string {\n        switch (this.props.category) {\n            case \"fund\":\n                return \"#ef5350\"\n            case \"division\":\n                return \"#ab47bc\"\n            case \"department\":\n                return \"#26c6da\"\n            case \"gl\":\n                return \"#26a69a\"\n            case \"event\":\n                return \"#d4e157\"\n        }\n    }\n}","import React, {Component} from \"react\";\nimport {AmountBin, DataLoaderProps} from \"../models/DataLoader\";\nimport {\n    Bar,\n    BarChart,\n    CartesianGrid, Cell, ReferenceLine,\n    ResponsiveContainer,\n    XAxis,\n    YAxis\n} from 'recharts';\nimport {KMFormat} from \"../util\";\nimport {Mark, Slider} from \"@material-ui/core\";\n\ninterface SliderProps extends DataLoaderProps{\n    hidden?: boolean\n}\n\ninterface SliderState {\n    value: [number, number]\n    data: AmountBin[]\n}\n\nexport default class AmountSlider extends Component<SliderProps, SliderState>{\n\n    constructor(props: SliderProps) {\n        super(props);\n        this.state = {\n            value: [0, 100],\n            data: []\n        }\n    }\n\n\n    componentDidMount(): void {\n        this.props.dataloader.addChangeCallback(() =>\n            this.updateState()\n        )\n        this.updateState()\n    }\n\n    updateState(){\n        const {data, domain} = this.props.dataloader.getAmountBins(20)\n        this.setState({\n            data: data,\n            value: domain,\n        })\n    }\n\n    render(): React.ReactNode {\n        const data = this.state.data\n        const domain: [number, number] = data.length === 0 ? [0, 1] : [data[0].low, data[data.length - 1].high]\n        return (\n            <div style={{height: '80vh', width: \"80%\", margin: \"auto\"}} hidden={this.props.hidden || false}>\n                {(this.props.hidden || false) ? null : (\n                <ResponsiveContainer height=\"90%\" width=\"100%\">\n                    <BarChart data={data}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"name\" domain={domain} tick={false} axisLine={false} />\n                        <YAxis domain={[0, 'datamax']} tickFormatter={(v) => '$'+KMFormat(v)}/>\n                        <ReferenceLine y={0} label=\"\" stroke=\"black\" />\n                        <Bar dataKey={\"value\"} fill={this.getColor()}>\n                            {data.map((value, index) => (\n                                <Cell key={`cell-${index}`} fill={this.getColor()}\n                                      opacity={this.getOpacity(value.low, value.high)}/>\n                            ))}\n                        </Bar>\n                    </BarChart>\n                </ResponsiveContainer>\n                )}\n                <Slider value={this.state.value}\n                        min={domain[0]} max={domain[1]}\n                        onChange={this.onRangeChange.bind(this)}\n                        onChangeCommitted={this.onRangeChangeCommitted.bind(this)}\n                        valueLabelDisplay=\"auto\"\n                        valueLabelFormat={(v) => '$'+KMFormat(v)}\n                        marks={this.getMarks(domain)}\n                />\n            </div>\n        )\n    }\n\n    onRangeChange(event: any, newValues: number | number[]){\n        this.setState({value: newValues as [number, number]})\n    }\n\n    onRangeChangeCommitted(event: any, newValues: number | number[]){\n        const nVal = newValues as [number, number]\n        this.props.dataloader.addAmountFilter(nVal[0], nVal[1])\n    }\n\n    getColor(): string {\n        return \"#29b6f6\"\n    }\n\n    getOpacity(low: number, high: number): number {\n        const proportion = Math.max(0, Math.min(this.state.value[1], high) - Math.max(this.state.value[0], low)) / (high - low)\n        return 0.3 + 0.7 * proportion\n    }\n\n    getMarkPoint(x: number): Mark {\n        return {value: x, label: '$' + KMFormat(x)}\n    }\n\n    getMarks(domain: [number, number]): Mark[]{\n        let marks: Mark[] = domain.map(e => this.getMarkPoint(e))\n        if (domain[0] < 0 && domain[1] > 0) marks.push(this.getMarkPoint(0))\n\n        const step_size = (domain[1] - domain[0]) / 10\n        for (let i = 1; i < 10; i ++) {\n            const val = Number.parseFloat((domain[0] + i * step_size).toPrecision(2))\n            if (Math.abs(val) < 0.5 * step_size) continue\n            marks.push(this.getMarkPoint(val))\n        }\n\n        return marks\n    }\n}","import React from 'react';\nimport '../App.css';\nimport WordCloud from \"./WordCloud\";\nimport RecordTable from \"./RecordTable\";\nimport KeywordCrumb from \"./KeywordCrumb\";\nimport Paper from \"@material-ui/core/Paper\";\nimport DataLoader from \"../models/DataLoader\";\nimport CategoryPie from \"./CategoryPie\";\nimport {Tab, Tabs} from \"@material-ui/core\";\nimport AmountSlider from \"./AmountSlider\";\nimport QueryBuilder from \"../models/QueryBuilder\";\n\ninterface DatasetState {\n    value: number\n\n}\n\ninterface DatasetProps {\n    loader: DataLoader\n}\n\nexport default class DatasetView extends React.Component<DatasetProps, DatasetState> {\n    private value: number = 0\n    constructor(props: DatasetProps) {\n        super(props);\n\n        this.value = this.parseQuery(QueryBuilder.getInstance().getQuery())\n\n        this.state = {\n            value: this.value,\n        }\n\n        QueryBuilder.getInstance().addGenerator(this.generateQuery.bind(this), 1)\n    }\n\n    componentDidMount(): void {\n        this.props.loader.addChangeCallback(() => this.forceUpdate())\n    }\n\n    parseQuery(query: string): number {\n        if (query[0] === '?') query = query.slice(1)\n        const res = query.split('&').filter((e) => e.startsWith('tab='))\n        if (res.length === 0) return 0\n        return Number.parseInt(res[0].substr(4))\n    }\n\n    generateQuery(): string {\n        return 'tab=' + this.value\n    }\n\n    render() {\n        const loader = this.props.loader\n        return (\n            <Paper variant=\"outlined\" style={{margin: '0 10%'}}>\n                <KeywordCrumb style={{margin: 10}} dataloader={loader}/>\n                <Tabs value={this.state.value}\n                      onChange={(e, value) => {\n                          this.value = value\n                          this.setState({value: value})\n                          QueryBuilder.getInstance().update()\n                      }}\n                      variant=\"scrollable\"\n                      indicatorColor=\"primary\" textColor=\"primary\">\n                    <Tab label=\"Keywords\"/>\n                    <Tab label=\"Fund\"/>\n                    <Tab label=\"Division\"/>\n                    <Tab label=\"Department\"/>\n                    <Tab label=\"GL\"/>\n                    <Tab label=\"Event\"/>\n                    <Tab label=\"Amount\"/>\n                </Tabs>\n                <WordCloud hidden={this.state.value !== 0} dataloader={loader}/>\n                <CategoryPie hidden={this.state.value !== 1} category={\"fund\"} dataloader={loader}/>\n                <CategoryPie hidden={this.state.value !== 2} category={\"division\"} dataloader={loader}/>\n                <CategoryPie hidden={this.state.value !== 3} category={\"department\"} dataloader={loader}/>\n                <CategoryPie hidden={this.state.value !== 4} category={\"gl\"} dataloader={loader}/>\n                <CategoryPie hidden={this.state.value !== 5} category={\"event\"} dataloader={loader}/>\n                <AmountSlider hidden={this.state.value !== 6} dataloader={loader} />\n                <RecordTable dataloader={loader}/>\n            </Paper>\n        );\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport TopBar from \"./components/TopBar\";\nimport DatasetView from \"./components/DatasetView\"\nimport DataLoader from \"./models/DataLoader\";\nimport Datasets from \"./models/Datasets\";\n\ninterface AppState {\n    loader: DataLoader\n}\n\nclass App extends React.Component<{},AppState> {\n\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            loader: Datasets.getInstance().getDataLoader()\n        }\n    }\n\n    componentDidMount(): void {\n        Datasets.getInstance().addChangeCallback(() =>{\n            this.setState({\n                loader: Datasets.getInstance().getDataLoader()\n            })\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <TopBar/>\n                <DatasetView loader={this.state.loader}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
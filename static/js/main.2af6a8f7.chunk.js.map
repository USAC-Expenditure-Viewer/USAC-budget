{"version":3,"sources":["util.ts","components/WordCloud.tsx","models/QueryBuilder.ts","models/DataLoader.ts","models/Datasets.ts","components/RecordTable.tsx","components/KeywordCrumb.tsx","components/CategoryPie.tsx","components/AmountSlider.tsx","components/DateSlider.tsx","components/ExplanationText.tsx","components/DatasetView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["KMFormat","x","Number","isNaN","suffix","Math","abs","toPrecision","KMFToNum","str","unit","includes","replace","parseFloat","WordCloud","props","callbacks","getWordTooltip","word","text","value","onWordClick","getCallback","bind","onWordMouseOut","onWordMouseOver","options","fontFamily","fontSizes","fontStyle","fontWeight","scale","deterministic","rotations","rotationAngles","transitionDuration","state","words","this","dataloader","addChangeCallback","setWords","style","height","hidden","getWordList","slice","callback","event","isActive","select","target","on","addKeywordFilter","transition","attr","forceUpdate","Component","QueryBuilder","queryString","generators","Map","window","location","search","instance","index","set","query","values","map","c","join","path","href","substr","indexOf","history","pushState","isOfTypeCategory","input","DataLoader","dataset","data","filters","dataChangeCallbacks","total_amount","setDataset","sliceFilter","loadDataset","Papa","pathname","download","header","complete","results","e","date","Date","amount","__parsed_extra","filter","onLoad","reduce","prev","curr","parseQuery","getInstance","getQuery","addGenerator","generateQueryString","listChangeCallback","split","forEach","entry","sign_location","q","v","addCategoryFilter","atob","valuesa","addAmountFilter","valuesd","addMonthFilter","console","log","filterAmount","refreshKeywordFilter","refreshCategoryFilter","refreshAmountFilter","refreshMonthFilter","category","name","btoa","update","push","length","words_set","getRecords","row","w","get","chosen_words","words_list","entries","val","sort","a","b","records","getLastFilter","category_set","cate_name","category_list","numBin","domain","previousValue","currentValue","min","max","MAX_VALUE","MIN_VALUE","allMin","allMax","bins","bin_size","i","low","high","month_string","getFullYear","padStart","getMonth","localeCompare","month_num","s","parseInt","next_month","remaining_length","createBrowserHistory","word_index","new_index","Datasets","datasets","currentDataset","dataLoader","ready","parseDataset","getQueryString","fetch","then","res","json","getDatasetTitle","startsWith","match","toString","month_name","CurrencyFormatter","color","toLocaleString","currency","DateFormatter","toDateString","DateGroupFormatter","column","key","year","month","title","RecordTable","TableHeaderCell","Cell","onClick","minimized","setHighlight","setSorting","selectedColumn","cursor","textDecoration","backgroundColor","getSelectedBackgroundColor","getBackgroundColor","summaryItems","columnName","type","columns","tableColumnExtension","wordWrapEnabled","groupSummaryItems","showInGroupFooter","alignByColumn","groupExtension","showWhenGrouped","groupingColumnExtensions","criteria","dateToYearMonth","exporter","groupWeight","searchValue","integratedSortingColumnExtensions","React","createRef","sortingState","direction","groupBy","undefined","buildGroupWeightTable","clear","getCategories","compare","prevProps","prevState","snapshot","setState","getGroupSortingState","rows","id","Paper","elevation","sorting","grouping","onValueChange","openTable","totalItems","groupItems","columnExtensions","for","formatterComponent","defaultHiddenColumnNames","cellComponent","contentComponent","showSortingControls","emptyMessageComponent","startExport","current","exportGrid","ref","onSave","workbook","sorts","isOfTypeTabs","onChange","xlsx","writeBuffer","buffer","saveAs","Blob","getCurrentDatasetName","KeywordCrumb","drawer","loader","list","getFilters","dataset_list","getDatasets","Breadcrumbs","separator","Typography","align","Tooltip","borderRadius","setYear","marginLeft","marginRight","getDatasetTotal","getColor","Drawer","anchor","open","onClose","List","ListItem","button","setCurrentDataset","ListItemIcon","ListItemText","primary","CategoryPie","pieDepth","selectedSlices","delete","lastFilter","width","dataKey","nameKey","clickSlice","label","renderCustomizedLabel","getTotal","labelLine","fill","formatter","contentStyle","padding","margin","totalValue","fontSize","y","textAnchor","cx","dominantBaseline","has","AmountSlider","updateState","getAmountBins","paddingLeft","paddingRight","getYAxisWidth","barCategoryGap","bottom","left","right","strokeDasharray","hide","orientation","tickFormatter","round","angle","position","stroke","opacity","getOpacity","Slider","onRangeChange","onChangeCommitted","onRangeChangeCommitted","valueLabelDisplay","valueLabelFormat","marks","getMarks","aria-labelledby","newValues","nVal","min_diff","getViewportWidth","getMarkPoint","step_size","document","documentElement","clientWidth","innerWidth","DateSlider","getMonthBins","names","x1","y1","x2","y2","offset","stopColor","stopOpacity","getLeftPoint","getRightPoint","display","fillOpacity","step","years","Set","d","add","ExplanationText","render","marginBottom","float","onMouseEnter","longDescription","onMouseLeave","DatasetView","graphic","generateQuery","selBox","createElement","top","body","appendChild","focus","execCommand","removeChild","alert","Container","Row","Col","onTabChange","Button","rel","aria-label","copyURL","App","getDataLoader","addEventListener","removeFilters","refreshParseQuery","updateCallbacks","CssBaseline","Boolean","hostname","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2af6a8f7.chunk.js","sourcesContent":["export function commaFormat(x: number): string {\r\n    if (Number.isNaN(x)) return \"\"\r\n    let x_str: string = x.toFixed(2)\r\n    let parts: string[] = x_str.split(\".\")\r\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n    return parts.join(\".\");\r\n}\r\n\r\nexport function KMFormat(x: number): string {\r\n    if (Number.isNaN(x)) return \"\"\r\n    let suffix = \"\";\r\n    if (Math.abs(x) >= 1000000000) {\r\n        suffix = \"B\"\r\n        x /= 1000000000;\r\n    } else if (Math.abs(x) >= 1000000) {\r\n        suffix = \"M\"\r\n        x /= 1000000;\r\n    } else if (Math.abs(x) >= 1000) {\r\n        suffix = \"K\"\r\n        x /= 1000;\r\n    }\r\n    return x.toPrecision(3) + suffix;\r\n}\r\n\r\nexport function KMFToNum(str: string): number {\r\n    let unit = 1\r\n    if (str.includes('K')) {\r\n        unit = 1000\r\n        str = str.replace('K', '')\r\n    }\r\n    if (str.includes('M')) {\r\n        unit = 1000000\r\n        str = str.replace('M', '')\r\n    }\r\n    if (str.includes('B')) {\r\n        str = str.replace('B', '')\r\n        unit = 1000000000\r\n    }\r\n    return Number.parseFloat(str) * unit\r\n}\r\n","/**\r\n * Created by TylerLiu on 2020/04/23.\r\n */\r\nimport 'd3-transition';\r\nimport { select } from 'd3-selection';\r\nimport React, { Component } from 'react';\r\nimport ReactWordcloud, { Callbacks, OptionsProp, Word } from \"react-wordcloud\";\r\nimport { KMFormat } from \"../util\";\r\nimport { DataLoaderProps } from \"../models/DataLoader\";\r\n\r\ninterface WordCloudProps extends DataLoaderProps {\r\n  hidden?: boolean\r\n}\r\n\r\nexport default class WordCloud extends Component<WordCloudProps> {\r\n  private callbacks: Callbacks = {\r\n    getWordTooltip: (word: Word) => `Descriptions containing \"${word.text}\" total $${KMFormat(word.value)}`,\r\n    onWordClick: this.getCallback('onWordClick').bind(this),\r\n    onWordMouseOut: this.getCallback('onWordMouseOut').bind(this),\r\n    onWordMouseOver: this.getCallback('onWordMouseOver').bind(this),\r\n  };\r\n\r\n  private options: OptionsProp = {\r\n    fontFamily: 'impact',\r\n    fontSizes: [12, 60],\r\n    fontStyle: 'normal',\r\n    fontWeight: 'normal',\r\n    scale: 'log',\r\n    //spiral: 'archimedean',\r\n    deterministic: true,\r\n\r\n    rotations: 4,\r\n    rotationAngles: [-45, 90],\r\n\r\n    transitionDuration: 200,\r\n  }\r\n\r\n  constructor(props: DataLoaderProps) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      words: [{ text: 'Loading...', value: 100 }]\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.dataloader.addChangeCallback(this.setWords.bind(this))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ height: '60vh' }} hidden={this.props.hidden}>\r\n        {(this.props.hidden || false) ? null : (\r\n          <ReactWordcloud callbacks={this.callbacks} words={this.props.dataloader.getWordList().slice(0, 80)}\r\n            options={this.options} />\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  getCallback(callback: string) {\r\n    return (word: Word, event: MouseEvent | undefined) => {\r\n      const isActive = callback !== 'onWordMouseOut';\r\n      // @ts-ignore\r\n      const text = select(event.target);\r\n      text\r\n        .on('click', (() => {\r\n          if (isActive) {\r\n            this.props.dataloader.addKeywordFilter(word.text);\r\n          }\r\n        }))\r\n        .transition()\r\n        .attr('background', 'white')\r\n        .attr('text-decoration', isActive ? 'underline' : 'none');\r\n    };\r\n  }\r\n\r\n  setWords() {\r\n    this.forceUpdate()\r\n  }\r\n}\r\n","export default class QueryBuilder {\r\n\r\n  private static instance: QueryBuilder | null = null\r\n  private queryString: string\r\n  private generators: Map<number, () => string> = new Map()\r\n\r\n  static getInstance() {\r\n    if (this.instance === null) this.instance = new QueryBuilder()\r\n    return this.instance\r\n  }\r\n\r\n\r\n  private constructor() {\r\n    this.queryString = window.location.search.replace('?', '')\r\n  }\r\n\r\n  getQuery() {\r\n    return this.queryString\r\n  }\r\n\r\n  addGenerator(callback: () => string, index: number) {\r\n    this.generators.set(index, callback)\r\n  }\r\n\r\n  update() {\r\n    let strings: string[] = [...this.generators.values()].map((c) => c())\r\n    const query = strings.join('&')\r\n\r\n    let path = window.location.href\r\n    if (path.includes('?')) path = path.substr(0, path.indexOf('?'))\r\n    window.history.pushState({ path: path + '?' + query }, '', path + '?' + query);\r\n  }\r\n}\r\n","import { KMFormat, KMFToNum } from \"../util\";\r\nimport * as Papa from 'papaparse';\r\nimport QueryBuilder from \"./QueryBuilder\";\r\nimport {createBrowserHistory} from 'history';\r\n\r\ninterface DataEntry {\r\n  date: Date,\r\n  fund: string,\r\n  division: string,\r\n  department: string,\r\n  gl: string,\r\n  event: string,\r\n  description: string,\r\n  amount: number,\r\n  words: string[],\r\n  id?: number\r\n}\r\n\r\nexport interface AmountBin {\r\n  low: number\r\n  high: number\r\n  value: number\r\n  name: string\r\n}\r\n\r\nexport type Category = 'fund' | 'division' | 'department' | 'gl' | 'event'\r\nexport function isOfTypeCategory(input: string): input is Category {\r\n  return ['fund', 'division', 'department', 'gl', 'event'].includes(input);\r\n}\r\n\r\nexport interface WordEntry {\r\n  text: string,\r\n  value: number\r\n}\r\n\r\ninterface Filter {\r\n  category: string,\r\n  name: string,\r\n  index: DataEntry[],\r\n  amount: number,\r\n}\r\n\r\nexport interface DataLoaderProps {\r\n  dataloader: DataLoader,\r\n  style?: Object,\r\n}\r\n\r\nexport default class DataLoader {\r\n\r\n  private data: DataEntry[] = []\r\n  private filters: Filter[] = []\r\n  private dataChangeCallbacks: (() => void)[] = []\r\n  private total_amount: number = 0\r\n  private dataset: string | null = null\r\n\r\n  constructor(dataset: string | null) {\r\n    this.dataset = dataset\r\n    this.setDataset(dataset)\r\n  }\r\n\r\n  setDataset(dataset: string | null) {\r\n    this.sliceFilter(0)\r\n    this.loadDataset(dataset)\r\n  }\r\n\r\n  getDataset(): string | null {\r\n    return this.dataset\r\n  }\r\n\r\n  private loadDataset(dataset: string | null) {\r\n    if (dataset === null) return\r\n    Papa.parse(window.location.pathname + \"/expense_summary_\" + dataset + \".csv\",\r\n      {\r\n        download: true,\r\n        header: true,\r\n        complete: (results) => {\r\n          this.data = results.data.map((e) => {\r\n            e.date = new Date(Number.parseFloat(e.date) * 1000)\r\n            e.amount = Number.parseFloat(e.amount)\r\n            e.words = e.__parsed_extra || []\r\n            return e\r\n          }).filter(e => !Number.isNaN(e.amount))\r\n\r\n          this.onLoad()\r\n        }\r\n      })\r\n  }\r\n\r\n  private onLoad() {\r\n    this.total_amount = this.data.reduce((prev, curr) => prev + curr.amount, 0)\r\n    this.parseQuery(QueryBuilder.getInstance().getQuery())\r\n    QueryBuilder.getInstance().addGenerator(this.generateQueryString.bind(this), 2)\r\n    this.listChangeCallback()\r\n  }\r\n\r\n  removeFilters() {\r\n    this.filters = [];\r\n  }\r\n\r\n  parseQuery(query: string) {\r\n    if (query[0] === '?') query = query.slice(1)\r\n    const callbacks = this.dataChangeCallbacks\r\n    this.dataChangeCallbacks = []\r\n    try {\r\n      query.split('&').forEach(entry => {\r\n        if (!entry.includes('=')) return\r\n        const sign_location = entry.indexOf('=')\r\n        const q = entry.substr(0, sign_location)\r\n        const v = entry.substr(sign_location + 1)\r\n        switch (q) {\r\n          case 'keyword':\r\n            this.addKeywordFilter(v)\r\n            break\r\n          case 'fund':\r\n          case 'division':\r\n          case 'department':\r\n          case 'gl':\r\n          case 'event':\r\n            this.addCategoryFilter(q, atob(v))\r\n            break\r\n          case 'amount':\r\n            if (!v.includes('..')) return\r\n            const valuesa = v.split('..').map(e => KMFToNum(e))\r\n            this.addAmountFilter(valuesa[0], valuesa[1])\r\n            break\r\n          case 'date':\r\n            if (!v.includes('..')) return\r\n            const valuesd = v.split('..')\r\n            this.addMonthFilter(valuesd[0], valuesd[1])\r\n            break\r\n        }\r\n      })\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n    this.dataChangeCallbacks = callbacks\r\n  }\r\n\r\n  refreshParseQuery(query: string) {\r\n    if (query[0] === '?') query = query.slice(1)\r\n    const callbacks = this.dataChangeCallbacks\r\n    this.dataChangeCallbacks = []\r\n    try {\r\n      var filterAmount = 0\r\n      query.split('&').forEach(entry => {\r\n        if (!entry.includes('=')) return\r\n        const sign_location = entry.indexOf('=')\r\n        const q = entry.substr(0, sign_location)\r\n        const v = entry.substr(sign_location + 1)\r\n        switch (q) {\r\n          case 'keyword':\r\n            this.refreshKeywordFilter(v)\r\n            filterAmount++\r\n            break\r\n          case 'fund':\r\n          case 'division':\r\n          case 'department':\r\n          case 'gl':\r\n          case 'event':\r\n            filterAmount++\r\n            this.refreshCategoryFilter(q, atob(v))\r\n            break\r\n          case 'amount':\r\n            if (!v.includes('..')) return\r\n            filterAmount++\r\n            const valuesa = v.split('..').map(e => KMFToNum(e))\r\n            this.refreshAmountFilter(valuesa[0], valuesa[1])\r\n            break\r\n          case 'date':\r\n            if (!v.includes('..')) return\r\n            filterAmount++\r\n            const valuesd = v.split('..')\r\n            this.refreshMonthFilter(valuesd[0], valuesd[1])\r\n            break\r\n        }\r\n      })\r\n      if (filterAmount == 1) this.filters = []\r\n    } catch (e) {\r\n      console.log(e)\r\n    }\r\n    this.dataChangeCallbacks = callbacks\r\n  }\r\n\r\n  private generateQueryString() {\r\n    const strings = this.filters.map((curr) => {\r\n      switch (curr.category) {\r\n        case 'keyword':\r\n          return 'keyword=' + curr.name\r\n        case 'amount':\r\n          return 'amount=' + curr.name.replace('~', '..')\r\n        case 'date':\r\n          return 'date=' + curr.name.replace('~', '..')\r\n        default:\r\n          return curr.category + '=' + btoa(curr.name)\r\n      }\r\n    })\r\n    return strings.join('&')\r\n  }\r\n\r\n  updateCallbacks() {\r\n    this.dataChangeCallbacks.forEach(c => c())\r\n  }\r\n\r\n  private listChangeCallback() {\r\n    this.dataChangeCallbacks.forEach(c => c())\r\n    QueryBuilder.getInstance().update()\r\n  }\r\n\r\n  addChangeCallback(callback: () => void) {\r\n    this.dataChangeCallbacks.push(callback)\r\n  }\r\n\r\n  getRecords(): DataEntry[] {\r\n    if (this.data.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    if (this.filters.length === 0) {\r\n      return this.data\r\n    }\r\n\r\n    return this.filters[this.filters.length - 1].index\r\n  }\r\n\r\n  getWordList(): WordEntry[] {\r\n    if (this.data.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    let words_set = new Map<string, number>()\r\n    this.getRecords().forEach(row => {\r\n      row.words.forEach(w => {\r\n        words_set.set(w, (words_set.get(w) || 0) + row.amount);\r\n      })\r\n    })\r\n\r\n    const chosen_words = this.filters.filter(e => e.category === 'keyword').map(e => e.name)\r\n\r\n    let words_list: WordEntry[] = []\r\n    for (let [word, val] of words_set.entries()) {\r\n      if (!chosen_words.includes(word))\r\n        words_list.push({ text: word, value: val })\r\n    }\r\n\r\n    words_list.sort((a, b) => b.value - a.value)\r\n\r\n    return words_list\r\n  }\r\n\r\n  getCategories(category: Category): WordEntry[] {\r\n    if (this.data.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    let records: DataEntry[];\r\n    if (this.getLastFilter()?.category === category) {\r\n      records = this.filters.length >= 2 ? this.filters[this.filters.length - 2].index : this.data\r\n    } else {\r\n      records = this.getRecords()\r\n    }\r\n\r\n    let category_set = new Map<string, number>()\r\n    records.forEach(row => {\r\n      const cate_name = row[category]\r\n      category_set.set(cate_name, (category_set.get(cate_name) || 0) + row.amount);\r\n    })\r\n\r\n    let category_list: WordEntry[] = []\r\n    for (let [word, val] of category_set.entries()) {\r\n      category_list.push({ text: word, value: val })\r\n    }\r\n\r\n    category_list.sort((a, b) => a.value - b.value)\r\n\r\n    return category_list\r\n  }\r\n\r\n  getAmountBins(numBin: number): { data: AmountBin[], domain: [number, number] } {\r\n    if (this.data.length === 0) {\r\n      return { data: [], domain: [0, 1] }\r\n    }\r\n\r\n    let records: DataEntry[];\r\n    let domain: [number, number] | null = null;\r\n    if (this.filters.length !== 0 && this.filters[this.filters.length - 1].category === 'amount') {\r\n      records = this.filters.length >= 2 ? this.filters[this.filters.length - 2].index : this.data\r\n      const values = this.filters[this.filters.length - 1].name.split('~').map(e => KMFToNum(e))\r\n      domain = values as [number, number]\r\n    } else {\r\n      records = this.getRecords()\r\n    }\r\n    let [allMin, allMax] = records.reduce(((previousValue, currentValue) =>\r\n      [Math.min(previousValue[0], currentValue.amount),\r\n      Math.max(previousValue[1], currentValue.amount)]), [Number.MAX_VALUE, Number.MIN_VALUE])\r\n\r\n    if (domain === null) domain = [allMin, allMax]\r\n    allMax += 0.001\r\n\r\n    let bins: AmountBin[] = []\r\n    let bin_size = (allMax - allMin) / numBin\r\n    for (let i = 0; i < numBin; i++) {\r\n      bins.push({\r\n        low: allMin + i * bin_size, high: allMin + (i + 1) * bin_size,\r\n        value: 0, name: KMFormat(allMin + (i + 0.5) * bin_size)\r\n      })\r\n    }\r\n\r\n    records.forEach((e) => {\r\n      bins.forEach((b) => {\r\n        if (b.low <= e.amount && e.amount < b.high)\r\n          b.value += e.amount\r\n      })\r\n    })\r\n\r\n    return { data: bins, domain: domain }\r\n  }\r\n\r\n  getMonthBins(): { data: WordEntry[], domain: [string, string] } {\r\n    if (this.data.length === 0) {\r\n      return { data: [{ text: '0000-01', value: 0 }], domain: ['0000-01', '0000-01'] }\r\n    }\r\n\r\n    let records: DataEntry[];\r\n    let domain: [string, string] | null = null;\r\n    if (this.filters.length !== 0 && this.filters[this.filters.length - 1].category === 'date') {\r\n      records = this.filters.length >= 2 ? this.filters[this.filters.length - 2].index : this.data\r\n      const values = this.filters[this.filters.length - 1].name.split('~')\r\n      domain = values as [string, string]\r\n    } else {\r\n      records = this.getRecords()\r\n    }\r\n    let [allMin, allMax] = records.reduce((previousValue, currentValue) => {\r\n      const month_string = (currentValue.date.getFullYear() + \"\").padStart(4, '0') + '-' + ((currentValue.date.getMonth() + 1) + \"\").padStart(2, \"0\")\r\n      return [previousValue[0].localeCompare(month_string) < 0 ? previousValue[0] : month_string,\r\n      previousValue[1].localeCompare(month_string) > 0 ? previousValue[1] : month_string]\r\n    }, ['9999-99', '0000-00'])\r\n\r\n    if (domain === null) domain = [allMin, allMax]\r\n\r\n    let bins: Map<string, number> = new Map()\r\n    records.forEach((e) => {\r\n      const month_string = (e.date.getFullYear() + \"\").padStart(4, \"0\") + '-' + ((e.date.getMonth() + 1) + \"\").padStart(2, \"0\")\r\n      bins.set(month_string, (bins.get(month_string) || 0) + e.amount)\r\n    })\r\n\r\n    let data: WordEntry[] = [...bins.entries()].map((e) => ({ text: e[0], value: e[1] }))\r\n      .sort((a, b) => (a.text.localeCompare(b.text)))\r\n\r\n    while (data.length !== 0 && data.length < 12) {\r\n      let month_num = data[data.length - 1].text.split('-').map((s) => Number.parseInt(s))\r\n      if (month_num[1] !== 12) month_num[1]++\r\n      else month_num = [month_num[0] + 1, 1]\r\n      let next_month = (month_num[0] + \"\").padStart(4, \"0\") + '-' + (month_num[1] + \"\").padStart(2, \"0\")\r\n      data.push({ text: next_month, value: 0 })\r\n    }\r\n\r\n    return { data: data, domain: domain }\r\n  }\r\n\r\n  getTotal(): number {\r\n    if (this.filters.length === 0) {\r\n      return this.total_amount\r\n    }\r\n    return this.filters[this.filters.length - 1].amount\r\n  }\r\n\r\n  getDatasetTotal(): number {\r\n    return this.total_amount\r\n  }\r\n\r\n  getFilters() {\r\n    return this.filters\r\n  }\r\n\r\n  getLastFilter() {\r\n    if (this.filters.length === 0)\r\n      return null;\r\n    else return this.filters[this.filters.length - 1]\r\n  }\r\n\r\n  sliceFilter(remaining_length: number) {\r\n    let history = createBrowserHistory();\r\n    history.push(window.location.href);\r\n    this.filters = this.filters.slice(0, remaining_length)\r\n    this.listChangeCallback()\r\n  }\r\n\r\n  addKeywordFilter(word: string) {\r\n    if (this.data.length === 0) return\r\n    if (this.filters.reduce((prev, curr) => prev || (curr.category === 'keyword' && curr.name === word), false))\r\n      return\r\n\r\n    let word_index: DataEntry[]\r\n    if (this.filters.length !== 0) {\r\n      const last_index = this.filters[this.filters.length - 1].index\r\n      word_index = last_index.filter((e) => e.words.includes(word))\r\n    } else {\r\n      word_index = this.data.filter(e => e.words.includes(word))\r\n    }\r\n\r\n    let history = createBrowserHistory();\r\n    history.push(window.location.href);\r\n\r\n    this.filters.push({\r\n      category: 'keyword',\r\n      name: word,\r\n      index: word_index,\r\n      amount: word_index\r\n        .reduce((prev, curr) => prev + curr.amount, 0)\r\n    })\r\n\r\n    this.listChangeCallback()\r\n  }\r\n\r\n  refreshKeywordFilter(word: string) {\r\n    if (this.data.length === 0) return\r\n    if (this.filters.reduce((prev, curr) => prev || (curr.category === 'keyword' && curr.name === word), false))\r\n      return\r\n\r\n    let word_index: DataEntry[]\r\n    if (this.filters.length !== 0) {\r\n      const last_index = this.filters[this.filters.length - 1].index\r\n      word_index = last_index.filter((e) => e.words.includes(word))\r\n    } else {\r\n      word_index = this.data.filter(e => e.words.includes(word))\r\n    }\r\n\r\n    this.filters.push({\r\n      category: 'keyword',\r\n      name: word,\r\n      index: word_index,\r\n      amount: word_index\r\n        .reduce((prev, curr) => prev + curr.amount, 0)\r\n    })\r\n\r\n    this.listChangeCallback()\r\n  }\r\n\r\n  addCategoryFilter(category: Category, value: string) {\r\n    if (this.data.length === 0) return\r\n    if (this.filters.reduce((prev, curr) => prev || (curr.category === category && curr.name === value), false))\r\n      return\r\n\r\n    if (this.getLastFilter()?.category === category) {\r\n      this.filters = this.filters.slice(0, -1)\r\n    }\r\n\r\n    let new_index: DataEntry[]\r\n    if (this.filters.length !== 0) {\r\n      const last_index = this.filters[this.filters.length - 1].index\r\n      // @ts-ignore\r\n      new_index = last_index.filter((e) => (e[category] === value))\r\n    } else {\r\n      // @ts-ignore\r\n      new_index = this.data.filter(e => (e[category] === value))\r\n    }\r\n\r\n    let history = createBrowserHistory();\r\n    history.push(window.location.href);\r\n\r\n    this.filters.push({\r\n      category: category,\r\n      name: value,\r\n      index: new_index,\r\n      amount: new_index.reduce((prev, curr) => prev + curr.amount, 0)\r\n    })\r\n\r\n    this.listChangeCallback()\r\n  }\r\n\r\n  refreshCategoryFilter(category: Category, value: string) {\r\n    if (this.data.length === 0) return\r\n    if (this.filters.reduce((prev, curr) => prev || (curr.category === category && curr.name === value), false))\r\n      return\r\n\r\n    if (this.getLastFilter()?.category === category) {\r\n      this.filters = this.filters.slice(0, -1)\r\n    }\r\n\r\n    let new_index: DataEntry[]\r\n    if (this.filters.length !== 0) {\r\n      const last_index = this.filters[this.filters.length - 1].index\r\n      // @ts-ignore\r\n      new_index = last_index.filter((e) => (e[category] === value))\r\n    } else {\r\n      // @ts-ignore\r\n      new_index = this.data.filter(e => (e[category] === value))\r\n    }\r\n\r\n    this.filters.push({\r\n      category: category,\r\n      name: value,\r\n      index: new_index,\r\n      amount: new_index.reduce((prev, curr) => prev + curr.amount, 0)\r\n    })\r\n\r\n    this.listChangeCallback()\r\n  }\r\n\r\n  removeCategoryFilter(category: Category, value: string) {\r\n    if (this.data.length === 0) return\r\n    if (this.filters.reduce((prev, curr) => prev || (curr.category === category && curr.name === value), false))\r\n      return\r\n\r\n    if (this.getLastFilter()?.category === category) {\r\n      this.filters = this.filters.slice(0, -1)\r\n    }\r\n\r\n    let new_index: DataEntry[]\r\n    if (this.filters.length !== 0) {\r\n      const last_index = this.filters[this.filters.length - 1].index\r\n      // @ts-ignore\r\n      new_index = last_index.filter((e) => (e[category] === value))\r\n    } else {\r\n      // @ts-ignore\r\n      new_index = this.data.filter(e => (e[category] === value))\r\n    }\r\n\r\n    let history = createBrowserHistory();\r\n    history.push(window.location.href);\r\n\r\n    this.filters.push({\r\n      category: category,\r\n      name: value,\r\n      index: new_index,\r\n      amount: new_index.reduce((prev, curr) => prev + curr.amount, 0)\r\n    })\r\n\r\n    this.listChangeCallback()\r\n  }\r\n\r\n  addAmountFilter(low: number, high: number) {\r\n    if (this.data.length === 0) return\r\n\r\n    if (this.filters.length > 0 && this.filters[this.filters.length - 1].category === 'amount') {\r\n      this.filters = this.filters.slice(0, -1)\r\n    }\r\n    const last_index = this.filters.length > 0 ? this.filters[this.filters.length - 1].index : this.data\r\n    const new_index = last_index\r\n      .filter((e) => (low <= e.amount && e.amount <= high))\r\n\r\n    let history = createBrowserHistory();\r\n    history.push(window.location.href);\r\n\r\n    this.filters.push({\r\n      category: 'amount',\r\n      name: KMFormat(low) + \"~\" + KMFormat(high),\r\n      index: new_index,\r\n      amount: new_index\r\n        .reduce((prev, curr) => prev + curr.amount, 0)\r\n    })\r\n\r\n    this.listChangeCallback()\r\n  }\r\n\r\n  refreshAmountFilter(low: number, high: number) {\r\n    if (this.data.length === 0) return\r\n\r\n    if (this.filters.length > 0 && this.filters[this.filters.length - 1].category === 'amount') {\r\n      this.filters = this.filters.slice(0, -1)\r\n    }\r\n    const last_index = this.filters.length > 0 ? this.filters[this.filters.length - 1].index : this.data\r\n    const new_index = last_index\r\n      .filter((e) => (low <= e.amount && e.amount <= high))\r\n\r\n    this.filters.push({\r\n      category: 'amount',\r\n      name: KMFormat(low) + \"~\" + KMFormat(high),\r\n      index: new_index,\r\n      amount: new_index\r\n        .reduce((prev, curr) => prev + curr.amount, 0)\r\n    })\r\n\r\n    this.listChangeCallback()\r\n  }\r\n\r\n  addMonthFilter(low: string, high: string) {\r\n    if (this.data.length === 0) return\r\n\r\n    if (this.filters.length > 0 && this.filters[this.filters.length - 1].category === 'date') {\r\n      this.filters = this.filters.slice(0, -1)\r\n    }\r\n    const last_index = this.filters.length > 0 ? this.filters[this.filters.length - 1].index : this.data\r\n    const new_index = last_index\r\n      .filter((e) => {\r\n        const month_string = (e.date.getFullYear() + \"\").padStart(4, '0') + '-' + ((e.date.getMonth() + 1) + \"\").padStart(2, '0')\r\n        return low.localeCompare(month_string) <= 0 && month_string.localeCompare(high) <= 0\r\n      })\r\n\r\n    let history = createBrowserHistory();\r\n    history.push(window.location.href);\r\n\r\n    this.filters.push({\r\n      category: 'date',\r\n      name: low + \"~\" + high,\r\n      index: new_index,\r\n      amount: new_index\r\n        .reduce((prev, curr) => prev + curr.amount, 0)\r\n    })\r\n\r\n    this.listChangeCallback()\r\n  }\r\n\r\n  refreshMonthFilter(low: string, high: string) {\r\n    if (this.data.length === 0) return\r\n\r\n    if (this.filters.length > 0 && this.filters[this.filters.length - 1].category === 'date') {\r\n      this.filters = this.filters.slice(0, -1)\r\n    }\r\n    const last_index = this.filters.length > 0 ? this.filters[this.filters.length - 1].index : this.data\r\n    const new_index = last_index\r\n      .filter((e) => {\r\n        const month_string = (e.date.getFullYear() + \"\").padStart(4, '0') + '-' + ((e.date.getMonth() + 1) + \"\").padStart(2, '0')\r\n        return low.localeCompare(month_string) <= 0 && month_string.localeCompare(high) <= 0\r\n      })\r\n\r\n    this.filters.push({\r\n      category: 'date',\r\n      name: low + \"~\" + high,\r\n      index: new_index,\r\n      amount: new_index\r\n        .reduce((prev, curr) => prev + curr.amount, 0)\r\n    })\r\n\r\n    this.listChangeCallback()\r\n  }\r\n}\r\n","import QueryBuilder from \"./QueryBuilder\";\r\nimport DataLoader from \"./DataLoader\";\r\n\r\nexport default class Datasets {\r\n\r\n  private static instance: Datasets | null = null\r\n  private datasets: string[] = []\r\n  private currentDataset: string | null = null\r\n  private callbacks: (() => void)[] = []\r\n  private dataLoader: DataLoader\r\n  private ready: boolean = false\r\n\r\n  static getInstance() {\r\n    if (this.instance === null) this.instance = new Datasets()\r\n    return this.instance\r\n  }\r\n\r\n\r\n  private constructor() {\r\n    this.parseDataset(QueryBuilder.getInstance().getQuery())\r\n    this.dataLoader = new DataLoader(this.currentDataset)\r\n    QueryBuilder.getInstance().addGenerator(this.getQueryString.bind(this), 0)\r\n    fetch(window.location.pathname + \"/datasets.json\")\r\n      .then(res => res.json())\r\n      .then((res) => {\r\n        this.datasets = res\r\n        this.ready = true\r\n        if (this.currentDataset === null) this.currentDataset = this.datasets[0]\r\n        this.dataLoader.setDataset(this.currentDataset)\r\n        this.callbacks.forEach(c => c())\r\n      })\r\n  }\r\n\r\n  addChangeCallback(callback: () => void) {\r\n    this.callbacks.push(callback)\r\n  }\r\n\r\n  getCurrentDataset() {\r\n    if (this.currentDataset != null) return this.currentDataset\r\n    return undefined\r\n  }\r\n\r\n  getCurrentDatasetName() {\r\n    if (this.currentDataset != null) return Datasets.getDatasetTitle(this.currentDataset)\r\n    return undefined\r\n  }\r\n\r\n  getDatasets() {\r\n    if (this.ready) return this.datasets\r\n    return undefined\r\n  }\r\n\r\n  getDatasetNames() {\r\n    if (this.ready) return this.datasets.map(Datasets.getDatasetTitle)\r\n    return undefined\r\n  }\r\n\r\n  getDataLoader() {\r\n    return this.dataLoader\r\n  }\r\n\r\n  setCurrentDataset(name: string) {\r\n    this.currentDataset = name\r\n    QueryBuilder.getInstance().update()\r\n    this.dataLoader.setDataset(name)\r\n    this.callbacks.forEach(c => c())\r\n  }\r\n\r\n  private parseDataset(query: string) {\r\n    if (query[0] === '?') query = query.slice(1)\r\n    const res = query.split('&').filter((e) => e.startsWith('d='))\r\n    if (res.length !== 0)\r\n      this.currentDataset = res[0].substr(2)\r\n  }\r\n\r\n  private getQueryString(): string {\r\n    if (this.currentDataset === null) return \"\"\r\n    return 'd=' + this.currentDataset\r\n  }\r\n\r\n  static getDatasetTitle(name: string): string {\r\n    if (name.match(/^\\d*$/)) {\r\n      const year = Number.parseInt(name)\r\n      return name + '-' + (year + 1).toString()\r\n    } else return name\r\n  }\r\n}\r\n","/**\r\n * Created by TylerLiu on 2018/12/23.\r\n */\r\nimport React, { Component } from 'react';\r\nimport {\r\n  Grid,\r\n  VirtualTable,\r\n  TableHeaderRow,\r\n  TableSummaryRow,\r\n  ExportPanel,\r\n  TableColumnVisibility, Toolbar, TableGroupRow, GroupingPanel, SearchPanel\r\n} from \"@devexpress/dx-react-grid-material-ui\";\r\nimport { Category, DataLoaderProps } from \"../models/DataLoader\";\r\nimport {\r\n  Column, GroupingState, GroupSummaryItem, IntegratedFiltering, IntegratedGrouping,\r\n  IntegratedSorting,\r\n  IntegratedSummary, SearchState,\r\n  Sorting, TableColumnResizing,\r\n  SortingState, SummaryItem,TableColumnWidthInfo,\r\n  SummaryState, TableGroupRow as TableGroupRowBase, FilteringState\r\n} from \"@devexpress/dx-react-grid\";\r\nimport { Paper } from \"@material-ui/core\";\r\nimport { DataTypeProvider } from \"@devexpress/dx-react-grid\";\r\nimport { GridExporter } from \"@devexpress/dx-react-grid-export\";\r\nimport { saveAs } from \"file-saver\";\r\nimport Datasets from \"../models/Datasets\";\r\nimport { Workbook } from \"exceljs\";\r\nimport { isOfTypeTabs, TabTypes } from \"./DatasetView\";\r\n\r\nconst month_name = ['January', 'February', 'March', 'April', 'May', 'June',\r\n  'July', 'August', 'September', 'October', 'November', 'December']\r\n\r\nconst CurrencyFormatter = ({ value }: { value: number }) => (\r\n  <span style={{ color: 'blue' }}>\r\n    {value.toLocaleString('en-US', { style: 'currency', currency: 'USD' })}\r\n  </span>\r\n);\r\n\r\nconst DateFormatter = ({ value }: { value: Date }) => (\r\n  <span>{value.toDateString()}</span>\r\n);\r\n\r\nconst DateGroupFormatter = ({ column, row }: TableGroupRowBase.ContentProps) => {\r\n  if (column.name === 'date') {\r\n    row.key.toString()\r\n    const [year, month] = row.key.toString().split('-');\r\n    return <span><strong>Date:</strong> {month_name[Number.parseInt(month) - 1]} {year}</span>\r\n  } else return (\r\n    <span><strong>{column.title}:</strong> {row.value}</span>\r\n  )\r\n};\r\n\r\nconst dateToYearMonth = (value: Date) =>\r\n  value.getFullYear().toString().padStart(4, '0') + '-' + (value.getMonth() + 1).toString().padStart(2, '0')\r\n\r\ninterface RecordTableState {\r\n  sortingState: Sorting[]\r\n  groupBy: Category | \"date\" | undefined\r\n  selectedColumn: string\r\n  searchValue: string\r\n}\r\n\r\ninterface RecordTableProps extends DataLoaderProps {\r\n  hidden?: boolean | undefined;\r\n  onChange: (a: TabTypes) => void;\r\n  minimized: boolean\r\n  openTable: () => void\r\n}\r\n\r\nexport default class RecordTable extends Component<RecordTableProps, RecordTableState> {\r\n\r\n  private TableHeaderCell = (props: TableHeaderRow.CellProps) => (\r\n    <TableHeaderRow.Cell\r\n      {...props}\r\n      onClick={() => this.props.minimized ? this.setHighlight(props.column) : this.setSorting(props.column)}\r\n      style={!this.props.minimized ?\r\n          { cursor: 'pointer', fontWeight: \"bold\", backgroundColor: this.getBackgroundColor(props.column.name), color: \"Black\" }\r\n        : props.column.name === this.state.selectedColumn ?\r\n          { cursor: 'pointer', textDecoration: 'underline', fontWeight: \"bold\", backgroundColor: this.getSelectedBackgroundColor(props.column.name), color: \"White\" }\r\n        :\r\n          { cursor: 'pointer', fontWeight: \"bold\", backgroundColor: this.getBackgroundColor(props.column.name), color: \"Black\" }}\r\n    />\r\n  );\r\n\r\n  private getBackgroundColor(category: string): string {\r\n    switch (category) {\r\n      case \"fund\":\r\n        return \"#FFDBDB\" // Red\r\n      case \"division\":\r\n        return \"#FFEFD4\" // Orange\r\n      case \"department\":\r\n        return \"#E6FFCC\" // Green\r\n      case \"event\":\r\n        return \"#E6F7FF\" // Blue\r\n      case \"gl\":\r\n        return \"#FFE6FF\" // Purple\r\n      default:\r\n        return \"#E6E6E6\" // Gray\r\n    }\r\n  }\r\n\r\n  private getSelectedBackgroundColor(category: string): string {\r\n    switch (category) {\r\n      case \"fund\":\r\n        return \"#9E0000\" // Red\r\n      case \"division\":\r\n        return \"#C25A00\" // Orange\r\n      case \"department\":\r\n        return \"#0C5700\" // Green\r\n      case \"event\":\r\n        return \"#001E85\" // Blue\r\n      case \"gl\":\r\n        return \"#600078\" // Purple\r\n      default:\r\n        return \"#2F2F2F\" // Gray\r\n    }\r\n  }\r\n\r\n  private readonly summaryItems: SummaryItem[] = [\r\n    { columnName: 'date', type: 'count' },\r\n    { columnName: 'amount', type: 'sum' },\r\n  ]\r\n\r\n  private readonly columns: Column[] = [\r\n    { title: 'Row', name: 'id' },\r\n    { title: 'Posted Date', name: 'date' },\r\n    { title: 'Description', name: 'description' },\r\n    { title: 'Amount', name: 'amount' },\r\n    { title: 'Fund', name: 'fund' },\r\n    { title: 'Division', name: 'division' },\r\n    { title: 'Department', name: 'department' },\r\n    { title: 'Event', name: 'event' },\r\n    { title: 'GL', name: 'gl' },\r\n  ]\r\n\r\n  private readonly tableColumnExtension: VirtualTable.ColumnExtension[] = [\r\n    { columnName: 'id', wordWrapEnabled: true },\r\n    { columnName: 'date', wordWrapEnabled: true },\r\n    { columnName: 'department', wordWrapEnabled: true },\r\n    { columnName: 'fund', wordWrapEnabled: true },\r\n    { columnName: 'division', wordWrapEnabled: true },\r\n    { columnName: 'event', wordWrapEnabled: true },\r\n    { columnName: 'gl', wordWrapEnabled: true },\r\n    { columnName: 'description', wordWrapEnabled: true },\r\n    { columnName: 'amount', wordWrapEnabled: true },\r\n  ]\r\n\r\n  private readonly groupSummaryItems: GroupSummaryItem[] = [\r\n    { columnName: 'amount', type: 'sum', showInGroupFooter: false, alignByColumn: true },\r\n    { columnName: 'amount', type: 'sum', showInGroupFooter: true },\r\n    { columnName: 'date', type: 'count', showInGroupFooter: true },\r\n  ]\r\n\r\n  private readonly groupExtension: TableGroupRow.ColumnExtension[] = [\r\n    { columnName: 'id', showWhenGrouped: true },\r\n    { columnName: 'date', showWhenGrouped: true },\r\n    { columnName: 'department', showWhenGrouped: true },\r\n    { columnName: 'fund', showWhenGrouped: true },\r\n    { columnName: 'division', showWhenGrouped: true },\r\n    { columnName: 'event', showWhenGrouped: true },\r\n    { columnName: 'gl', showWhenGrouped: true },\r\n    { columnName: 'description', showWhenGrouped: true },\r\n    { columnName: 'amount', showWhenGrouped: true },\r\n  ]\r\n\r\n  private groupingColumnExtensions: IntegratedGrouping.ColumnExtension[] = [\r\n    {\r\n      columnName: 'date', criteria: (value) => {\r\n        if (value instanceof Date) {\r\n          const key = dateToYearMonth(value)\r\n          return { key: key }\r\n        } else return { key: \"\" };\r\n      }\r\n    }\r\n  ]\r\n\r\n\r\n  private readonly exporter: React.RefObject<{ exportGrid: (options?: object) => void }>\r\n\r\n  private groupWeight: Map<string, number>\r\n\r\n  private searchValue: string = ''\r\n\r\n  private integratedSortingColumnExtensions: IntegratedSorting.ColumnExtension[] = []\r\n\r\n  constructor(props: RecordTableProps) {\r\n    super(props);\r\n    this.exporter = React.createRef()\r\n\r\n    this.state = {\r\n      sortingState: [{ columnName: 'id', direction: 'asc' }],\r\n      groupBy: undefined,\r\n      selectedColumn: 'description',\r\n      searchValue: ''\r\n    }\r\n\r\n    this.groupWeight = new Map<string, number>()\r\n    if (this.state.groupBy !== undefined && this.state.groupBy !== 'date') {\r\n      this.buildGroupWeightTable()\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.dataloader.addChangeCallback(() => {\r\n      this.buildGroupWeightTable();\r\n      this.forceUpdate()\r\n    })\r\n  }\r\n\r\n  private buildGroupWeightTable() {\r\n    if (this.state.groupBy !== undefined && this.state.groupBy !== 'date') {\r\n      this.groupWeight.clear()\r\n      this.props.dataloader.getCategories(this.state.groupBy).forEach(entry => {\r\n        this.groupWeight.set(entry.text, entry.value)\r\n      })\r\n\r\n      this.integratedSortingColumnExtensions = [\r\n        {\r\n          columnName: this.state.groupBy,\r\n          compare: (a, b) => (this.groupWeight?.get(a) || 0) - (this.groupWeight?.get(b) || 0)\r\n        },\r\n      ]\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Readonly<RecordTableProps>, prevState: Readonly<RecordTableState>, snapshot?: any): void {\r\n    if (this.state.groupBy != prevState.groupBy) {\r\n      this.buildGroupWeightTable()\r\n      this.setState({\r\n        sortingState: this.getGroupSortingState(),\r\n      })\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    if (this.state.searchValue != '' && this.props.minimized)\r\n      this.setState({searchValue: ''});\r\n    const rows = this.props.dataloader.getRecords().map((e, i) => { e.id = i; return e })\r\n    if (this.props.hidden === true)\r\n      return <Paper />\r\n    else return (<>\r\n      <Paper elevation={0}>\r\n        <Grid rows={rows} columns={this.columns}>\r\n          <SortingState\r\n            sorting={this.state.sortingState}\r\n          />\r\n          <GroupingState\r\n            grouping={this.state.groupBy !== undefined ? [{ columnName: this.state.groupBy }] : []}\r\n          />\r\n          <SearchState\r\n            value={this.state.searchValue}\r\n            onValueChange={(value) => {\r\n              if (this.props.minimized)\r\n                this.props.openTable();\r\n              this.setState({searchValue: value});\r\n            }}\r\n          />\r\n          <SummaryState totalItems={this.summaryItems} groupItems={this.groupSummaryItems} />\r\n\r\n          <IntegratedGrouping columnExtensions={this.groupingColumnExtensions} />\r\n          <IntegratedFiltering />\r\n          <IntegratedSorting columnExtensions={this.integratedSortingColumnExtensions} />\r\n          <IntegratedSummary />\r\n\r\n          <DataTypeProvider for={['amount']} formatterComponent={CurrencyFormatter} />\r\n          <DataTypeProvider for={['date']} formatterComponent={DateFormatter} />\r\n\r\n          <VirtualTable\r\n            columnExtensions={this.tableColumnExtension}\r\n            height={this.props.minimized ? 110 : 720}\r\n          />\r\n\r\n          <TableColumnVisibility\r\n            defaultHiddenColumnNames={['id']}\r\n          />\r\n          <TableHeaderRow cellComponent={this.TableHeaderCell} />\r\n          <TableGroupRow\r\n            contentComponent={DateGroupFormatter}\r\n            columnExtensions={this.groupExtension}\r\n          />\r\n          <TableSummaryRow />\r\n\r\n          <Toolbar />\r\n          <GroupingPanel showSortingControls emptyMessageComponent={() => <span />} />\r\n          <ExportPanel startExport={(options) => this.exporter.current?.exportGrid(options)} />\r\n          <SearchPanel />\r\n        </Grid>\r\n        <GridExporter\r\n          ref={this.exporter}\r\n          columns={this.columns}\r\n          rows={rows}\r\n          onSave={(workbook) => this.onSave(workbook)}\r\n        />\r\n      </Paper>\r\n    </>)\r\n  }\r\n\r\n  private setHighlight(sorts: Column) {\r\n    this.setState({\r\n      selectedColumn: sorts.name\r\n    })\r\n    if (isOfTypeTabs(sorts.name)) {\r\n      this.props.onChange(sorts.name);\r\n    } else if (sorts.name == 'description') {\r\n      this.props.onChange('keyword');\r\n    }\r\n  }\r\n\r\n  private setSorting(sorts: Column) {\r\n    if (this.state.sortingState[0].columnName === sorts.name) {\r\n      if (this.state.sortingState[0].direction === 'asc')\r\n        this.setState({sortingState: [{columnName: sorts.name, direction: 'desc'}]})\r\n      else if (this.state.sortingState[0].direction === 'desc')\r\n        this.setState({sortingState: [{columnName: sorts.name, direction: 'asc'}]})\r\n    } else {\r\n      this.setState({sortingState: [{columnName: sorts.name, direction: 'asc'}]})\r\n    }\r\n  }\r\n\r\n  private onSave(workbook: Workbook) {\r\n    workbook.xlsx.writeBuffer().then((buffer) => {\r\n      saveAs(new Blob([buffer], { type: 'application/octet-stream' }),\r\n        `Transactions-${Datasets.getInstance().getCurrentDatasetName()}.xlsx`);\r\n    });\r\n  }\r\n\r\n  private getGroupSortingState(category: string | undefined = this.state.groupBy): Sorting[] {\r\n    if (category === 'date')\r\n      return [{ columnName: 'date', direction: \"asc\" }]\r\n    else if (category === undefined || category === 'description')\r\n      return [{ columnName: 'id', direction: 'asc' }]\r\n    else return [{ columnName: category, direction: 'desc' }]\r\n  }\r\n}\r\n","/**\r\n * Created by TylerLiu on 2018/12/23.\r\n * \r\n * Breadcrumb made by Made by Glynn Smith on May 30, 2017\r\n */\r\nimport React, { Component } from 'react';\r\nimport { Breadcrumbs, Tooltip, Typography, Drawer, List, ListItem, ListItemIcon, ListItemText } from \"@material-ui/core\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport ListIcon from \"@material-ui/icons/List\";\r\n\r\nimport { KMFormat } from \"../util\";\r\nimport { DataLoaderProps } from \"../models/DataLoader\";\r\nimport Datasets from '../models/Datasets';\r\n\r\ninterface KeywordCrumbState {\r\n  drawer: boolean\r\n}\r\n\r\nexport default class KeywordCrumb extends Component<DataLoaderProps, KeywordCrumbState> {\r\n\r\n  constructor(props: DataLoaderProps) {\r\n    super(props)\r\n    this.state = {\r\n      drawer: true\r\n    }\r\n  }\r\n\r\n  private setYear() {\r\n    this.props.dataloader.sliceFilter(0)\r\n    this.setState({ drawer: true })\r\n  }\r\n\r\n  private getColor(category: string): string {\r\n    switch (category) {\r\n      case \"fund\":\r\n        return \"#FF6F6F\" // Red\r\n      case \"division\":\r\n        return \"#FFBB7F\" // Orange\r\n      case \"department\":\r\n        return \"#A4F997\" // Green\r\n      case \"gl\":\r\n        return \"#F0B6FF\" // Blue\r\n      case \"event\":\r\n        return \"#A2B8FF\" // Purple\r\n      default:\r\n        return \"#D0D0D0\" // Gray\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.dataloader.addChangeCallback(() => this.forceUpdate())\r\n  }\r\n\r\n  render() {\r\n    const loader = this.props.dataloader\r\n    let list = loader.getFilters()\r\n    const dataset_list: string[] = Datasets.getInstance().getDatasets() || []\r\n\r\n    return (\r\n      <>\r\n        <Breadcrumbs separator=\">\" style={this.props.style}>\r\n          <Typography align=\"center\">\r\n            <div style={{fontWeight: 'bold', color: 'black'}}>\r\n              USAC Budget Filters\r\n            </div>\r\n          </Typography>\r\n          <Typography align=\"center\">\r\n            <Tooltip title=\"Remove This Filter\">\r\n              <div\r\n                style={{ backgroundColor: \"#D0D0D0\", cursor: 'pointer', color: 'black', borderRadius: 15 }}\r\n                onClick={() => this.setYear()}\r\n              >\r\n                <div style={{marginLeft: 10, marginRight: 10}}>\r\n                  year: {Datasets.getInstance().getCurrentDatasetName()}\r\n                  <br />\r\n                  ${KMFormat(loader.getDatasetTotal())}\r\n                </div>\r\n              </div>\r\n            </Tooltip>\r\n          </Typography>\r\n          {list.slice(0, -1).map((filter, index) => (\r\n            <Typography align=\"center\">\r\n              <Tooltip title=\"Remove This Filter\">\r\n                <div\r\n                  style={{ backgroundColor: this.getColor(filter.category), cursor: 'pointer', \r\n                    color: 'black', borderRadius: 15 }} \r\n                  onClick={() => loader.sliceFilter(index)}\r\n                >\r\n                  <div style={{marginLeft: 10, marginRight: 10}}>\r\n                    {filter.category}: {filter.name}\r\n                    <br />\r\n                    ${KMFormat(filter.amount)}\r\n                  </div>\r\n                </div>\r\n              </Tooltip>\r\n            </Typography>\r\n          ))}\r\n          {list.length > 0 ? (\r\n            <Typography color=\"textPrimary\" align=\"center\" key={list.length - 1}>\r\n              <Tooltip title=\"Remove This Filter\">\r\n                <div\r\n                  onClick={() => loader.sliceFilter(list.length - 1)}\r\n                  style={{ backgroundColor: this.getColor(list[list.length - 1].category), cursor: 'pointer', borderRadius: 15 }}\r\n                >\r\n                  <div style={{marginLeft: 10, marginRight: 10}}>\r\n                    {list[list.length - 1].category}: {list[list.length - 1].name}<br />${KMFormat(list[list.length - 1].amount)}\r\n                  </div>\r\n                </div>\r\n              </Tooltip>\r\n            </Typography>\r\n          ) : null}\r\n        </Breadcrumbs>\r\n        <Drawer\r\n          anchor={'left'}\r\n          open={this.state.drawer}\r\n          onClose={() => this.setState({ drawer: false })}\r\n        >\r\n          <div onClick={() => this.setState({ drawer: false })}>\r\n            <List>\r\n              {dataset_list.map(text => (\r\n                <ListItem button key={text} onClick={() => {\r\n                  this.setState({ drawer: true })\r\n                  Datasets.getInstance().setCurrentDataset(text)\r\n                }}>\r\n                  <ListItemIcon><ListIcon /></ListItemIcon>\r\n                  <ListItemText primary={\"Budget \" + Datasets.getDatasetTitle(text)} />\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          </div>\r\n        </Drawer>\r\n      </>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Category, DataLoaderProps, WordEntry } from \"../models/DataLoader\";\r\nimport { Cell, Pie, PieChart, ResponsiveContainer, Tooltip } from 'recharts';\r\nimport { KMFormat } from \"../util\";\r\nimport { Word } from \"react-wordcloud\";\r\nimport { Filter } from \"@devexpress/dx-react-grid\";\r\n\r\ninterface CategoryPieProps extends DataLoaderProps {\r\n  category: Category\r\n  hidden?: boolean\r\n}\r\n\r\ninterface CategoryPieState {\r\n  pieDepth: number\r\n  category: Category\r\n  selectedSlices: Map<string, string>\r\n}\r\n\r\n/**\r\n * Component for a single layer pie Chart.\r\n */\r\nexport default class CategoryPie extends Component<CategoryPieProps, CategoryPieState> {\r\n\r\n  constructor(props: CategoryPieProps) {\r\n    super(props)\r\n    this.state = {\r\n      pieDepth: 0,\r\n      category: this.props.category,\r\n      selectedSlices: new Map(),\r\n    }\r\n  }\r\n\r\n  componentDidMount(): void {\r\n    this.props.dataloader.addChangeCallback(() => this.forceUpdate())\r\n  }\r\n\r\n  render(): React.ReactNode {\r\n    var filters = this.props.dataloader.getFilters()\r\n    this.state.selectedSlices.forEach((value, key) => {\r\n      for (var i = 0; i < filters.length; i++) {\r\n        if (filters[i].category == key) {\r\n          return\r\n        }\r\n      }\r\n      this.state.selectedSlices.delete(key)\r\n    })\r\n\r\n    const data = this.props.dataloader.getCategories(this.props.category)\r\n    const lastFilter = this.props.dataloader.getLastFilter()\r\n    const selected = lastFilter == null ? undefined :\r\n      (lastFilter.category === this.props.category ? lastFilter.name : undefined)\r\n\r\n    return (\r\n      <div style={{ height: '60vh' }} hidden={this.props.hidden || false}>\r\n        {(this.props.hidden || false) ? null : (\r\n          <ResponsiveContainer height=\"100%\" width=\"100%\">\r\n            <PieChart>\r\n              <Pie data={data} dataKey=\"value\" nameKey=\"text\"\r\n                onClick={(e) => this.clickSlice(e)}\r\n                label={(e) => this.renderCustomizedLabel(e, this.props.dataloader.getTotal())} labelLine={false}>\r\n                {\r\n                  data.map((entry, index) => (\r\n                    <Cell key={`cell-${index}`} style={{cursor: 'pointer'}} fill={this.getColor(entry)} />\r\n                  ))\r\n                }\r\n              </Pie>\r\n              <Tooltip formatter={(value) => \"$\" + KMFormat(value as number)}\r\n                contentStyle={{ padding: '0 5px', margin: 0, borderRadius: 5 }} />\r\n            </PieChart>\r\n          </ResponsiveContainer>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  private renderCustomizedLabel(entry: any, totalValue: number) {\r\n    if (entry.value < totalValue * 0.01)\r\n      return null\r\n    return (\r\n      <text fontSize={14} x={entry.x} y={entry.y} fill=\"Black\" textAnchor={entry.x > entry.cx ? 'start' : 'end'} dominantBaseline=\"central\">\r\n        {entry.name}\r\n      </text>\r\n    )\r\n  }\r\n\r\n  private clickSlice(e: any) {\r\n    this.state.selectedSlices.set(this.props.category, e.text)\r\n    this.props.dataloader.addCategoryFilter(this.props.category, e.text)\r\n  }\r\n\r\n  getColor(entry: any): string {\r\n    if (this.state.selectedSlices.has(this.props.category)) {\r\n      if (this.state.selectedSlices.get(this.props.category) == entry.text) {\r\n        switch (this.props.category) {\r\n          case \"fund\":\r\n            return \"#9E0000\" // Red\r\n          case \"division\":\r\n            return \"#C25A00\" // Orange\r\n          case \"department\":\r\n            return \"#0C5700\" // Green\r\n          case \"event\":\r\n            return \"#001E85\" // Blue\r\n          case \"gl\":\r\n            return \"#600078\" // Purple\r\n          default:\r\n            return \"#2F2F2F\" // Gray\r\n        }\r\n      } else {\r\n        switch (this.props.category) {\r\n          case \"fund\":\r\n            return \"#FFB3B3\"\r\n          case \"division\":\r\n            return \"#FFD9C3\"\r\n          case \"department\":\r\n            return \"#C3FFCD\"\r\n          case \"gl\":\r\n            return \"#EBC3FF\"\r\n          case \"event\":\r\n            return \"#C3D3FF\"\r\n        }\r\n      }\r\n    } else {\r\n      switch (this.props.category) {\r\n        case \"fund\":\r\n          return \"Red\"\r\n        case \"division\":\r\n          return \"Orange\"\r\n        case \"department\":\r\n          return \"Green\"\r\n        case \"event\":\r\n          return \"Blue\"\r\n        case \"gl\":\r\n          return \"Purple\"\r\n        default:\r\n          return \"Gray\"\r\n      }\r\n    }\r\n  }\r\n}","import React, {Component} from \"react\";\r\nimport {AmountBin, DataLoaderProps} from \"../models/DataLoader\";\r\nimport {Bar, BarChart, CartesianGrid, Cell, Label, ReferenceLine, ResponsiveContainer, XAxis, YAxis} from 'recharts';\r\nimport {KMFormat} from \"../util\";\r\nimport {Mark, Slider} from \"@material-ui/core\";\r\n\r\ninterface SliderProps extends DataLoaderProps {\r\n    hidden?: boolean\r\n}\r\n\r\ninterface SliderState {\r\n    value: [number, number]\r\n    data: AmountBin[]\r\n}\r\n\r\nexport default class AmountSlider extends Component<SliderProps, SliderState> {\r\n\r\n    constructor(props: SliderProps) {\r\n        super(props);\r\n        this.state = {\r\n            value: [0, 100],\r\n            data: []\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount(): void {\r\n        this.props.dataloader.addChangeCallback(() =>\r\n            this.updateState()\r\n        )\r\n        this.updateState()\r\n    }\r\n\r\n    updateState() {\r\n        const {data, domain} = this.props.dataloader.getAmountBins(40)\r\n        this.setState({\r\n            data: data,\r\n            value: domain,\r\n        })\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        const data = this.state.data\r\n        const domain: [number, number] = data.length === 0 ? [0, 1] : [data[0].low, data[data.length - 1].high]\r\n        return (\r\n            <div style={{\r\n                paddingLeft: '5%', paddingRight: `calc(5% + ${AmountSlider.getYAxisWidth()}px)`,\r\n                height: '65vh', margin: \"auto\"\r\n            }} hidden={this.props.hidden || false}>\r\n                {(this.props.hidden || false) ? null : (\r\n                    <ResponsiveContainer height=\"90%\" width=\"100%\">\r\n                        <BarChart data={data} barCategoryGap={0} margin={{bottom: 0, left: 0, right: 0}}>\r\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                            <XAxis dataKey=\"name\" domain={domain} hide orientation=\"top\"/>\r\n                            <YAxis domain={[0, 'dataMax']} tickFormatter={(v) => Math.round(v / this.props.dataloader.getTotal() * 100) + '%'}\r\n                                   width={AmountSlider.getYAxisWidth()}>\r\n                                <Label angle={270} position=\"insideLeft\" style={{textAnchor: 'middle'}}>\r\n                                    Percent of USAC Budget\r\n                                </Label>\r\n                            </YAxis>\r\n                            <ReferenceLine y={0} label=\"\" stroke=\"black\"/>\r\n                            <Bar dataKey={\"value\"} fill={this.getColor()}>\r\n                                {data.map((value, index) => (\r\n                                    <Cell key={`cell-${index}`} fill={this.getColor()}\r\n                                          opacity={this.getOpacity(value.low, value.high)}/>\r\n                                ))}\r\n                            </Bar>\r\n                        </BarChart>\r\n                    </ResponsiveContainer>\r\n                )}\r\n                <div style={{paddingLeft: AmountSlider.getYAxisWidth()}}>\r\n                    <Slider value={this.state.value}\r\n                            min={domain[0]} max={domain[1]}\r\n                            onChange={this.onRangeChange.bind(this)}\r\n                            onChangeCommitted={this.onRangeChangeCommitted.bind(this)}\r\n                            valueLabelDisplay=\"auto\"\r\n                            valueLabelFormat={(v) => '$' + KMFormat(v)}\r\n                            marks={this.getMarks(domain)}\r\n                            aria-labelledby=\"Amount-slider\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n        \r\n        \r\n        // const data = this.state.data\r\n        // const domain: [number, number] = data.length === 0 ? [0, 1] : [data[0].low, data[data.length - 1].high]\r\n        return (\r\n            <div style={{\r\n                paddingLeft: '5%', paddingRight: `calc(5% + ${AmountSlider.getYAxisWidth()}px)`,\r\n                height: '65vh', margin: \"auto\"\r\n            }} hidden={this.props.hidden || false}>\r\n                {(this.props.hidden || false) ? null : (\r\n                    <ResponsiveContainer height=\"90%\" width=\"100%\">\r\n                        <BarChart data={data} barCategoryGap={0} margin={{bottom: 0, left: 0, right: 0}}>\r\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                            <XAxis dataKey=\"name\" domain={domain} hide orientation=\"top\"/>\r\n                            <YAxis domain={[0, 'dataMax']} tickFormatter={(v) => '$' + KMFormat(v)}\r\n                                   width={AmountSlider.getYAxisWidth()}>\r\n                                <Label angle={270} position=\"insideLeft\" style={{textAnchor: 'middle'}}>\r\n                                    Expense Sum in Transaction Amount Bin($)\r\n                                </Label>\r\n                            </YAxis>\r\n                            <ReferenceLine y={0} label=\"\" stroke=\"black\"/>\r\n                            <Bar dataKey={\"value\"} fill={this.getColor()}>\r\n                                {data.map((value, index) => (\r\n                                    <Cell key={`cell-${index}`} fill={this.getColor()}\r\n                                          opacity={this.getOpacity(value.low, value.high)}/>\r\n                                ))}\r\n                            </Bar>\r\n                        </BarChart>\r\n                    </ResponsiveContainer>\r\n                )}\r\n                <div style={{paddingLeft: AmountSlider.getYAxisWidth()}}>\r\n                    <Slider value={this.state.value}\r\n                            min={domain[0]} max={domain[1]}\r\n                            onChange={this.onRangeChange.bind(this)}\r\n                            onChangeCommitted={this.onRangeChangeCommitted.bind(this)}\r\n                            valueLabelDisplay=\"auto\"\r\n                            valueLabelFormat={(v) => '$' + KMFormat(v)}\r\n                            marks={this.getMarks(domain)}\r\n                            aria-labelledby=\"Amount-slider\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    static getViewportWidth() {\r\n        return Math.max(document.documentElement.clientWidth, window.innerWidth || 0)\r\n    }\r\n\r\n    static getYAxisWidth() {\r\n        return AmountSlider.getViewportWidth() < 480 ? 0 : 72\r\n    }\r\n\r\n    onRangeChange(event: any, newValues: number | number[]) {\r\n        this.setState({value: newValues as [number, number]})\r\n    }\r\n\r\n    onRangeChangeCommitted(event: any, newValues: number | number[]) {\r\n        const nVal = newValues as [number, number]\r\n        this.props.dataloader.addAmountFilter(nVal[0], nVal[1])\r\n    }\r\n\r\n    getColor(): string {\r\n        return \"Gray\"\r\n    }\r\n\r\n    getOpacity(low: number, high: number): number {\r\n        const proportion = Math.max(0, Math.min(this.state.value[1], high) - Math.max(this.state.value[0], low)) / (high - low)\r\n        return 0.3 + 0.7 * proportion\r\n    }\r\n\r\n    getMarkPoint(x: number): Mark {\r\n        return {value: x, label: '$' + KMFormat(x)}\r\n    }\r\n\r\n    getMarks(domain: [number, number]): Mark[] {\r\n        const total_width = AmountSlider.getViewportWidth() * 0.8 - AmountSlider.getYAxisWidth()\r\n        const min_diff = 60 / total_width * (domain[1] - domain[0])\r\n        let marks: Mark[] = domain.map(e => this.getMarkPoint(e))\r\n        if (domain[0] < 0 && domain[1] > 0) {\r\n            marks = marks.filter(e => Math.abs(e.value) >= min_diff)\r\n            marks.push(this.getMarkPoint(0))\r\n        }\r\n\r\n        const step_size = Math.max((domain[1] - domain[0]) / 10, min_diff)\r\n        for (let i = 1; domain[0] + i * step_size <= domain[1] - min_diff; i++) {\r\n            const val = Number.parseFloat((domain[0] + i * step_size).toPrecision(2))\r\n            if (Math.abs(val) < 0.9 * step_size) continue\r\n            marks.push(this.getMarkPoint(val))\r\n        }\r\n\r\n        return marks\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { DataLoaderProps, WordEntry } from \"../models/DataLoader\";\r\nimport {\r\n  Area,\r\n  AreaChart,\r\n  CartesianGrid,\r\n  Label,\r\n  ReferenceLine,\r\n  ResponsiveContainer,\r\n  Tooltip,\r\n  XAxis,\r\n  YAxis\r\n} from 'recharts';\r\nimport { KMFormat } from \"../util\";\r\nimport { Mark, Slider } from \"@material-ui/core\";\r\n\r\ninterface SliderProps extends DataLoaderProps {\r\n  hidden?: boolean\r\n}\r\n\r\ninterface SliderState {\r\n  value: [number, number]\r\n  domain: [string, string]\r\n  data: WordEntry[]\r\n}\r\n\r\nconst month_name = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\r\n\r\nexport default class DateSlider extends Component<SliderProps, SliderState> {\r\n\r\n  constructor(props: SliderProps) {\r\n    super(props);\r\n    this.state = {\r\n      value: [0, 1],\r\n      domain: ['0000-01', '9999-12'],\r\n      data: []\r\n    }\r\n  }\r\n\r\n  componentDidMount(): void {\r\n    this.props.dataloader.addChangeCallback(() =>\r\n      this.updateState()\r\n    )\r\n    this.updateState()\r\n  }\r\n\r\n  updateState() {\r\n    const { data, domain } = this.props.dataloader.getMonthBins()\r\n    const names = data.map(e => e.text)\r\n    this.setState({\r\n      data: data,\r\n      value: [names.indexOf(domain[0]) + 0.5, names.indexOf(domain[1]) + 0.5],\r\n    })\r\n  }\r\n\r\n  render(): React.ReactNode {\r\n    const data = this.state.data\r\n    return (\r\n      <div style={{\r\n        paddingLeft: '5%', paddingRight: `calc(5% + ${DateSlider.getYAxisWidth()}px)`,\r\n        height: '65vh', margin: \"auto\"\r\n      }} hidden={this.props.hidden || false}>\r\n        {(this.props.hidden || false) ? null : (\r\n          <ResponsiveContainer height=\"90%\" width=\"100%\">\r\n            <AreaChart data={data} barCategoryGap={0} margin={{ bottom: 0, left: 0, right: 0 }}>\r\n              <defs>\r\n                <linearGradient id=\"fillGrad\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                  <stop offset=\"5%\" stopColor={this.getColor()} stopOpacity={0.9} />\r\n                  <stop offset=\"95%\" stopColor={this.getColor()} stopOpacity={0.3} />\r\n                </linearGradient>\r\n                <linearGradient id=\"fillGrad2\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\">\r\n                  <stop offset={this.getLeftPoint() - 0.01} stopColor={this.getColor()}\r\n                    stopOpacity={0.2} />\r\n                  <stop offset={this.getLeftPoint() + 0.01} stopColor={this.getColor()}\r\n                    stopOpacity={0.6} />\r\n                  <stop offset={this.getRightPoint() - 0.01} stopColor={this.getColor()}\r\n                    stopOpacity={0.6} />\r\n                  <stop offset={this.getRightPoint() + 0.01} stopColor={this.getColor()}\r\n                    stopOpacity={0.2} />\r\n                </linearGradient>\r\n              </defs>\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"text\" hide orientation=\"top\" scale=\"band\" />\r\n              <YAxis tickFormatter={(v) => '$' + KMFormat(v)} width={DateSlider.getYAxisWidth()}>\r\n                <Label angle={270} position=\"insideLeft\" style={{ textAnchor: 'middle' }}>\r\n                  Monthly Expense ($)\r\n                </Label>\r\n              </YAxis>\r\n              <Tooltip formatter={(value) => \"$\" + KMFormat(value as number)}\r\n                contentStyle={{ display: 'none' }} />\r\n              <ReferenceLine y={0} label=\"\" stroke=\"black\" />\r\n              <Area type=\"monotone\" dataKey=\"value\" stroke={this.getColor()} fillOpacity={1}\r\n                fill=\"url(#fillGrad2)\" />\r\n            </AreaChart>\r\n          </ResponsiveContainer>\r\n        )}\r\n        <div style={{ paddingLeft: DateSlider.getYAxisWidth() }}>\r\n          <Slider value={this.state.value}\r\n            min={0} max={this.state.data.length}\r\n            onChange={this.onRangeChange.bind(this)}\r\n            onChangeCommitted={this.onRangeChangeCommitted.bind(this)}\r\n            valueLabelDisplay=\"off\"\r\n            marks={this.getMarks(this.state.data)}\r\n            step={null}\r\n            aria-labelledby=\"Date-slider\"\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  static getViewportWidth() {\r\n    return Math.max(document.documentElement.clientWidth, window.innerWidth || 0)\r\n  }\r\n\r\n  static getYAxisWidth() {\r\n    return this.getViewportWidth() < 480 ? 0 : 72\r\n  }\r\n\r\n  onRangeChange(event: any, newValues: number | number[]) {\r\n    this.setState({ value: newValues as [number, number] })\r\n  }\r\n\r\n  onRangeChangeCommitted(event: any, newValues: number | number[]) {\r\n    const nVal = (newValues as [number, number]).map(e => Math.round(e - 0.5))\r\n    const data = this.state.data\r\n    this.props.dataloader.addMonthFilter(data[nVal[0]].text, data[nVal[1]].text)\r\n  }\r\n\r\n  getColor(): string {\r\n    return \"Gray\"\r\n  }\r\n\r\n  getOpacity(index: number): number {\r\n    index += 0.5\r\n    return this.state.value[0] <= index && index <= this.state.value[1] ? 1 : 0.3\r\n  }\r\n\r\n  getLeftPoint(): number {\r\n    return (this.state.value[0] - 1) / (this.state.data.length - 1)\r\n  }\r\n\r\n  getRightPoint(): number {\r\n    return (this.state.value[1]) / (this.state.data.length - 1)\r\n  }\r\n\r\n  getMarks(data: WordEntry[]): Mark[] {\r\n    let marks = data.map((e, i) => ({ value: i + 0.5, label: e.text }))\r\n    let years: Set<String> = new Set<String>();\r\n    marks.forEach((e, i) => {\r\n      const d = e.label.split('-')\r\n      if (years.has(d[0])) marks[i].label = month_name[Number.parseInt(d[1]) - 1]\r\n      else {\r\n        years.add(d[0])\r\n        marks[i].label = month_name[Number.parseInt(d[1]) - 1] + ` ${d[0]}`;\r\n      }\r\n    })\r\n    return marks\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { Category } from \"../models/DataLoader\";\r\n\r\nexport interface ExpProps {\r\n  hidden?: boolean\r\n  category: Category | 'date' | 'amount' | 'keyword' | 'table' | 'footer';\r\n}\r\n\r\nexport interface ExpState {\r\n  longDescription: boolean\r\n}\r\n\r\nexport default class ExplanationText extends React.Component<ExpProps, ExpState> {\r\n\r\n  constructor(props: ExpProps) {\r\n    super(props);\r\n    this.state = {\r\n      longDescription: false\r\n    }\r\n  }\r\n\r\n  render = () => {\r\n    if (this.props.hidden) {\r\n      return null\r\n    } else {\r\n      switch (this.props.category) {\r\n      case 'date':\r\n        return (\r\n          <>\r\n            <h1 style={{marginBottom: 0}}>Date</h1>\r\n            <span>\r\n            <Typography color=\"textSecondary\" style={{fontSize: 16, float: 'left'}}>\r\n              When money leaves the Association.\r\n            </Typography>\r\n            <InfoIcon\r\n              style={{float: 'left'}}\r\n              onMouseEnter={() => this.setState({longDescription: true})}\r\n              onMouseLeave={() => this.setState({longDescription: false})}\r\n            /></span>\r\n            {this.state.longDescription ?\r\n              <Typography color=\"textSecondary\" style={{fontSize: 16}}>\r\n                Not when it was budgeted or spent. For example, a spender (a.k.a *Department*)\r\n                may choose to be reimbursed afterward, or receive a cash-advance beforehand.\r\n              </Typography>\r\n            : null}\r\n          </>\r\n        )\r\n      case 'fund':\r\n        return (\r\n          <>\r\n            <h1 style={{marginBottom: 0}}>Fund</h1>\r\n            <Typography color=\"textSecondary\" style={{fontSize: 16, float: 'left'}}>\r\n              Where money comes from.\r\n            </Typography>\r\n            <InfoIcon\r\n              style={{float: 'left'}}\r\n              onMouseEnter={() => this.setState({longDescription: true})}\r\n              onMouseLeave={() => this.setState({longDescription: false})}\r\n            />\r\n            {this.state.longDescription ?\r\n              <Typography color=\"textSecondary\" style={{fontSize: 16}}>\r\n                Most but not all funds are from student fees.\r\n              </Typography>\r\n            : null}\r\n          </>\r\n        )\r\n      case 'division':\r\n        return (\r\n          <>\r\n            <h1 style={{marginBottom: 0}}>Division</h1>\r\n            <Typography color=\"textSecondary\" style={{fontSize: 16, float: 'left'}}>\r\n              Entity overseeing the funds; the division is an umbrella to the department\r\n              and a single division can include multiple departments.\r\n            </Typography>\r\n            <InfoIcon\r\n              style={{float: 'left'}}\r\n              onMouseEnter={() => this.setState({longDescription: true})}\r\n              onMouseLeave={() => this.setState({longDescription: false})}\r\n            />\r\n            {this.state.longDescription ?\r\n              <Typography color=\"textSecondary\" style={{fontSize: 16}}>\r\n                You may need to click on the division and the department to understand which\r\n                entity is tied to the funds. The division may not always give enough information\r\n                on it’s own. The membership fees are delegated to other entities (not\r\n                directly administered by USAC, but USAC has reporting oversight).\r\n              </Typography>\r\n            : null}\r\n          </>\r\n        )\r\n      case 'department':\r\n        return (\r\n          <>\r\n            <h1 style={{marginBottom: 0}}>Department</h1>\r\n            <Typography color=\"textSecondary\" style={{fontSize: 16}}>\r\n              Who spends the money.\r\n            </Typography>\r\n          </>\r\n        )\r\n      case 'gl':\r\n        return (\r\n          <>\r\n            <h1 style={{marginBottom: 0}}>General Ledger</h1>\r\n            <Typography color=\"textSecondary\" style={{fontSize: 16}}>\r\n            Category that accounting assigns to the expenditure (i.e. programming, honorarium, etc.)\r\n            </Typography>\r\n          </>\r\n        )\r\n      case 'event':\r\n        return (\r\n          <>\r\n            <h1 style={{marginBottom: 0}}>Event</h1>\r\n            <Typography color=\"textSecondary\" style={{fontSize: 16}}>\r\n              What the occasion was.\r\n            </Typography>\r\n          </>\r\n        )\r\n      case 'keyword':\r\n        return (\r\n          <>\r\n            <h1 style={{marginBottom: 0}}>Description</h1>\r\n            <Typography color=\"textSecondary\" style={{fontSize: 16, float: 'left'}}>\r\n              Where money gets spent, according to the spender (a.k.a. *Department*). Larger font means more money.\r\n            </Typography>\r\n            <InfoIcon\r\n              style={{float: 'left'}}\r\n              onMouseEnter={() => this.setState({longDescription: true})}\r\n              onMouseLeave={() => this.setState({longDescription: false})}\r\n            />\r\n            {this.state.longDescription ?\r\n              <Typography color=\"textSecondary\" style={{fontSize: 16}}>\r\n                If you wanted to narrow the results to “Bruin Bash”, click the word “Bruin” and then “Bash”.\r\n                You will see only the transactions with both words in the *Description*. The choice of these\r\n                words is at the spenders discretion, subject to approval/abbreviation by the accountant.\r\n                For example, the spender might write “ … student wellness commission …”, and the accountant\r\n                may abbreviate it as “ … swc …” The graphic performs intelligent de-abbreviation for your convenience.\r\n              </Typography>\r\n            : null}\r\n          </>\r\n        )\r\n      case 'amount':\r\n        return (\r\n          <>\r\n            <h1 style={{marginBottom: 0}}>Amount</h1>\r\n            <Typography color=\"textSecondary\" style={{fontSize: 16, float: 'left'}}>\r\n              How much money is in each transaction.\r\n            </Typography>\r\n            <InfoIcon\r\n              style={{float: 'left'}}\r\n              onMouseEnter={() => this.setState({longDescription: true})}\r\n              onMouseLeave={() => this.setState({longDescription: false})}\r\n            />\r\n            {this.state.longDescription ?\r\n              <Typography color=\"textSecondary\" style={{fontSize: 16}}>\r\n                Multiple purchases may be grouped under one transaction.\r\n                Negative values are refunds to the Association.\r\n              </Typography>\r\n            : null}\r\n          </>\r\n        )\r\n      case 'table':\r\n        return (\r\n          <Typography color=\"textSecondary\" style={{fontSize: 16}}>\r\n            Above is the raw transaction table of the Undergraduate Student Association.\r\n            Click on a column to visualize it.\r\n            <br />\r\n            Low on time? Most important is the descriptions column. Everything else is administrative.\r\n          </Typography>\r\n        )\r\n      case 'footer':\r\n        return (\r\n          <Typography color=\"textSecondary\" style={{fontSize: 16}}>\r\n            We had to de-abbreviate them, but sometimes did that incorrectly,\r\n            so please comment at the bottom of the page if you see that.\r\n            <br />\r\n            These abbreviations had to be autocorrected so they can be categorized in the visual.\r\n            If autocorrect groups transactions incorrectly, please comment at the bottom of the page.\r\n          </Typography>\r\n        )\r\n      default:\r\n        return <div />\r\n      }\r\n    }\r\n  }\r\n}\r\n","import * as React from 'react';\r\nimport {\r\n  Container,\r\n  Row, Col\r\n} from 'reactstrap';\r\nimport '../App.css';\r\nimport WordCloud from \"./WordCloud\";\r\nimport RecordTable from \"./RecordTable\";\r\nimport KeywordCrumb from \"./KeywordCrumb\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport DataLoader, { Category, isOfTypeCategory } from \"../models/DataLoader\";\r\nimport CategoryPie from \"./CategoryPie\";\r\nimport { Button, } from \"@material-ui/core\";\r\nimport AmountSlider from \"./AmountSlider\";\r\nimport QueryBuilder from \"../models/QueryBuilder\";\r\nimport DateSlider from \"./DateSlider\";\r\nimport ExplanationText from \"./ExplanationText\";\r\nimport {Link} from \"@material-ui/core\";\r\nimport ContactSupportIcon from \"@material-ui/icons/ContactSupport\";\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport FeedbackIcon from '@material-ui/icons/Feedback';\r\nimport { createBrowserHistory } from 'history';\r\n\r\nexport type TabTypes = Category | 'table' | 'keyword' | \"amount\" | \"date\";\r\n\r\ninterface DatasetState {\r\n  value: TabTypes\r\n  graphic: boolean\r\n}\r\n\r\ninterface DatasetProps {\r\n  loader: DataLoader\r\n}\r\n\r\nexport function isOfTypeTabs(input: string): input is TabTypes {\r\n  return isOfTypeCategory(input) || ['table', 'keyword', \"amount\", \"date\"].includes(input);\r\n}\r\n\r\nexport default class DatasetView extends React.Component<DatasetProps, DatasetState> {\r\n  private value: TabTypes = 'keyword'\r\n\r\n  constructor(props: DatasetProps) {\r\n    super(props);\r\n\r\n    this.value = 'keyword'\r\n    // this.parseQuery(QueryBuilder.getInstance().getQuery())\r\n\r\n    this.state = {\r\n      value: this.value,\r\n      graphic: true\r\n    }\r\n\r\n    QueryBuilder.getInstance().addGenerator(this.generateQuery.bind(this), 1)\r\n  }\r\n\r\n  componentDidMount(): void {\r\n    this.props.loader.addChangeCallback(() => this.forceUpdate());\r\n  }\r\n\r\n  parseQuery(query: string): TabTypes {\r\n    if (query[0] === '?') query = query.slice(1)\r\n    const res = query.split('&').filter((e) => e.startsWith('tab='))\r\n    if (res.length === 0) return 'table'\r\n    let s = res[0].substr(4)\r\n    if (isOfTypeTabs(s)) {\r\n      return s\r\n    } else return 'table'\r\n  }\r\n\r\n  generateQuery(): string {\r\n    return 'tab=' + this.value\r\n  }\r\n\r\n  onTabChange(value: string) {\r\n    this.value = isOfTypeTabs(value) ? value : 'table'\r\n    this.setState({ value: this.value })\r\n    QueryBuilder.getInstance().update()\r\n  }\r\n\r\n  openTable = () => {\r\n    this.setState({ graphic: false });\r\n  }\r\n\r\n  copyURL() {\r\n    const selBox = document.createElement('textarea');\r\n    selBox.style.position = 'fixed';\r\n    selBox.style.left = '0';\r\n    selBox.style.top = '0';\r\n    selBox.style.opacity = '0';\r\n    selBox.value = window.location.href;\r\n    document.body.appendChild(selBox);\r\n    selBox.focus();\r\n    selBox.select();\r\n    document.execCommand('copy');\r\n    document.body.removeChild(selBox);\r\n    alert('Link Copied to Clipboard! (filters saved)');\r\n  }\r\n\r\n  render() {\r\n    const loader = this.props.loader;\r\n    return (\r\n      <>\r\n        <br /><br />\r\n        <div style={{ marginLeft: 30, marginRight: 30 }}>\r\n          <KeywordCrumb dataloader={loader} />\r\n        </div>\r\n        <br /><br />\r\n        <Container style={{ width: '80%', marginLeft: '10%', marginRight: '10%' }}>\r\n          <Row>\r\n            <Col>\r\n              <RecordTable\r\n                dataloader={loader}\r\n                onChange={this.onTabChange.bind(this)}\r\n                style={{ backgroundColor: \"lightblue\" }}\r\n                minimized={this.state.graphic}\r\n                openTable={this.openTable}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <ExplanationText hidden={!this.state.graphic} category={this.state.value} />\r\n            </Col>\r\n          </Row>\r\n          <br />\r\n          <Row>\r\n            <Col>\r\n              <br />\r\n              <WordCloud hidden={this.state.value !== 'keyword' || !this.state.graphic} dataloader={loader} />\r\n              <CategoryPie hidden={!isOfTypeCategory(this.state.value) || !this.state.graphic}\r\n                category={isOfTypeCategory(this.state.value) ? this.state.value : \"fund\"} dataloader={loader} />\r\n              <AmountSlider hidden={this.state.value !== \"amount\" || !this.state.graphic} dataloader={loader} />\r\n              <DateSlider hidden={this.state.value !== 'date' || !this.state.graphic} dataloader={loader} />\r\n            </Col>\r\n          </Row>\r\n          <br />\r\n          <Row>\r\n            <Col>\r\n              <Button\r\n                style={{ backgroundColor: \"lightgray\", fontWeight: 'bold', marginLeft: '45%', marginRight: '45%', width: '10%' }}\r\n                onClick={() => this.setState({ graphic: !this.state.graphic })}>\r\n                {this.state.graphic ? <>View Table</> : <>View Graphic</>}\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n        <br />\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              <div style={{ color: 'black', float: 'left' }}>\r\n                <a\r\n                  href=\"https://forms.gle/68zdvLpYxs8av16H8\"\r\n                  rel=\"noopener noreferrer\"\r\n                  target=\"_blank\"\r\n                  style={{ padding: 20, color: 'black' }}\r\n                  aria-label=\"feedback\"\r\n                >\r\n                  <FeedbackIcon/> Feedback\r\n                </a>\r\n                <a href=\"mailto:usacbudgetviewer@gmail.com\" style={{ padding: 20, color: 'black' }} aria-label=\"email accountant\">\r\n                  <EmailIcon /> Contact Us\r\n                </a>\r\n                <a href=\"mailto:vtran@asucla.ucla.edu\" style={{ padding: 20, color: 'black' }} aria-label=\"email accountant\">\r\n                  <EmailIcon /> Professional Accountant\r\n                </a>\r\n                <a href=\"mailto:usacouncil@asucla.ucla.edu\" style={{ padding: 20, color: 'black' }} aria-label=\"email usac\">\r\n                  <EmailIcon /> USAC Council\r\n                </a>\r\n                <Button style={{ color: 'black', textDecoration: 'underline' }} onClick={this.copyURL} aria-label=\"share\">\r\n                  Copy link\r\n                </Button>\r\n                <a href='https://www.youtube.com/watch?v=cG8gkj6EEs0' rel=\"noopener noreferrer\" target=\"_blank\" aria-label=\"tutorial video\">\r\n                  <Button aria-label=\"share\">\r\n                    <ContactSupportIcon />Video\r\n                  </Button>\r\n                </a>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport DatasetView from \"./components/DatasetView\"\r\nimport DataLoader from \"./models/DataLoader\";\r\nimport Datasets from \"./models/Datasets\";\r\nimport { Container, CssBaseline } from \"@material-ui/core\";\r\n// const createHistory = require('history').createBrowserHistory;\r\n\r\ninterface AppState {\r\n  loader: DataLoader\r\n}\r\n\r\nclass App extends React.Component<{}, AppState> {\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n    this.state = {\r\n      loader: Datasets.getInstance().getDataLoader()\r\n    }\r\n  }\r\n\r\n  componentDidMount(): void {\r\n    Datasets.getInstance().addChangeCallback(() => {\r\n      this.setState({\r\n        loader: Datasets.getInstance().getDataLoader()\r\n      })\r\n    });\r\n    window.addEventListener('popstate', (event) => {\r\n      this.state.loader.removeFilters()\r\n      this.state.loader.refreshParseQuery(window.location.search)\r\n      this.state.loader.updateCallbacks()\r\n    }, false);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <CssBaseline />\r\n        <DatasetView loader={this.state.loader} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport $ from 'jquery';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <App/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
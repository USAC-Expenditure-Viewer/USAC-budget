{"version":3,"sources":["models/QueryBuilder.ts","util.ts","models/DataLoader.ts","models/Datasets.ts","components/TopBar.tsx","components/WordCloud.tsx","components/RecordTable.tsx","components/KeywordCrumb.tsx","components/CategoryPie.tsx","components/AmountSlider.tsx","components/DateSlider.tsx","components/DatasetView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["QueryBuilder","queryString","generators","Map","this","window","location","search","replace","instance","callback","index","set","query","values","map","c","join","path","href","includes","substr","indexOf","history","pushState","KMFormat","x","Number","isNaN","suffix","Math","abs","toPrecision","KMFToNum","str","unit","parseFloat","DataLoader","dataset","data","filters","dataChangeCallbacks","total_amount","setDataset","sliceFilter","loadDataset","Papa","pathname","download","header","complete","results","e","date","Date","amount","words","__parsed_extra","filter","onLoad","reduce","prev","curr","parseQuery","getInstance","getQuery","addGenerator","generateQueryString","bind","listChangeCallback","slice","callbacks","split","forEach","entry","sign_location","q","v","addKeywordFilter","addCategoryFilter","atob","valuesa","addAmountFilter","valuesd","addMonthFilter","console","log","category","name","btoa","update","push","length","words_set","getRecords","row","w","get","chosen_words","words_list","entries","word","val","text","value","sort","a","b","category_set","cate_name","category_list","numBin","domain","records","previousValue","currentValue","min","max","MAX_VALUE","MIN_VALUE","allMin","allMax","bins","bin_size","i","low","high","month_string","getFullYear","padStart","getMonth","localeCompare","month_num","s","parseInt","next_month","remaining_length","word_index","new_index","Datasets","datasets","currentDataset","dataLoader","ready","parseDataset","getQueryString","fetch","then","res","json","getDatasetTitle","startsWith","match","toString","TopBar","props","state","drawer","addChangeCallback","forceUpdate","toggleDrawer","setState","dataset_list","getDatasets","AppBar","position","Toolbar","IconButton","edge","color","aria-label","onClick","Typography","variant","style","flexGrow","getCurrentDatasetName","Drawer","anchor","open","onClose","List","ListItem","button","key","setCurrentDataset","ListItemIcon","ListItemText","primary","React","Component","WordCloud","getWordTooltip","onWordClick","getCallback","onWordMouseOut","onWordMouseOver","options","fontFamily","fontSizes","fontStyle","fontWeight","scale","deterministic","rotations","rotationAngles","transitionDuration","dataloader","setWords","height","hidden","getWordList","event","isActive","select","target","on","transition","attr","month_name","CurrencyFormatter","toLocaleString","currency","DateFormatter","toDateString","DateGroupFormatter","column","year","month","RecordTable","summaryItems","columnName","type","columns","title","tableColumnExtension","wordWrapEnabled","align","groupSummaryItems","showInGroupFooter","alignByColumn","groupingColumnExtensions","criteria","dateToYearMonth","exporter","groupWeight","integratedSortingColumnExtensions","createRef","sortingState","direction","hiddenColumns","undefined","groupBy","buildGroupWeightTable","clear","getCategories","compare","rows","id","has","Paper","sorting","onSortingChange","setSorting","grouping","totalItems","groupItems","columnExtensions","for","formatterComponent","showSortingControls","contentComponent","showWhenGrouped","hiddenColumnNames","onHiddenColumnNamesChange","emptyMessageComponent","startExport","current","exportGrid","ref","onSave","workbook","newSorting","sorts","oldSorting","add","oldValue","xlsx","writeBuffer","buffer","saveAs","Blob","KeywordCrumb","list","getFilters","Breadcrumbs","separator","Link","getDatasetTotal","CategoryPie","width","dataKey","nameKey","fill","getColor","label","percent","labelLine","formatter","contentStyle","padding","margin","borderRadius","AmountSlider","updateState","getAmountBins","paddingLeft","paddingRight","getYAxisWidth","barCategoryGap","bottom","left","right","strokeDasharray","hide","orientation","tickFormatter","angle","textAnchor","y","stroke","opacity","getOpacity","Slider","onChange","onRangeChange","onChangeCommitted","onRangeChangeCommitted","valueLabelDisplay","valueLabelFormat","marks","getMarks","newValues","nVal","min_diff","getViewportWidth","getMarkPoint","step_size","document","documentElement","clientWidth","innerWidth","DateSlider","getMonthBins","names","x1","y1","x2","y2","offset","stopColor","stopOpacity","getLeftPoint","getRightPoint","display","fillOpacity","step","round","years","Set","d","DatasetView","generateQuery","loader","Tabs","indicatorColor","textColor","Tab","getCategory","App","getDataLoader","Boolean","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.72baddbb.chunk.js","sourcesContent":["export default class QueryBuilder {\n\n    private static instance: QueryBuilder | null = null\n    private queryString: string\n    private generators: Map<number, () => string> = new Map()\n\n    static getInstance() {\n        if (this.instance === null) this.instance = new QueryBuilder()\n        return this.instance\n    }\n\n\n    private constructor() {\n        this.queryString = window.location.search.replace('?', '')\n    }\n\n    getQuery() {\n        return this.queryString\n    }\n\n    addGenerator(callback: () => string, index: number) {\n        this.generators.set(index, callback)\n    }\n\n    update() {\n        let strings: string[] = [...this.generators.values()].map((c) => c())\n        const query = strings.join('&')\n\n        let path = window.location.href\n        if (path.includes('?')) path = path.substr(0, path.indexOf('?'))\n        window.history.pushState({path: path + '?' + query}, '', path + '?' + query);\n    }\n}\n","export function commaFormat(x: number): string {\n    if (Number.isNaN(x)) return \"\"\n    let x_str: string = x.toFixed(2)\n    let parts: string[] = x_str.split(\".\")\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n    return parts.join(\".\");\n}\n\nexport function KMFormat(x: number): string {\n    if (Number.isNaN(x)) return \"\"\n    let suffix = \"\";\n    if (Math.abs(x) >= 1000000000) {\n        suffix = \"B\"\n        x /= 1000000000;\n    } else if (Math.abs(x) >= 1000000) {\n        suffix = \"M\"\n        x /= 1000000;\n    } else if (Math.abs(x) >= 1000) {\n        suffix = \"K\"\n        x /= 1000;\n    }\n    return x.toPrecision(3) + suffix;\n}\n\nexport function KMFToNum(str: string): number {\n    let unit = 1\n    if (str.includes('K')) {\n        unit = 1000\n        str = str.replace('K', '')\n    }\n    if (str.includes('M')) {\n        unit = 1000000\n        str = str.replace('M', '')\n    }\n    if (str.includes('B')) {\n        str = str.replace('B', '')\n        unit = 1000000000\n    }\n    return Number.parseFloat(str) * unit\n}\n","import {KMFormat, KMFToNum} from \"../util\";\nimport * as Papa from 'papaparse';\nimport QueryBuilder from \"./QueryBuilder\";\n\ninterface DataEntry {\n    date: Date,\n    fund: string,\n    division: string,\n    department: string,\n    gl: string,\n    event: string,\n    description: string,\n    amount: number,\n    words: string[],\n    id?: number\n}\n\nexport interface AmountBin {\n    low: number\n    high: number\n    value: number\n    name: string\n}\n\nexport type Category = 'fund' | 'division' | 'department' | 'gl' | 'event'\n\nexport interface WordEntry {\n    text: string,\n    value: number\n}\n\ninterface Filter {\n    category: string,\n    name: string,\n    index: DataEntry[],\n    amount: number,\n}\n\nexport interface DataLoaderProps {\n    dataloader: DataLoader,\n    style?: Object,\n}\n\nexport default class DataLoader {\n\n    private data: DataEntry[] = []\n    private filters: Filter[] = []\n    private dataChangeCallbacks: (() => void)[] = []\n    private total_amount: number = 0\n\n    constructor(dataset: string | null) {\n        this.setDataset(dataset)\n    }\n\n    setDataset(dataset: string | null) {\n        this.sliceFilter(0)\n        this.loadDataset(dataset)\n    }\n\n    private loadDataset(dataset: string | null) {\n        if (dataset === null) return\n        Papa.parse(window.location.pathname + \"/expense_summary_\" + dataset + \".csv\",\n            {\n                download: true,\n                header: true,\n                complete: (results) => {\n                    this.data = results.data.map((e) => {\n                        e.date = new Date(Number.parseFloat(e.date) * 1000)\n                        e.amount = Number.parseFloat(e.amount)\n                        e.words = e.__parsed_extra || []\n                        return e\n                    }).filter(e => !Number.isNaN(e.amount))\n\n                    this.onLoad()\n                }\n            })\n    }\n\n    private onLoad() {\n        this.total_amount = this.data.reduce((prev, curr) => prev + curr.amount, 0)\n        this.parseQuery(QueryBuilder.getInstance().getQuery())\n        QueryBuilder.getInstance().addGenerator(this.generateQueryString.bind(this), 2)\n        this.listChangeCallback()\n    }\n\n    private parseQuery(query: string) {\n        if (query[0] === '?') query = query.slice(1)\n        const callbacks = this.dataChangeCallbacks\n        this.dataChangeCallbacks = []\n        try {\n            query.split('&').forEach(entry => {\n                if (!entry.includes('=')) return\n                const sign_location = entry.indexOf('=')\n                const q = entry.substr(0, sign_location)\n                const v = entry.substr(sign_location + 1)\n                switch (q) {\n                    case 'keyword':\n                        this.addKeywordFilter(v)\n                        break\n                    case 'fund':\n                    case 'division':\n                    case 'department':\n                    case 'gl':\n                    case 'event':\n                        this.addCategoryFilter(q, atob(v))\n                        break\n                    case 'amount':\n                        if (!v.includes('..')) return\n                        const valuesa = v.split('..').map(e => KMFToNum(e))\n                        this.addAmountFilter(valuesa[0], valuesa[1])\n                        break\n                    case 'date':\n                        if (!v.includes('..')) return\n                        const valuesd = v.split('..')\n                        this.addMonthFilter(valuesd[0], valuesd[1])\n                        break\n                }\n            })\n        } catch (e) {\n            console.log(e)\n        }\n        this.dataChangeCallbacks = callbacks\n    }\n\n    private generateQueryString() {\n        const strings = this.filters.map((curr) => {\n            switch (curr.category) {\n                case 'keyword':\n                    return 'keyword=' + curr.name\n                case 'amount':\n                    return 'amount=' + curr.name.replace('~', '..')\n                case 'date':\n                    return 'date=' + curr.name.replace('~', '..')\n                default:\n                    return curr.category + '=' + btoa(curr.name)\n            }\n        })\n        return strings.join('&')\n    }\n\n    private listChangeCallback() {\n        this.dataChangeCallbacks.forEach(c => c())\n        QueryBuilder.getInstance().update()\n    }\n\n    addChangeCallback(callback: () => void) {\n        this.dataChangeCallbacks.push(callback)\n    }\n\n    getRecords(): DataEntry[] {\n        if (this.data.length === 0) {\n            return [];\n        }\n\n        if (this.filters.length === 0) {\n            return this.data\n        }\n\n        return this.filters[this.filters.length - 1].index\n    }\n\n    getWordList(): WordEntry[] {\n        if (this.data.length === 0) {\n            return [];\n        }\n\n        let words_set = new Map<string, number>()\n        this.getRecords().forEach(row => {\n            row.words.forEach(w => {\n                words_set.set(w, (words_set.get(w) || 0) + row.amount);\n            })\n        })\n\n        const chosen_words = this.filters.filter(e => e.category === 'keyword').map(e => e.name)\n\n        let words_list: WordEntry[] = []\n        for (let [word, val] of words_set.entries()) {\n            if (!chosen_words.includes(word))\n                words_list.push({text: word, value: val})\n        }\n\n        words_list.sort((a, b) => a.value - b.value)\n\n        return words_list\n    }\n\n    getCategories(category: Category): WordEntry[] {\n        if (this.data.length === 0) {\n            return [];\n        }\n\n        let category_set = new Map<string, number>()\n        this.getRecords().forEach(row => {\n            const cate_name = row[category]\n            category_set.set(cate_name, (category_set.get(cate_name) || 0) + row.amount);\n        })\n\n        let category_list: WordEntry[] = []\n        for (let [word, val] of category_set.entries()) {\n            category_list.push({text: word, value: val})\n        }\n\n        category_list.sort((a, b) => a.value - b.value)\n\n        return category_list\n    }\n\n    getAmountBins(numBin: number): { data: AmountBin[], domain: [number, number] } {\n        if (this.data.length === 0) {\n            return {data: [], domain: [0, 1]}\n        }\n\n        let records: DataEntry[];\n        let domain: [number, number] | null = null;\n        if (this.filters.length !== 0 && this.filters[this.filters.length - 1].category === 'amount') {\n            records = this.filters.length >= 2 ? this.filters[this.filters.length - 2].index : this.data\n            const values = this.filters[this.filters.length - 1].name.split('~').map(e => KMFToNum(e))\n            domain = values as [number, number]\n        } else {\n            records = this.getRecords()\n        }\n        let [allMin, allMax] = records.reduce(((previousValue, currentValue) =>\n            [Math.min(previousValue[0], currentValue.amount),\n                Math.max(previousValue[1], currentValue.amount)]), [Number.MAX_VALUE, Number.MIN_VALUE])\n\n        if (domain === null) domain = [allMin, allMax]\n        allMax += 0.001\n\n        let bins: AmountBin[] = []\n        let bin_size = (allMax - allMin) / numBin\n        for (let i = 0; i < numBin; i++) {\n            bins.push({\n                low: allMin + i * bin_size, high: allMin + (i + 1) * bin_size,\n                value: 0, name: KMFormat(allMin + (i + 0.5) * bin_size)\n            })\n        }\n\n        records.forEach((e) => {\n            bins.forEach((b) => {\n                if (b.low <= e.amount && e.amount < b.high)\n                    b.value += e.amount\n            })\n        })\n\n        return {data: bins, domain: domain}\n    }\n\n    getMonthBins(): { data: WordEntry[], domain: [string, string] } {\n        if (this.data.length === 0) {\n            return {data: [{text: '0000-01', value: 0}], domain: ['0000-01', '0000-01']}\n        }\n\n        let records: DataEntry[];\n        let domain: [string, string] | null = null;\n        if (this.filters.length !== 0 && this.filters[this.filters.length - 1].category === 'date') {\n            records = this.filters.length >= 2 ? this.filters[this.filters.length - 2].index : this.data\n            const values = this.filters[this.filters.length - 1].name.split('~')\n            domain = values as [string, string]\n        } else {\n            records = this.getRecords()\n        }\n        let [allMin, allMax] = records.reduce((previousValue, currentValue) => {\n            const month_string = (currentValue.date.getFullYear() + \"\").padStart(4, '0') + '-' + ((currentValue.date.getMonth() + 1) + \"\").padStart(2, \"0\")\n            return [previousValue[0].localeCompare(month_string) < 0 ? previousValue[0] : month_string,\n                previousValue[1].localeCompare(month_string) > 0 ? previousValue[1] : month_string]\n        }, ['9999-99', '0000-00'])\n\n        if (domain === null) domain = [allMin, allMax]\n\n        let bins: Map<string, number> = new Map()\n        records.forEach((e) => {\n            const month_string = (e.date.getFullYear() + \"\").padStart(4, \"0\") + '-' + ((e.date.getMonth() + 1) + \"\").padStart(2, \"0\")\n            bins.set(month_string, (bins.get(month_string) || 0) + e.amount)\n        })\n\n        let data: WordEntry[] = [...bins.entries()].map((e) => ({text: e[0], value: e[1]}))\n            .sort((a, b) => (a.text.localeCompare(b.text)))\n\n        while (data.length !== 0 && data.length < 12) {\n            let month_num = data[data.length - 1].text.split('-').map((s) => Number.parseInt(s))\n            if (month_num[1] !== 12) month_num[1]++\n            else month_num = [month_num[0] + 1, 1]\n            let next_month = (month_num[0] + \"\").padStart(4, \"0\") + '-' + (month_num[1] + \"\").padStart(2, \"0\")\n            data.push({text: next_month, value: 0})\n        }\n\n        return {data: data, domain: domain}\n    }\n\n    getTotal(): number {\n        if (this.filters.length === 0) {\n            return this.total_amount\n        }\n        return this.filters[this.filters.length - 1].amount\n    }\n\n    getDatasetTotal(): number {\n        return this.total_amount\n    }\n\n    getFilters() {\n        return this.filters\n    }\n\n    sliceFilter(remaining_length: number) {\n        this.filters = this.filters.slice(0, remaining_length)\n        this.listChangeCallback()\n    }\n\n    addKeywordFilter(word: string) {\n        if (this.data.length === 0) return\n        if (this.filters.reduce((prev, curr) => prev || (curr.category === 'keyword' && curr.name === word), false))\n            return\n\n        let word_index: DataEntry[]\n        if (this.filters.length !== 0) {\n            const last_index = this.filters[this.filters.length - 1].index\n            word_index = last_index.filter((e) => e.words.includes(word))\n        } else {\n            word_index = this.data.filter(e => e.words.includes(word))\n        }\n\n        this.filters.push({\n            category: 'keyword',\n            name: word,\n            index: word_index,\n            amount: word_index\n                .reduce((prev, curr) => prev + curr.amount, 0)\n        })\n\n        this.listChangeCallback()\n    }\n\n    addCategoryFilter(category: Category, value: string) {\n        if (this.data.length === 0) return\n        if (this.filters.reduce((prev, curr) => prev || (curr.category === category && curr.name === value), false))\n            return\n\n        let new_index: DataEntry[]\n        if (this.filters.length !== 0) {\n            const last_index = this.filters[this.filters.length - 1].index\n            // @ts-ignore\n            new_index = last_index.filter((e) => (e[category] === value))\n        } else {\n            // @ts-ignore\n            new_index = this.data.filter(e => (e[category] === value))\n        }\n\n        this.filters.push({\n            category: category,\n            name: value,\n            index: new_index,\n            amount: new_index.reduce((prev, curr) => prev + curr.amount, 0)\n        })\n\n        this.listChangeCallback()\n    }\n\n    addAmountFilter(low: number, high: number) {\n        if (this.data.length === 0) return\n\n        if (this.filters.length > 0 && this.filters[this.filters.length - 1].category === 'amount') {\n            this.filters = this.filters.slice(0, -1)\n        }\n        const last_index = this.filters.length > 0 ? this.filters[this.filters.length - 1].index : this.data\n        const new_index = last_index\n            .filter((e) => (low <= e.amount && e.amount <= high))\n\n        this.filters.push({\n            category: 'amount',\n            name: KMFormat(low) + \"~\" + KMFormat(high),\n            index: new_index,\n            amount: new_index\n                .reduce((prev, curr) => prev + curr.amount, 0)\n        })\n\n        this.listChangeCallback()\n    }\n\n    addMonthFilter(low: string, high: string) {\n        if (this.data.length === 0) return\n\n        if (this.filters.length > 0 && this.filters[this.filters.length - 1].category === 'date') {\n            this.filters = this.filters.slice(0, -1)\n        }\n        const last_index = this.filters.length > 0 ? this.filters[this.filters.length - 1].index : this.data\n        const new_index = last_index\n            .filter((e) => {\n                const month_string = (e.date.getFullYear() + \"\").padStart(4, '0') + '-' + ((e.date.getMonth() + 1) + \"\").padStart(2, '0')\n                return low.localeCompare(month_string) <= 0 && month_string.localeCompare(high) <= 0\n            })\n\n        this.filters.push({\n            category: 'date',\n            name: low + \"~\" + high,\n            index: new_index,\n            amount: new_index\n                .reduce((prev, curr) => prev + curr.amount, 0)\n        })\n\n        this.listChangeCallback()\n    }\n}\n","import QueryBuilder from \"./QueryBuilder\";\nimport DataLoader from \"./DataLoader\";\n\nexport default class Datasets {\n\n    private static instance: Datasets | null = null\n    private datasets: string[] = []\n    private currentDataset: string | null = null\n    private callbacks: (() => void)[] = []\n    private dataLoader: DataLoader\n    private ready: boolean = false\n\n    static getInstance() {\n        if (this.instance === null) this.instance = new Datasets()\n        return this.instance\n    }\n\n\n    private constructor() {\n        this.parseDataset(QueryBuilder.getInstance().getQuery())\n        this.dataLoader = new DataLoader(this.currentDataset)\n        QueryBuilder.getInstance().addGenerator(this.getQueryString.bind(this), 0)\n        fetch(window.location.pathname + \"/datasets.json\")\n            .then(res => res.json())\n            .then((res) => {\n                this.datasets = res\n                this.ready = true\n                if (this.currentDataset === null) this.currentDataset = this.datasets[0]\n                this.dataLoader.setDataset(this.currentDataset)\n                this.callbacks.forEach(c => c())\n            })\n    }\n\n    addChangeCallback(callback: () => void) {\n        this.callbacks.push(callback)\n    }\n\n    getCurrentDataset() {\n        if (this.currentDataset != null) return this.currentDataset\n        return undefined\n    }\n\n    getCurrentDatasetName() {\n        if (this.currentDataset != null) return Datasets.getDatasetTitle(this.currentDataset)\n        return undefined\n    }\n\n    getDatasets() {\n        if (this.ready) return this.datasets\n        return undefined\n    }\n\n    getDatasetNames() {\n        if (this.ready) return this.datasets.map(Datasets.getDatasetTitle)\n        return undefined\n    }\n\n    getDataLoader() {\n        return this.dataLoader\n    }\n\n    setCurrentDataset(name: string) {\n        this.currentDataset = name\n        QueryBuilder.getInstance().update()\n        this.dataLoader.setDataset(name)\n        this.callbacks.forEach(c => c())\n    }\n\n    private parseDataset(query: string) {\n        if (query[0] === '?') query = query.slice(1)\n        const res = query.split('&').filter((e) => e.startsWith('d='))\n        if (res.length !== 0)\n            this.currentDataset = res[0].substr(2)\n    }\n\n    private getQueryString(): string {\n        if (this.currentDataset === null) return \"\"\n        return 'd=' + this.currentDataset\n    }\n\n    static getDatasetTitle(name: string): string {\n        if (name.match(/^\\d*$/)) {\n            const year = Number.parseInt(name)\n            return name + '-' + (year + 1).toString()\n        } else return name\n    }\n}\n","import {\n    AppBar,\n    Drawer,\n    IconButton,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    Toolbar,\n    Typography\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ListIcon from \"@material-ui/icons/List\"\nimport React from \"react\";\nimport Datasets from \"../models/Datasets\";\n\ninterface BarState {\n    drawer: boolean\n}\n\nexport default class TopBar extends React.Component<{}, BarState> {\n\n    constructor(props: {}) {\n        super(props);\n\n        this.state = {\n            drawer: false\n        }\n    }\n\n    componentDidMount(): void {\n        Datasets.getInstance().addChangeCallback(() => this.forceUpdate())\n    }\n\n    render() {\n        const toggleDrawer = (state: boolean) => () => this.setState({drawer: state})\n        const dataset_list: string[] = Datasets.getInstance().getDatasets() || []\n        return (\n            <AppBar position=\"sticky\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" onClick={toggleDrawer(true)}>\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography variant=\"h6\" style={{flexGrow: 1}}>\n                        {\"ASUCLA budget spending \" + Datasets.getInstance().getCurrentDatasetName()}\n                    </Typography>\n                </Toolbar>\n                <Drawer anchor={'left'} open={this.state.drawer} onClose={toggleDrawer(false)}>\n                    <div onClick={toggleDrawer(false)}>\n                        <List>\n                            {dataset_list.map(text => (\n                                <ListItem button key={text} onClick={() => {\n                                    toggleDrawer(false)\n                                    Datasets.getInstance().setCurrentDataset(text)\n                                }}>\n                                    <ListItemIcon><ListIcon/></ListItemIcon>\n                                    <ListItemText primary={\"Budget \" + Datasets.getDatasetTitle(text)}/>\n                                </ListItem>\n                            ))}\n                        </List>\n                    </div>\n                </Drawer>\n            </AppBar>\n        )\n    }\n}\n","/**\n * Created by TylerLiu on 2020/04/23.\n */\nimport 'd3-transition';\nimport {select} from 'd3-selection';\nimport React, {Component} from 'react';\nimport ReactWordcloud, {Callbacks, OptionsProp, Word} from \"react-wordcloud\";\nimport {KMFormat} from \"../util\";\nimport {DataLoaderProps} from \"../models/DataLoader\";\n\ninterface WordCloudProps extends DataLoaderProps {\n    hidden?: boolean\n}\n\nexport default class WordCloud extends Component<WordCloudProps> {\n    private callbacks: Callbacks = {\n        getWordTooltip: (word: Word) => `${word.text} has $${KMFormat(word.value)} in the category.`,\n        onWordClick: this.getCallback('onWordClick').bind(this),\n        onWordMouseOut: this.getCallback('onWordMouseOut').bind(this),\n        onWordMouseOver: this.getCallback('onWordMouseOver').bind(this),\n    };\n\n    private options: OptionsProp = {\n        fontFamily: 'impact',\n        fontSizes: [5, 60],\n        fontStyle: 'normal',\n        fontWeight: 'normal',\n        scale: 'log',\n        //spiral: 'archimedean',\n        deterministic: true,\n\n        rotations: 4,\n        rotationAngles: [-45, 90],\n\n        transitionDuration: 200,\n    }\n\n    constructor(props: DataLoaderProps) {\n        super(props)\n\n        this.state = {\n            words: [{text: 'Loading...', value: 100}]\n        }\n    }\n\n    componentDidMount() {\n        this.props.dataloader.addChangeCallback(this.setWords.bind(this))\n    }\n\n    render() {\n        return (\n            <div style={{height: '80vh'}} hidden={this.props.hidden}>\n                {(this.props.hidden || false) ? null : (\n                    <ReactWordcloud callbacks={this.callbacks} words={this.props.dataloader.getWordList()}\n                                    options={this.options}/>\n                )}\n            </div>\n        )\n    }\n\n    getCallback(callback: string) {\n        return (word: Word, event: MouseEvent | undefined) => {\n            const isActive = callback !== 'onWordMouseOut';\n            // @ts-ignore\n            const text = select(event.target);\n            text\n                .on('click', (() => {\n                    if (isActive) {\n                        this.props.dataloader.addKeywordFilter(word.text);\n                    }\n                }))\n                .transition()\n                .attr('background', 'white')\n                .attr('text-decoration', isActive ? 'underline' : 'none');\n        };\n    }\n\n    setWords() {\n        this.forceUpdate()\n    }\n}\n","/**\n * Created by TylerLiu on 2018/12/23.\n */\nimport React, {Component} from 'react';\nimport {\n    Grid,\n    VirtualTable,\n    TableHeaderRow,\n    TableSummaryRow,\n    ExportPanel,\n    TableColumnVisibility, ColumnChooser, Toolbar, TableGroupRow, GroupingPanel, SearchPanel\n} from \"@devexpress/dx-react-grid-material-ui\";\nimport {Category, DataLoaderProps} from \"../models/DataLoader\";\nimport {\n    Column, GroupingState, GroupSummaryItem, IntegratedFiltering, IntegratedGrouping,\n    IntegratedSorting,\n    IntegratedSummary, SearchState,\n    Sorting,\n    SortingState, SummaryItem,\n    SummaryState, TableGroupRow as TableGroupRowBase\n} from \"@devexpress/dx-react-grid\";\nimport {Paper} from \"@material-ui/core\";\nimport {DataTypeProvider} from \"@devexpress/dx-react-grid\";\nimport {GridExporter} from \"@devexpress/dx-react-grid-export\";\nimport {saveAs} from \"file-saver\";\nimport Datasets from \"../models/Datasets\";\nimport {Workbook} from \"exceljs\";\n\nconst month_name = ['January', 'February', 'March', 'April', 'May', 'June',\n    'July', 'August', 'September', 'October', 'November', 'December']\n\nconst CurrencyFormatter = ({value}: {value: number}) => (\n    <span style={{ color: 'darkblue' }}>\n        {value.toLocaleString('en-US', { style: 'currency', currency: 'USD' })}\n    </span>\n);\n\nconst DateFormatter = ({ value }: {value: Date}) => (\n    <span>{value.toDateString()}</span>\n);\n\nconst DateGroupFormatter = ({ column, row }: TableGroupRowBase.ContentProps) => {\n    if (column.name === 'date') {\n        row.key.toString()\n        const [year, month] = row.key.toString().split('-');\n        return <span>{month_name[Number.parseInt(month) - 1]} {year}</span>\n    } else return (\n        <span>{row.value}</span>\n    )\n};\n\nconst dateToYearMonth = (value: Date) =>\n    value.getFullYear().toString().padStart(4, '0') + '-' + (value.getMonth() + 1).toString().padStart(2, '0')\n\ninterface RecordTableState {\n    sortingState: Sorting[]\n    hiddenColumns: string[]\n}\n\ninterface RecordTableProps extends DataLoaderProps{\n    groupBy?: Category | \"date\" | undefined;\n}\n\nexport default class RecordTable extends Component<RecordTableProps, RecordTableState> {\n\n    private readonly summaryItems: SummaryItem[] = [\n        { columnName: 'date', type: 'count' },\n        { columnName: 'amount', type: 'sum'},\n    ]\n\n    private readonly columns: Column[] = [\n        {title: 'Row Number', name: 'id'},\n        {title: 'Date', name: 'date'},\n        {title: 'Department', name: 'department'},\n        {title: 'Fund', name: 'fund'},\n        {title: 'Division', name: 'division'},\n        {title: 'Event', name: 'event'},\n        {title: 'GL', name: 'gl'},\n        {title: 'Description', name: 'description'},\n        {title: 'Amount', name: 'amount'},\n    ]\n\n    private readonly tableColumnExtension: VirtualTable.ColumnExtension[] = [\n        {columnName: 'id',          wordWrapEnabled:true},\n        {columnName: 'date',        wordWrapEnabled:true},\n        {columnName: 'department',  wordWrapEnabled:true},\n        {columnName: 'fund',        wordWrapEnabled:true},\n        {columnName: 'division',    wordWrapEnabled:true},\n        {columnName: 'event',       wordWrapEnabled:true},\n        {columnName: 'gl',          wordWrapEnabled:true},\n        {columnName: 'description', wordWrapEnabled:true},\n        {columnName: 'amount',      wordWrapEnabled:true, align: 'center'},\n    ]\n\n    private readonly groupSummaryItems: GroupSummaryItem[] = [\n        { columnName: 'amount', type: 'sum', showInGroupFooter: false, alignByColumn: true},\n        { columnName: 'amount', type: 'sum', showInGroupFooter: true},\n        { columnName: 'date', type: 'count', showInGroupFooter: true},\n    ]\n\n    private groupingColumnExtensions: IntegratedGrouping.ColumnExtension[] = [\n        {columnName: 'date', criteria: (value) => {\n            if (value instanceof Date) {\n                const key = dateToYearMonth(value)\n                return {key: key}\n            } else return {key: \"\"};\n        }}\n    ]\n\n    private readonly exporter: React.RefObject<{exportGrid: (options?: object) => void}>\n\n    private groupWeight: Map<string, number>\n\n    private integratedSortingColumnExtensions: IntegratedSorting.ColumnExtension[] = []\n\n    constructor(props: DataLoaderProps) {\n        super(props);\n        this.exporter = React.createRef()\n\n        this.state = {\n            sortingState: [{ columnName: 'id', direction: 'asc' }],\n            hiddenColumns: ['id', 'fund', 'division','event']\n        }\n\n        this.groupWeight = new Map<string, number>()\n        if (this.props.groupBy !== undefined && this.props.groupBy !== 'date') {\n            this.buildGroupWeightTable()\n        }\n    }\n\n    componentDidMount() {\n        this.props.dataloader.addChangeCallback(() => {\n            this.buildGroupWeightTable();\n            this.forceUpdate()\n        })\n    }\n\n    private buildGroupWeightTable() {\n        if (this.props.groupBy !== undefined && this.props.groupBy !== 'date') {\n            this.groupWeight.clear()\n            this.groupWeight.set(`\\nGroupBy${this.props.groupBy}`, 1)\n            this.props.dataloader.getCategories(this.props.groupBy).forEach(entry => {\n                this.groupWeight.set(entry.text, entry.value)\n            })\n\n            this.integratedSortingColumnExtensions = [\n                { columnName: this.props.groupBy,\n                    compare: (a, b) => (this.groupWeight?.get(a)||0) - (this.groupWeight?.get(b)||0)\n                },\n            ]\n        }\n    }\n\n    render() {\n        const rows = this.props.dataloader.getRecords().map((e, i) => {e.id = i; return e})\n\n        if (this.props.groupBy !== undefined && this.props.groupBy !== 'date' &&\n            !this.groupWeight.has(`\\nGroupBy${this.props.groupBy}`)) {\n            this.buildGroupWeightTable()\n            console.log(\"built table\")\n        }\n\n        return (\n            <Paper>\n                <Grid rows={rows} columns={this.columns}>\n                    <SortingState\n                        sorting={this.state.sortingState}\n                        onSortingChange={this.setSorting.bind(this)}\n                    />\n                    <GroupingState\n                        grouping={this.props.groupBy !== undefined ? [{columnName: this.props.groupBy}]:[]}\n                    />\n                    <SearchState/>\n                    <SummaryState totalItems={this.summaryItems} groupItems={this.groupSummaryItems}/>\n\n                    <IntegratedGrouping columnExtensions={this.groupingColumnExtensions}/>\n                    <IntegratedFiltering />\n                    <IntegratedSorting columnExtensions={this.integratedSortingColumnExtensions}/>\n                    <IntegratedSummary />\n\n                    <DataTypeProvider for={['amount']} formatterComponent={CurrencyFormatter} />\n                    <DataTypeProvider for={['date']} formatterComponent={DateFormatter} />\n\n                    <VirtualTable columnExtensions={this.tableColumnExtension}/>\n                    <TableHeaderRow showSortingControls/>\n                    {this.props.groupBy === 'date' ?\n                        <TableGroupRow\n                            contentComponent={DateGroupFormatter}\n                            columnExtensions={[{columnName: 'date', showWhenGrouped: true}]}\n                        /> :\n                        <TableGroupRow />}\n                    <TableSummaryRow />\n                    <TableColumnVisibility\n                        hiddenColumnNames={this.state.hiddenColumns}\n                        onHiddenColumnNamesChange={(hiddenColumns) => this.setState({hiddenColumns: hiddenColumns})}\n                    />\n\n                    <Toolbar />\n                    <GroupingPanel showSortingControls emptyMessageComponent={() => <span/>}/>\n                    <SearchPanel />\n                    <ColumnChooser />\n                    <ExportPanel startExport={(options) => this.exporter.current?.exportGrid(options)} />\n                </Grid>\n                <GridExporter\n                    ref={this.exporter}\n                    columns={this.columns}\n                    rows={rows}\n                    onSave={(workbook) => this.onSave(workbook)}\n                />\n            </Paper>\n        )\n    }\n\n    private setSorting(newSorting: Sorting[]) {\n        let sorts: Sorting[] = [];\n        const oldSorting = this.state.sortingState;\n        newSorting.forEach(value => {\n            let add = true\n            for (const oldValue of oldSorting) {\n                if (value.columnName === oldValue.columnName && value.direction === \"asc\" && oldValue.direction === \"desc\") {\n                    add = false\n                    break\n                }\n            }\n            if (add) sorts.push(value)\n        })\n        this.setState({sortingState: sorts})\n    }\n\n    private onSave(workbook: Workbook){\n        workbook.xlsx.writeBuffer().then((buffer) => {\n            saveAs(new Blob([buffer], { type: 'application/octet-stream' }),\n                `Transactions-${Datasets.getInstance().getCurrentDatasetName()}.xlsx` );\n        });\n    }\n\n}\n","/**\n * Created by TylerLiu on 2018/12/23.\n */\nimport React, {Component} from 'react';\nimport {Breadcrumbs, Typography} from \"@material-ui/core\";\nimport Link from \"@material-ui/core/Link\";\nimport {KMFormat} from \"../util\";\nimport {DataLoaderProps} from \"../models/DataLoader\";\n\nexport default class KeywordCrumb extends Component<DataLoaderProps> {\n\n    componentDidMount() {\n        this.props.dataloader.addChangeCallback(() => this.forceUpdate())\n    }\n\n    render() {\n        let list = this.props.dataloader.getFilters()\n        return (\n            <Breadcrumbs separator=\">\" style={this.props.style}>\n                <Link key={-1} color=\"textPrimary\"\n                      onClick={() => this.props.dataloader.sliceFilter(0)}>Transactions(${KMFormat(this.props.dataloader.getDatasetTotal())})</Link>\n                {list.slice(0, -1).map((filter, index) => (\n                    <Link key={index} color=\"textSecondary\"\n                          onClick={() => this.props.dataloader.sliceFilter(index + 1)}>{filter.category}: {filter.name}(${KMFormat(filter.amount)})</Link>\n                ))}\n                {list.length > 0 ? (<Typography color=\"textPrimary\"\n                                                key={list.length}>{list[list.length - 1].category}: {list[list.length - 1].name}(${KMFormat(list[list.length - 1].amount)})</Typography>) : null}\n            </Breadcrumbs>\n        )\n    }\n}\n","import React, {Component} from \"react\";\nimport {Category, DataLoaderProps} from \"../models/DataLoader\";\nimport {Pie, PieChart, ResponsiveContainer, Tooltip} from 'recharts';\nimport {KMFormat} from \"../util\";\n\ninterface CategoryPieProps extends DataLoaderProps {\n    category: Category\n    hidden?: boolean\n}\n\nexport default class CategoryPie extends Component<CategoryPieProps> {\n\n    componentDidMount(): void {\n        this.props.dataloader.addChangeCallback(() => this.forceUpdate())\n    }\n\n    render(): React.ReactNode {\n        const data = this.props.dataloader.getCategories(this.props.category)\n        return (\n            <div style={{height: '80vh'}} hidden={this.props.hidden || false}>\n                {(this.props.hidden || false) ? null : (\n                    <ResponsiveContainer height=\"100%\" width=\"100%\">\n                        <PieChart>\n                            <Pie data={data} dataKey=\"value\" nameKey=\"text\" fill={this.getColor()}\n                                 label={({percent, name}) => ((percent || 0) > 0.005 ? name : \"\")}\n                                 labelLine={false}\n                                 onClick={(e) => this.props.dataloader.addCategoryFilter(this.props.category, e.text)}/>\n                            <Tooltip formatter={(value) => \"$\" + KMFormat(value as number)}\n                                     contentStyle={{padding: '0 5px', margin: 0, borderRadius: 5}}/>\n                        </PieChart>\n                    </ResponsiveContainer>\n                )}\n            </div>\n        )\n    }\n\n    getColor(): string {\n        switch (this.props.category) {\n            case \"fund\":\n                return \"#ef5350\"\n            case \"division\":\n                return \"#ab47bc\"\n            case \"department\":\n                return \"#26c6da\"\n            case \"gl\":\n                return \"#26a69a\"\n            case \"event\":\n                return \"#d4e157\"\n        }\n    }\n}\n","import React, {Component} from \"react\";\nimport {AmountBin, DataLoaderProps} from \"../models/DataLoader\";\nimport {Bar, BarChart, CartesianGrid, Cell, Label, ReferenceLine, ResponsiveContainer, XAxis, YAxis} from 'recharts';\nimport {KMFormat} from \"../util\";\nimport {Mark, Slider} from \"@material-ui/core\";\n\ninterface SliderProps extends DataLoaderProps {\n    hidden?: boolean\n}\n\ninterface SliderState {\n    value: [number, number]\n    data: AmountBin[]\n}\n\nexport default class AmountSlider extends Component<SliderProps, SliderState> {\n\n    constructor(props: SliderProps) {\n        super(props);\n        this.state = {\n            value: [0, 100],\n            data: []\n        }\n    }\n\n\n    componentDidMount(): void {\n        this.props.dataloader.addChangeCallback(() =>\n            this.updateState()\n        )\n        this.updateState()\n    }\n\n    updateState() {\n        const {data, domain} = this.props.dataloader.getAmountBins(20)\n        this.setState({\n            data: data,\n            value: domain,\n        })\n    }\n\n    render(): React.ReactNode {\n        const data = this.state.data\n        const domain: [number, number] = data.length === 0 ? [0, 1] : [data[0].low, data[data.length - 1].high]\n        return (\n            <div style={{\n                paddingLeft: '5%', paddingRight: `calc(5% + ${AmountSlider.getYAxisWidth()}px)`,\n                height: '80vh', margin: \"auto\"\n            }} hidden={this.props.hidden || false}>\n                {(this.props.hidden || false) ? null : (\n                    <ResponsiveContainer height=\"90%\" width=\"100%\">\n                        <BarChart data={data} barCategoryGap={0} margin={{bottom: 0, left: 0, right: 0}}>\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\n                            <XAxis dataKey=\"name\" domain={domain} hide orientation=\"top\"/>\n                            <YAxis domain={[0, 'dataMax']} tickFormatter={(v) => '$' + KMFormat(v)}\n                                   width={AmountSlider.getYAxisWidth()}>\n                                <Label angle={270} position=\"insideLeft\" style={{textAnchor: 'middle'}}>\n                                    Expense Sum in Transaction Amount Bin($)\n                                </Label>\n                            </YAxis>\n                            <ReferenceLine y={0} label=\"\" stroke=\"black\"/>\n                            <Bar dataKey={\"value\"} fill={this.getColor()}>\n                                {data.map((value, index) => (\n                                    <Cell key={`cell-${index}`} fill={this.getColor()}\n                                          opacity={this.getOpacity(value.low, value.high)}/>\n                                ))}\n                            </Bar>\n                        </BarChart>\n                    </ResponsiveContainer>\n                )}\n                <div style={{paddingLeft: AmountSlider.getYAxisWidth()}}>\n                    <Slider value={this.state.value}\n                            min={domain[0]} max={domain[1]}\n                            onChange={this.onRangeChange.bind(this)}\n                            onChangeCommitted={this.onRangeChangeCommitted.bind(this)}\n                            valueLabelDisplay=\"auto\"\n                            valueLabelFormat={(v) => '$' + KMFormat(v)}\n                            marks={this.getMarks(domain)}\n                    />\n                </div>\n            </div>\n        )\n    }\n\n    static getViewportWidth() {\n        return Math.max(document.documentElement.clientWidth, window.innerWidth || 0)\n    }\n\n    static getYAxisWidth() {\n        return AmountSlider.getViewportWidth() < 480 ? 0 : 72\n    }\n\n    onRangeChange(event: any, newValues: number | number[]) {\n        this.setState({value: newValues as [number, number]})\n    }\n\n    onRangeChangeCommitted(event: any, newValues: number | number[]) {\n        const nVal = newValues as [number, number]\n        this.props.dataloader.addAmountFilter(nVal[0], nVal[1])\n    }\n\n    getColor(): string {\n        return \"#29b6f6\"\n    }\n\n    getOpacity(low: number, high: number): number {\n        const proportion = Math.max(0, Math.min(this.state.value[1], high) - Math.max(this.state.value[0], low)) / (high - low)\n        return 0.3 + 0.7 * proportion\n    }\n\n    getMarkPoint(x: number): Mark {\n        return {value: x, label: '$' + KMFormat(x)}\n    }\n\n    getMarks(domain: [number, number]): Mark[] {\n        const total_width = AmountSlider.getViewportWidth() * 0.8 - AmountSlider.getYAxisWidth()\n        const min_diff = 60 / total_width * (domain[1] - domain[0])\n        let marks: Mark[] = domain.map(e => this.getMarkPoint(e))\n        if (domain[0] < 0 && domain[1] > 0) {\n            marks = marks.filter(e => Math.abs(e.value) >= min_diff)\n            marks.push(this.getMarkPoint(0))\n        }\n\n        const step_size = Math.max((domain[1] - domain[0]) / 10, min_diff)\n        for (let i = 1; domain[0] + i * step_size <= domain[1] - min_diff; i++) {\n            const val = Number.parseFloat((domain[0] + i * step_size).toPrecision(2))\n            if (Math.abs(val) < 0.9 * step_size) continue\n            marks.push(this.getMarkPoint(val))\n        }\n\n        return marks\n    }\n}\n","import React, {Component} from \"react\";\nimport {DataLoaderProps, WordEntry} from \"../models/DataLoader\";\nimport {\n    Area,\n    AreaChart,\n    CartesianGrid,\n    Label,\n    ReferenceLine,\n    ResponsiveContainer,\n    Tooltip,\n    XAxis,\n    YAxis\n} from 'recharts';\nimport {KMFormat} from \"../util\";\nimport {Mark, Slider} from \"@material-ui/core\";\n\ninterface SliderProps extends DataLoaderProps {\n    hidden?: boolean\n}\n\ninterface SliderState {\n    value: [number, number]\n    domain: [string, string]\n    data: WordEntry[]\n}\n\nconst month_name = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\nexport default class DateSlider extends Component<SliderProps, SliderState> {\n\n    constructor(props: SliderProps) {\n        super(props);\n        this.state = {\n            value: [0, 1],\n            domain: ['0000-01', '9999-12'],\n            data: []\n        }\n    }\n\n\n    componentDidMount(): void {\n        this.props.dataloader.addChangeCallback(() =>\n            this.updateState()\n        )\n        this.updateState()\n    }\n\n    updateState() {\n        const {data, domain} = this.props.dataloader.getMonthBins()\n        const names = data.map(e => e.text)\n        this.setState({\n            data: data,\n            value: [names.indexOf(domain[0]) + 0.5, names.indexOf(domain[1]) + 0.5],\n        })\n    }\n\n    render(): React.ReactNode {\n        const data = this.state.data\n        return (\n            <div style={{\n                paddingLeft: '5%', paddingRight: `calc(5% + ${DateSlider.getYAxisWidth()}px)`,\n                height: '80vh', margin: \"auto\"\n            }} hidden={this.props.hidden || false}>\n                {(this.props.hidden || false) ? null : (\n                    <ResponsiveContainer height=\"90%\" width=\"100%\">\n                        <AreaChart data={data} barCategoryGap={0} margin={{bottom: 0, left: 0, right: 0}}>\n                            <defs>\n                                <linearGradient id=\"fillGrad\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                    <stop offset=\"5%\" stopColor={this.getColor()} stopOpacity={0.9}/>\n                                    <stop offset=\"95%\" stopColor={this.getColor()} stopOpacity={0.3}/>\n                                </linearGradient>\n                                <linearGradient id=\"fillGrad2\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\">\n                                    <stop offset={this.getLeftPoint() - 0.01} stopColor={this.getColor()}\n                                          stopOpacity={0.2}/>\n                                    <stop offset={this.getLeftPoint() + 0.01} stopColor={this.getColor()}\n                                          stopOpacity={0.6}/>\n                                    <stop offset={this.getRightPoint() - 0.01} stopColor={this.getColor()}\n                                          stopOpacity={0.6}/>\n                                    <stop offset={this.getRightPoint() + 0.01} stopColor={this.getColor()}\n                                          stopOpacity={0.2}/>\n                                </linearGradient>\n                            </defs>\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\n                            <XAxis dataKey=\"text\" hide orientation=\"top\" scale=\"band\"/>\n                            <YAxis tickFormatter={(v) => '$' + KMFormat(v)} width={DateSlider.getYAxisWidth()}>\n                                <Label angle={270} position=\"insideLeft\" style={{textAnchor: 'middle'}}>\n                                    Monthly Expense($)\n                                </Label>\n                            </YAxis>\n                            <Tooltip formatter={(value) => \"$\" + KMFormat(value as number)}\n                                     contentStyle={{display: 'none'}}/>\n                            <ReferenceLine y={0} label=\"\" stroke=\"black\"/>\n                            <Area type=\"monotone\" dataKey=\"value\" stroke={this.getColor()} fillOpacity={1}\n                                  fill=\"url(#fillGrad2)\"/>\n                        </AreaChart>\n                    </ResponsiveContainer>\n                )}\n                <div style={{paddingLeft: DateSlider.getYAxisWidth()}}>\n                    <Slider value={this.state.value}\n                            min={0} max={this.state.data.length}\n                            onChange={this.onRangeChange.bind(this)}\n                            onChangeCommitted={this.onRangeChangeCommitted.bind(this)}\n                            valueLabelDisplay=\"off\"\n                            marks={this.getMarks(this.state.data)}\n                            step={null}\n                    />\n                </div>\n            </div>\n        )\n    }\n\n    static getViewportWidth() {\n        return Math.max(document.documentElement.clientWidth, window.innerWidth || 0)\n    }\n\n    static getYAxisWidth() {\n        return this.getViewportWidth() < 480 ? 0 : 72\n    }\n\n    onRangeChange(event: any, newValues: number | number[]) {\n        this.setState({value: newValues as [number, number]})\n    }\n\n    onRangeChangeCommitted(event: any, newValues: number | number[]) {\n        const nVal = (newValues as [number, number]).map(e => Math.round(e - 0.5))\n        const data = this.state.data\n        this.props.dataloader.addMonthFilter(data[nVal[0]].text, data[nVal[1]].text)\n    }\n\n    getColor(): string {\n        return \"#009688\"\n    }\n\n    getOpacity(index: number): number {\n        index += 0.5\n        return this.state.value[0] <= index && index <= this.state.value[1] ? 1 : 0.3\n    }\n\n    getLeftPoint(): number {\n        return (this.state.value[0] - 1) / (this.state.data.length - 1)\n    }\n\n    getRightPoint(): number {\n        return (this.state.value[1]) / (this.state.data.length - 1)\n    }\n\n    getMarks(data: WordEntry[]): Mark[] {\n        let marks = data.map((e, i) => ({value: i + 0.5, label: e.text}))\n        let years: Set<String> = new Set<String>();\n        marks.forEach((e, i) => {\n            const d = e.label.split('-')\n            if (years.has(d[0])) marks[i].label = month_name[Number.parseInt(d[1]) - 1]\n            else {\n                years.add(d[0])\n                marks[i].label = month_name[Number.parseInt(d[1]) - 1] + ` ${d[0]}`;\n            }\n        })\n        return marks\n    }\n}\n","import React from 'react';\nimport '../App.css';\nimport WordCloud from \"./WordCloud\";\nimport RecordTable from \"./RecordTable\";\nimport KeywordCrumb from \"./KeywordCrumb\";\nimport Paper from \"@material-ui/core/Paper\";\nimport DataLoader from \"../models/DataLoader\";\nimport CategoryPie from \"./CategoryPie\";\nimport {Tab, Tabs} from \"@material-ui/core\";\nimport AmountSlider from \"./AmountSlider\";\nimport QueryBuilder from \"../models/QueryBuilder\";\nimport DateSlider from \"./DateSlider\";\n\ninterface DatasetState {\n    value: number\n\n}\n\ninterface DatasetProps {\n    loader: DataLoader\n}\n\nexport default class DatasetView extends React.Component<DatasetProps, DatasetState> {\n    private value: number = 0\n\n    constructor(props: DatasetProps) {\n        super(props);\n\n        this.value = this.parseQuery(QueryBuilder.getInstance().getQuery())\n\n        this.state = {\n            value: this.value,\n        }\n\n        QueryBuilder.getInstance().addGenerator(this.generateQuery.bind(this), 1)\n    }\n\n    componentDidMount(): void {\n        this.props.loader.addChangeCallback(() => this.forceUpdate())\n    }\n\n    parseQuery(query: string): number {\n        if (query[0] === '?') query = query.slice(1)\n        const res = query.split('&').filter((e) => e.startsWith('tab='))\n        if (res.length === 0) return 0\n        return Number.parseInt(res[0].substr(4))\n    }\n\n    generateQuery(): string {\n        return 'tab=' + this.value\n    }\n\n    render() {\n        const loader = this.props.loader\n        return (\n            <Paper variant=\"outlined\" style={{margin: '0 10%'}}>\n                <KeywordCrumb style={{margin: 10}} dataloader={loader}/>\n                <Tabs value={this.state.value}\n                      onChange={(e, value) => {\n                          this.value = value\n                          this.setState({value: value})\n                          QueryBuilder.getInstance().update()\n                      }}\n                      variant=\"scrollable\"\n                      indicatorColor=\"primary\" textColor=\"primary\">\n                    <Tab label=\"Keywords\"/>\n                    <Tab label=\"Fund\"/>\n                    <Tab label=\"Division\"/>\n                    <Tab label=\"Department\"/>\n                    <Tab label=\"GL\"/>\n                    <Tab label=\"Event\"/>\n                    <Tab label=\"Amount\"/>\n                    <Tab label=\"Date\"/>\n                </Tabs>\n                <WordCloud hidden={this.state.value !== 0} dataloader={loader}/>\n                <CategoryPie hidden={this.state.value !== 1} category={\"fund\"} dataloader={loader}/>\n                <CategoryPie hidden={this.state.value !== 2} category={\"division\"} dataloader={loader}/>\n                <CategoryPie hidden={this.state.value !== 3} category={\"department\"} dataloader={loader}/>\n                <CategoryPie hidden={this.state.value !== 4} category={\"gl\"} dataloader={loader}/>\n                <CategoryPie hidden={this.state.value !== 5} category={\"event\"} dataloader={loader}/>\n                <AmountSlider hidden={this.state.value !== 6} dataloader={loader}/>\n                <DateSlider hidden={this.state.value !== 7} dataloader={loader}/>\n                <RecordTable dataloader={loader} groupBy={this.getCategory(this.state.value)}/>\n            </Paper>\n        );\n    }\n\n    private getCategory(index: number) {\n        switch (index) {\n            case 1: return \"fund\"\n            case 2: return \"division\"\n            case 3: return \"department\"\n            case 4: return \"gl\"\n            case 5: return \"event\"\n            case 7: return \"date\"\n            default: return undefined\n        }\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport TopBar from \"./components/TopBar\";\nimport DatasetView from \"./components/DatasetView\"\nimport DataLoader from \"./models/DataLoader\";\nimport Datasets from \"./models/Datasets\";\n\ninterface AppState {\n    loader: DataLoader\n}\n\nclass App extends React.Component<{}, AppState> {\n\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            loader: Datasets.getInstance().getDataLoader()\n        }\n    }\n\n    componentDidMount(): void {\n        Datasets.getInstance().addChangeCallback(() => {\n            this.setState({\n                loader: Datasets.getInstance().getDataLoader()\n            })\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <TopBar/>\n                <DatasetView loader={this.state.loader}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}